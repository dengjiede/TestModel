// Created by Microsoft (R) C/C++ Compiler Version 12.00.21005.1 (e26fab5c).
//
// d:\program files (x86)\citymaker 7\citymaker sdk\samples\csharp\beginner\helloworldcplus\debug\GcmRenderControl.tlh
//
// C++ source equivalent of Win32 type library 2B31D54F-48C9-445b-8BDC-32A06BAC38FF
// compiler-generated file created 09/08/17 at 15:13:00 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("2b31d54f-48c9-445b-8bdc-32a06bac38ff"))
/* LIBID */ __GcmRenderControl;
enum gviRenderSystem;
enum gviObjectType;
enum gviMeasurementMode;
enum gviClipMode;
enum gviClipPlaneOperation;
enum gviInteractMode;
enum gviEditorType;
enum gviMouseSelectObjectMask;
enum gviMouseSelectMode;
enum gviSetCameraFlags;
enum gviGetElevationType;
enum gviPivotAlignment;
enum gviDashStyle;
enum gviMultilineJustification;
enum gviCameraTourMode;
enum gviSimplePointStyle;
enum gviViewportMode;
enum gviSkyboxImageIndex;
enum gviGeoEditType;
enum gviParticleBillboardType;
enum gviEmitterType;
enum gviWeatherType;
enum gviModKeyMask;
enum gviViewportMask;
enum gviRenderRuleType;
enum gviHeightStyle;
enum gviFogMode;
enum gviRenderType;
enum gviRasterSourceType;
enum gviGeometrySymbolType;
enum gviFlyMode;
enum gviActionCode;
enum gviHTMLWindowPosition;
enum gviSunCalculateMode;
enum gviMouseSnapMode;
enum gviArrowType;
enum gviCollisionDetectionMode;
enum gviAttributeMask;
enum gviRenderControlParameters;
enum gviManipulatorMode;
enum gviLengthUnit;
enum gviAreaUnit;
enum gviLockMode;
enum gviDynamicMotionStyle;
enum gviElevationBehaviorMode;
enum gviDepthTestMode;
enum gviWalkMode;
enum gviTerrainActionCode;
enum gviAltitudeType;
enum gviLineToGroundType;
enum gviShowTextOptions;
enum gviPresentationPlayMode;
enum gviPresentationPlaySpeed;
enum gviPresentationStatus;
enum gviPresentationStepContinue;
enum gviPresentationStepFlightSpeed;
enum gviPresentationSplineSpeedBehavior;
enum gviPresentationStepType;
enum gviPresentationCaptionPosition;
enum gviPresentationCaptionSizeType;
enum gviPresentationPlayAlgorithm;
enum gviComplexParticleEffectType;
enum gviMsgChainFlags;
enum gviUIWindowType;
enum gviUIEventType;
enum gviUIMouseButtonType;
struct __declspec(uuid("682ac2c1-490e-4820-a7fe-7ab460da002d"))
/* dual interface */ IRObject;
struct __declspec(uuid("d2527ea6-02ff-4bab-81bc-372f3f3243f6"))
/* dual interface */ IRenderable;
struct __declspec(uuid("7c70c1e4-9a28-48c2-ba45-305b4ddf5837"))
/* dual interface */ IRenderGeometry;
struct __declspec(uuid("39fff071-ef9e-4002-9f57-c1a79b4ef5d6"))
/* dual interface */ IReferencePlane;
struct __declspec(uuid("d0b1e4c5-5fc6-4a03-94db-9be89f288550"))
/* dual interface */ IFeatureManager;
struct __declspec(uuid("cfaff3e3-4b1e-4346-beb5-b31aa902321d"))
/* dual interface */ IPickResult;
struct __declspec(uuid("504a18f2-c761-4961-a7a0-0eaa21bdd698"))
/* dual interface */ IPickResultCollection;
struct __declspec(uuid("23f94bbf-afb7-47f5-86b7-7a95beb18e2a"))
/* dual interface */ ITransformHelper;
struct __declspec(uuid("509994d1-8ff9-4b91-a6f3-13a54d10668c"))
/* dual interface */ ICamera;
struct __declspec(uuid("33e4cca8-412a-4701-8e62-1f0814a8f969"))
/* dual interface */ ITerrain;
struct __declspec(uuid("48fd05c2-d6ef-4fb8-a326-9e2c07fc1754"))
/* dual interface */ ISkyBox;
struct __declspec(uuid("445f62b4-a639-4523-b182-4331ac2f4e33"))
/* dual interface */ IObjectManager;
struct __declspec(uuid("c4100782-dedc-435c-a281-2b0000ece5ef"))
/* dual interface */ ITextRender;
struct __declspec(uuid("8ff7cc48-1dc6-4d19-a8bb-8849a60799ad"))
/* dual interface */ IGeometryRender;
struct __declspec(uuid("39b320a8-bee1-4397-9469-e7e6fb055558"))
/* dual interface */ IFeatureLayer;
struct __declspec(uuid("9b39e213-e55f-4041-ace8-0748de409ed5"))
/* dual interface */ IFeatureClassInfo;
struct __declspec(uuid("290f9680-65a6-426f-9f89-29661227600d"))
/* dual interface */ ITerrainRoute;
struct __declspec(uuid("f0e8f6ed-0acc-4c1f-ae93-1252a1381e30"))
/* dual interface */ IModelPointSymbol;
struct __declspec(uuid("ce9e73a0-0cdc-4620-a22c-66d62cc40ab2"))
/* dual interface */ IGeometrySymbol;
struct __declspec(uuid("397b609d-fdb7-43f9-8e6f-83f3e1092a45"))
/* dual interface */ IRenderModelPoint;
struct __declspec(uuid("b71725a5-dadd-4507-ab69-26f9c159d958"))
/* dual interface */ ICurveSymbol;
struct __declspec(uuid("402a94f8-f287-44be-9852-283b61ba1141"))
/* dual interface */ IRenderPolyline;
struct __declspec(uuid("76b9d240-3e22-4cdd-8df3-a88235f5aa2d"))
/* dual interface */ ISurfaceSymbol;
struct __declspec(uuid("20879432-ba26-4f04-984f-fffd82fe160c"))
/* dual interface */ IRenderPolygon;
struct __declspec(uuid("1a8a249f-70df-4165-bcb2-146b77cc588a"))
/* dual interface */ IRenderTriMesh;
struct __declspec(uuid("b0e7782a-ff51-4406-93fb-a4857bb87a6b"))
/* dual interface */ IRenderMultiTriMesh;
struct __declspec(uuid("58fd4415-ce35-4229-aa64-b5c804db9d23"))
/* dual interface */ IPointSymbol;
struct __declspec(uuid("20c91390-58f8-4b40-a393-de68812b45e6"))
/* dual interface */ IRenderMultiPoint;
struct __declspec(uuid("82301967-e47e-4f84-94f5-bcdd9f094bb9"))
/* dual interface */ ICameraTour;
struct __declspec(uuid("973d963d-16b3-49c0-9506-5bce4e4b40a2"))
/* dual interface */ IRenderPoint;
struct __declspec(uuid("62cbef52-6bde-498d-8f14-d9dfaa4067be"))
/* dual interface */ IMotionPath;
struct __declspec(uuid("61d7b480-85be-41d1-a4d7-4fc81fe76422"))
/* dual interface */ IParticleEffect;
struct __declspec(uuid("60044f43-ab72-4c89-af93-3504e043ccfd"))
/* dual interface */ ILabel;
struct __declspec(uuid("b6943399-a824-4303-9fe6-fe3a8caea812"))
/* dual interface */ ITextSymbol;
struct __declspec(uuid("04ed9c7e-f8a6-47ef-a363-a0832333ff7f"))
/* dual interface */ ITextAttribute;
struct __declspec(uuid("5a733f77-4ecb-4eb4-945d-d03f2f8c4843"))
/* dual interface */ ITableLabel;
struct __declspec(uuid("b85304e7-fba1-46cb-83f6-1423d743fe28"))
/* dual interface */ ISkinnedMesh;
struct __declspec(uuid("f5a91bc9-bf64-494f-9af1-831ffdcb7ecd"))
/* dual interface */ IRenderMultiPolyline;
struct __declspec(uuid("137a6c4b-8234-496f-ae2b-deb431d0a859"))
/* dual interface */ IRenderMultiPolygon;
struct __declspec(uuid("a4639595-afed-4bee-8833-288757ad7620"))
/* dual interface */ IProjectTree;
struct __declspec(uuid("ca6cb811-34ae-427a-b3a8-e463dd4d2c77"))
/* dual interface */ IImageryLayer;
struct __declspec(uuid("3fb878f8-1cfa-4b5b-b02b-24592480d31a"))
/* dual interface */ IRasterSymbol;
struct __declspec(uuid("061d4af5-7aa4-4c53-a78e-3c2c45af4a03"))
/* dual interface */ ITerrainHole;
struct __declspec(uuid("6094fcc3-7826-49e6-b842-3fe4472cf4a2"))
/* dual interface */ I3DTileHole;
struct __declspec(uuid("2b0b25fe-622f-4e36-8fbb-77ad2482b1a1"))
/* dual interface */ I3DTileLayer;
struct __declspec(uuid("8eabfadf-becc-431e-bfe0-9b2771d65383"))
/* dual interface */ IOverlayLabel;
struct __declspec(uuid("a9283339-0bc9-4fae-8b1a-87604741cb68"))
/* dual interface */ ITerrainVideo;
struct __declspec(uuid("ff77b913-3b1d-47f5-9ffe-1f4acf0c918b"))
/* dual interface */ IViewshed;
struct __declspec(uuid("0801bc9f-ee2d-4894-80c1-74f8ee6dbc50"))
/* dual interface */ IRenderArrow;
struct __declspec(uuid("398b390c-53e0-482c-b7f7-0ed75ed8934c"))
/* dual interface */ IDynamicObject;
struct __declspec(uuid("3459a93b-f618-47fc-96fa-a0fbf51f1a26"))
/* dual interface */ ITerrainModifier;
struct __declspec(uuid("c445ce10-b773-4c8f-93c3-ddd2224d1f22"))
/* dual interface */ IRenderPOI;
struct __declspec(uuid("3abd2631-5dd2-4dd9-a846-c47b03bf5363"))
/* dual interface */ IWalkGround;
struct __declspec(uuid("f54f74a1-13df-4f77-a237-edfa613b6d0c"))
/* dual interface */ IPosition;
struct __declspec(uuid("ab7f099f-7786-4eee-929a-e6f9d9779814"))
/* dual interface */ ITerrainRegularPolygon;
struct __declspec(uuid("d5c81bfa-a7fc-4521-9615-3097428cede4"))
/* dual interface */ IFillStyle;
struct __declspec(uuid("a56dd753-c828-4b5a-adda-e8f37cd39da9"))
/* dual interface */ IObjectTexture;
struct __declspec(uuid("e546e5e6-b5b6-491e-b7ed-5a445671a438"))
/* dual interface */ ILineStyle;
struct __declspec(uuid("3421f46a-e5d8-4a1c-b96e-e2e24308f9cf"))
/* dual interface */ ITerrain3DRegBase;
struct __declspec(uuid("7d808925-4271-4ce5-ad51-11bc5876255e"))
/* dual interface */ ITerrainArrow;
struct __declspec(uuid("4e65a284-7b30-47af-847b-9b070069f3a1"))
/* dual interface */ ITerrain3DArrow;
struct __declspec(uuid("bbe0254c-fab1-4f93-8a93-44c0a0e32160"))
/* dual interface */ ITerrainRectangle;
struct __declspec(uuid("25c009e1-1b7f-4785-a54b-3bcd076411f5"))
/* dual interface */ ITerrain3DRectBase;
struct __declspec(uuid("f3bfeebd-9f85-40ed-a42e-9a60bded6bf9"))
/* dual interface */ ITerrainEllipse;
struct __declspec(uuid("94fe777f-56b0-4d01-8f5c-caf4332219bf"))
/* dual interface */ ITerrainArc;
struct __declspec(uuid("ddf5c2d6-033e-4ba3-bba8-3611fe411382"))
/* dual interface */ ITerrainSphere;
struct __declspec(uuid("639aeaa9-012c-46cb-a005-7d0b18e9184a"))
/* dual interface */ ITerrainLocation;
struct __declspec(uuid("0bce95b3-fa78-43c7-976f-97f174f48732"))
/* dual interface */ ILabelStyle;
struct __declspec(uuid("df1b7ab3-4cd0-480a-9d75-cf2ffa40e7b1"))
/* dual interface */ ITerrainImageLabel;
struct __declspec(uuid("184ea148-5929-4247-8252-4d66aca669c0"))
/* dual interface */ IPresentation;
struct __declspec(uuid("b91c3dc1-de90-4cb7-9e01-7528194e30de"))
/* dual interface */ IPresentationSteps;
struct __declspec(uuid("0ebdbbb0-faf3-4dc8-b63a-33db679a2cba"))
/* dual interface */ IPresentationStep;
struct __declspec(uuid("bf86e07f-b91c-429b-970d-4e0ec5adfad1"))
/* dual interface */ IComplexParticleEffect;
struct __declspec(uuid("776a4017-62a9-4423-bdcb-33d7d93bda92"))
/* dual interface */ IKmlGroup;
struct __declspec(uuid("f9c2c491-ac98-49a9-a74e-7b5dabe7d870"))
/* dual interface */ IHeatMap;
struct __declspec(uuid("396ac826-06f0-4dd8-8989-1bdb354a7071"))
/* dual interface */ IClipPlaneOperation;
struct __declspec(uuid("60a922db-b266-4b89-a21d-944351b850e1"))
/* dual interface */ IOperation;
struct __declspec(uuid("36e556e5-5911-4007-9020-a3ff20bf1ba7"))
/* dual interface */ ICacheManager;
struct __declspec(uuid("faa9cc20-2be0-4758-a823-8225debd275c"))
/* dual interface */ IRenderRule;
struct __declspec(uuid("1375557c-4fa1-4d81-8539-83d8a79bc504"))
/* dual interface */ ITextRenderScheme;
struct __declspec(uuid("0b4ae2ae-415d-4d6a-b743-af576ae451ba"))
/* dual interface */ IGeometryRenderScheme;
struct __declspec(uuid("da8aec8e-d300-4003-8156-e20ee7cd80c2"))
/* dual interface */ IObjectEditor;
struct __declspec(uuid("a9b78073-b0de-4182-aa0c-1351d80de463"))
/* dual interface */ IViewport;
struct __declspec(uuid("b285ecec-17b1-4857-aaef-c4a835f5090a"))
/* dual interface */ IVisualAnalysis;
struct __declspec(uuid("d23aefa3-2600-40d9-8b75-c4760e15c619"))
/* dual interface */ IHighlightHelper;
struct __declspec(uuid("bd509912-45e6-4178-aab2-38d6d5537a51"))
/* dual interface */ ISunConfig;
struct __declspec(uuid("16499e36-8eff-422b-94b6-ac877f6cb6f7"))
/* dual interface */ IPointCloudSymbol;
struct __declspec(uuid("3ce54ddc-fbeb-45fa-88ec-51b418589258"))
/* dual interface */ IRenderPOIPickResult;
struct __declspec(uuid("b1e8e5a4-224c-4e6c-8975-243c13e20048"))
/* dual interface */ IUtility;
struct __declspec(uuid("f9e2bc5e-6750-4ad7-b009-4951ce9b0893"))
/* dual interface */ ITerrainVideoConfig;
struct __declspec(uuid("7b4880b2-c619-4eb1-987a-8b0a46bbb3b8"))
/* dual interface */ IProject;
struct __declspec(uuid("9cefc9d0-8d2f-48cf-8f29-734a6e1e4614"))
/* dual interface */ IHeatMapPlayer;
struct __declspec(uuid("1d7d71b2-6b70-47d6-b891-4a290c68544e"))
/* dual interface */ IUIWindow;
struct __declspec(uuid("2ab7a26d-d45c-4cc1-b2b5-76bc7295e0c3"))
/* dual interface */ IUIRect;
struct __declspec(uuid("62589dd9-b3ee-4b0c-96d5-fa70f3430b58"))
/* dual interface */ IUIImageButton;
struct __declspec(uuid("b60bcd84-37da-411e-93ce-84a44d081966"))
/* dual interface */ IUIWindowManager;
struct __declspec(uuid("094bf4d4-ac3d-4e31-a36d-fda09ca19a3a"))
/* dual interface */ IUIEventArgs;
struct __declspec(uuid("82aeb9ba-96f6-4dcf-9f67-82e29e0df371"))
/* dispinterface */ _IRenderControlEvents;
struct __declspec(uuid("a8493829-38bf-4bce-8d1a-45d96b38095e"))
/* dual interface */ IExportManager;
struct __declspec(uuid("b97a7ec9-bf13-45d8-8c76-9f7a41542aff"))
/* dual interface */ IRenderControl;
struct __declspec(uuid("41b4b543-232c-444d-8677-e1844d1c6ceb"))
/* dual interface */ IFeatureLayerPickResult;
struct __declspec(uuid("eb134a20-1321-4f0b-9ddf-c371a6c6fb1b"))
/* dual interface */ I3DTileLayerPickResult;
struct __declspec(uuid("c7997773-e33a-472b-9334-ab90b0952a3b"))
/* dual interface */ IReferencePlanePickResult;
struct __declspec(uuid("9d8fab54-4430-4e02-b81a-e8d33eb2d4d6"))
/* dual interface */ ITerrainPickResult;
struct __declspec(uuid("07395ef5-6533-4cc4-932b-551fb4ba552d"))
/* dual interface */ IRenderModelPointPickResult;
struct __declspec(uuid("4b7951fc-2464-41e9-a4dc-2f7a111be133"))
/* dual interface */ IRenderPolylinePickResult;
struct __declspec(uuid("5e56d641-42a9-42ab-971a-c2e4af20198c"))
/* dual interface */ IRenderPolygonPickResult;
struct __declspec(uuid("6acfad1e-1c58-45a3-aa9b-048b10138928"))
/* dual interface */ IRenderTriMeshPickResult;
struct __declspec(uuid("3e0bcecb-0922-4d2c-b092-756aa96a60de"))
/* dual interface */ IRenderMultiTriMeshPickResult;
struct __declspec(uuid("ed1312b7-1c0f-49a7-9856-c5d46dde1a57"))
/* dual interface */ IRenderMultiPointPickResult;
struct __declspec(uuid("abb28afc-b056-4675-87b9-9ee55354720d"))
/* dual interface */ IRenderMultiPolylinePickResult;
struct __declspec(uuid("9a9b2c07-a12f-4114-8003-6bcea95099a4"))
/* dual interface */ IRenderMultiPolygonPickResult;
struct __declspec(uuid("0806226b-2599-4cdb-bcca-42476780ddf9"))
/* dual interface */ IRenderPointPickResult;
struct __declspec(uuid("66c817c4-ec9b-4ad3-8cbc-54a18c590484"))
/* dual interface */ ILabelPickResult;
struct __declspec(uuid("c0bc55d7-d30c-43c9-ac4c-bcfc64fc9c28"))
/* dual interface */ ITableLabelPickResult;
struct __declspec(uuid("91c7e95c-ab4f-42bb-b742-9b69695c7e9a"))
/* dual interface */ IOverlayLabelPickResult;
struct __declspec(uuid("bc2c5186-f04e-488f-97b4-ba341773fef9"))
/* dual interface */ IParticleEffectPickResult;
struct __declspec(uuid("33efdbb7-e396-42b0-8974-4c9bad19d9ad"))
/* dual interface */ ISkinnedMeshPickResult;
struct __declspec(uuid("60d59fd6-f89b-4abd-a04c-31786ffa5d05"))
/* dual interface */ IValueMapTextRender;
struct __declspec(uuid("2aabf879-1d58-472e-a782-ecb61d307e2b"))
/* dual interface */ IToolTipTextRender;
struct __declspec(uuid("e10f9f83-849d-404a-9611-532953634f11"))
/* dual interface */ IValueMapGeometryRender;
struct __declspec(uuid("bc231a67-1b97-44ce-a93b-7343878d4f14"))
/* dual interface */ ISimpleTextRender;
struct __declspec(uuid("ec2abc22-3133-4419-96d1-e41cb15c7ddb"))
/* dual interface */ ISimpleGeometryRender;
struct __declspec(uuid("8dc69217-fb6f-4eac-a2cc-c66e417832a2"))
/* dual interface */ ISolidSymbol;
struct __declspec(uuid("180ea143-af76-4137-90dd-623ef2f97ef8"))
/* dual interface */ ISimplePointSymbol;
struct __declspec(uuid("e8eb7e98-7da9-4124-bba6-55dbd781b477"))
/* dual interface */ IImagePointSymbol;
struct __declspec(uuid("11c3ed45-4671-4e74-907d-488537eaf66b"))
/* dual interface */ IRangeRenderRule;
struct __declspec(uuid("2f0ecf14-822d-4423-80b0-f3fbf4dcd3b5"))
/* dual interface */ IUniqueValuesRenderRule;
struct __declspec(uuid("de5ad8bb-31c1-4045-a8e1-38539604b94f"))
/* interface */ IMotionable;
struct __declspec(uuid("fde4c59c-6c66-404f-8d81-548c86d8d296"))
/* dual interface */ ITerrainHolePickResult;
struct __declspec(uuid("69381f9d-e213-4547-8dcb-7196311f80cb"))
/* dual interface */ ITileHolePickResult;
struct __declspec(uuid("f0002efd-7dd3-4046-a9c6-1209cb588cb0"))
/* dual interface */ IRenderArrowPickResult;
struct __declspec(uuid("7986f8e3-8570-4726-ad32-0d7afa30d5a1"))
/* dual interface */ IWindowParam;
struct __declspec(uuid("4b1ca4eb-3488-48d9-baea-a6cdfe331afe"))
/* interface */ IHTMLWindow;
struct __declspec(uuid("e9c7b499-f8e9-4978-aef0-65f960043315"))
/* dual interface */ IPolygon3DSymbol;
struct __declspec(uuid("f3453782-b1f5-41c7-9dfa-2dd2b63e9c1c"))
/* dual interface */ ITerrainModifierPickResult;
struct __declspec(uuid("80e020ec-c884-41b2-bbd4-991becda1b76"))
/* dual interface */ ITerrainArrowPickResult;
struct __declspec(uuid("8e37c322-3450-4e63-807d-992fcc53161d"))
/* dual interface */ ITerrain3DArrowPickResult;
struct __declspec(uuid("b5f89670-2116-4589-89af-6b03489da821"))
/* dual interface */ ITerrainRegularPolygonPickResult;
struct __declspec(uuid("693f9472-595f-47dd-809b-75b1c027eafd"))
/* dual interface */ ITerrainCylinderPickResult;
struct __declspec(uuid("e01c38e6-9552-4380-a122-c94352cb3d1b"))
/* dual interface */ ITerrainConePickResult;
struct __declspec(uuid("725f9e08-9de7-4a5e-b844-a05f619dacb0"))
/* dual interface */ ITerrainRectanglePickResult;
struct __declspec(uuid("0712d6ec-82d7-4d7c-a23e-f2788891be04"))
/* dual interface */ ITerrainBoxPickResult;
struct __declspec(uuid("c012ba11-9e97-46e4-963d-6be80d78512c"))
/* dual interface */ ITerrainPyramidPickResult;
struct __declspec(uuid("3e22d6df-d210-4519-97c9-15aa1d1d8286"))
/* dual interface */ ITerrainEllipsePickResult;
struct __declspec(uuid("04828d2a-36d8-4714-a3a8-ab531733b521"))
/* dual interface */ ITerrainArcPickResult;
struct __declspec(uuid("976ce744-daf7-4610-bc60-dd72120b8046"))
/* dual interface */ ITerrainSpherePickResult;
struct __declspec(uuid("9e5e4991-e881-4e56-86bd-91259c1e6976"))
/* dual interface */ ITerrainImageLabelPickResult;
struct __declspec(uuid("54e30068-2ae5-4622-8152-01d5bdf64c07"))
/* dual interface */ IComplexParticleEffectPickResult;
struct __declspec(uuid("fc6f3282-cd4b-4fa6-878f-3f22187e1c60"))
/* dual interface */ IUIWindowEventArgs;
struct __declspec(uuid("38a69005-0d09-442f-af8c-1bf6650bd25f"))
/* dual interface */ IUIMouseEventArgs;
struct __declspec(uuid("b8e9dce1-35be-4b01-8dcc-40df1de2cce7"))
/* interface */ IInternalTool;
struct __declspec(uuid("afaeaf51-f4be-4cdc-8ad1-de792646c0b2"))
/* interface */ IInternalLicenseKey;
struct /* coclass */ RenderControl;
struct /* coclass */ ValueMapTextRender;
struct /* coclass */ ValueMapGeometryRender;
struct /* coclass */ TextSymbol;
struct /* coclass */ TextRenderScheme;
struct /* coclass */ RenderRule;
struct /* coclass */ RangeRenderRule;
struct /* coclass */ UniqueValuesRenderRule;
struct /* coclass */ GeometryRenderScheme;
struct /* coclass */ CurveSymbol;
struct /* coclass */ SurfaceSymbol;
struct /* coclass */ SolidSymbol;
struct /* coclass */ ModelPointSymbol;
struct /* coclass */ SimplePointSymbol;
struct /* coclass */ ImagePointSymbol;
struct /* coclass */ RenderGeometry;
struct /* coclass */ SimpleTextRender;
struct /* coclass */ SimpleGeometryRender;
struct /* coclass */ TextAttribute;
struct __declspec(uuid("e8135b91-787b-4468-9c4a-0bbf590c760c"))
/* dual interface */ IReferenceHelper;
struct /* coclass */ ReferenceHelper;
struct /* coclass */ RasterSymbol;
struct /* coclass */ WindowParam;
struct /* coclass */ Polygon3DSymbol;
struct /* coclass */ PointCloudSymbol;
struct /* coclass */ LineStyle;
struct /* coclass */ FillStyle;
struct /* coclass */ ObjectTexture;
struct /* coclass */ Position;
struct /* coclass */ LabelStyle;
struct /* coclass */ UIRect;
struct /* coclass */ ToolTipTextRender;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IRObject, __uuidof(IRObject));
_COM_SMARTPTR_TYPEDEF(IRenderable, __uuidof(IRenderable));
_COM_SMARTPTR_TYPEDEF(IRenderGeometry, __uuidof(IRenderGeometry));
_COM_SMARTPTR_TYPEDEF(IReferencePlane, __uuidof(IReferencePlane));
_COM_SMARTPTR_TYPEDEF(IFeatureManager, __uuidof(IFeatureManager));
_COM_SMARTPTR_TYPEDEF(IPickResult, __uuidof(IPickResult));
_COM_SMARTPTR_TYPEDEF(IPickResultCollection, __uuidof(IPickResultCollection));
_COM_SMARTPTR_TYPEDEF(ITransformHelper, __uuidof(ITransformHelper));
_COM_SMARTPTR_TYPEDEF(ICamera, __uuidof(ICamera));
_COM_SMARTPTR_TYPEDEF(ITerrain, __uuidof(ITerrain));
_COM_SMARTPTR_TYPEDEF(ISkyBox, __uuidof(ISkyBox));
_COM_SMARTPTR_TYPEDEF(ITextRender, __uuidof(ITextRender));
_COM_SMARTPTR_TYPEDEF(IGeometryRender, __uuidof(IGeometryRender));
_COM_SMARTPTR_TYPEDEF(IFeatureClassInfo, __uuidof(IFeatureClassInfo));
_COM_SMARTPTR_TYPEDEF(IFeatureLayer, __uuidof(IFeatureLayer));
_COM_SMARTPTR_TYPEDEF(ITerrainRoute, __uuidof(ITerrainRoute));
_COM_SMARTPTR_TYPEDEF(IGeometrySymbol, __uuidof(IGeometrySymbol));
_COM_SMARTPTR_TYPEDEF(IModelPointSymbol, __uuidof(IModelPointSymbol));
_COM_SMARTPTR_TYPEDEF(IRenderModelPoint, __uuidof(IRenderModelPoint));
_COM_SMARTPTR_TYPEDEF(ICurveSymbol, __uuidof(ICurveSymbol));
_COM_SMARTPTR_TYPEDEF(IRenderPolyline, __uuidof(IRenderPolyline));
_COM_SMARTPTR_TYPEDEF(ISurfaceSymbol, __uuidof(ISurfaceSymbol));
_COM_SMARTPTR_TYPEDEF(IRenderPolygon, __uuidof(IRenderPolygon));
_COM_SMARTPTR_TYPEDEF(IRenderTriMesh, __uuidof(IRenderTriMesh));
_COM_SMARTPTR_TYPEDEF(IRenderMultiTriMesh, __uuidof(IRenderMultiTriMesh));
_COM_SMARTPTR_TYPEDEF(IPointSymbol, __uuidof(IPointSymbol));
_COM_SMARTPTR_TYPEDEF(IRenderMultiPoint, __uuidof(IRenderMultiPoint));
_COM_SMARTPTR_TYPEDEF(ICameraTour, __uuidof(ICameraTour));
_COM_SMARTPTR_TYPEDEF(IRenderPoint, __uuidof(IRenderPoint));
_COM_SMARTPTR_TYPEDEF(IMotionPath, __uuidof(IMotionPath));
_COM_SMARTPTR_TYPEDEF(IParticleEffect, __uuidof(IParticleEffect));
_COM_SMARTPTR_TYPEDEF(ITextAttribute, __uuidof(ITextAttribute));
_COM_SMARTPTR_TYPEDEF(ITextSymbol, __uuidof(ITextSymbol));
_COM_SMARTPTR_TYPEDEF(ILabel, __uuidof(ILabel));
_COM_SMARTPTR_TYPEDEF(ITableLabel, __uuidof(ITableLabel));
_COM_SMARTPTR_TYPEDEF(ISkinnedMesh, __uuidof(ISkinnedMesh));
_COM_SMARTPTR_TYPEDEF(IRenderMultiPolyline, __uuidof(IRenderMultiPolyline));
_COM_SMARTPTR_TYPEDEF(IRenderMultiPolygon, __uuidof(IRenderMultiPolygon));
_COM_SMARTPTR_TYPEDEF(IProjectTree, __uuidof(IProjectTree));
_COM_SMARTPTR_TYPEDEF(IRasterSymbol, __uuidof(IRasterSymbol));
_COM_SMARTPTR_TYPEDEF(IImageryLayer, __uuidof(IImageryLayer));
_COM_SMARTPTR_TYPEDEF(ITerrainHole, __uuidof(ITerrainHole));
_COM_SMARTPTR_TYPEDEF(I3DTileHole, __uuidof(I3DTileHole));
_COM_SMARTPTR_TYPEDEF(I3DTileLayer, __uuidof(I3DTileLayer));
_COM_SMARTPTR_TYPEDEF(IOverlayLabel, __uuidof(IOverlayLabel));
_COM_SMARTPTR_TYPEDEF(ITerrainVideo, __uuidof(ITerrainVideo));
_COM_SMARTPTR_TYPEDEF(IViewshed, __uuidof(IViewshed));
_COM_SMARTPTR_TYPEDEF(IRenderArrow, __uuidof(IRenderArrow));
_COM_SMARTPTR_TYPEDEF(IDynamicObject, __uuidof(IDynamicObject));
_COM_SMARTPTR_TYPEDEF(ITerrainModifier, __uuidof(ITerrainModifier));
_COM_SMARTPTR_TYPEDEF(IRenderPOI, __uuidof(IRenderPOI));
_COM_SMARTPTR_TYPEDEF(IWalkGround, __uuidof(IWalkGround));
_COM_SMARTPTR_TYPEDEF(IPosition, __uuidof(IPosition));
_COM_SMARTPTR_TYPEDEF(IObjectTexture, __uuidof(IObjectTexture));
_COM_SMARTPTR_TYPEDEF(IFillStyle, __uuidof(IFillStyle));
_COM_SMARTPTR_TYPEDEF(ILineStyle, __uuidof(ILineStyle));
_COM_SMARTPTR_TYPEDEF(ITerrainRegularPolygon, __uuidof(ITerrainRegularPolygon));
_COM_SMARTPTR_TYPEDEF(ITerrain3DRegBase, __uuidof(ITerrain3DRegBase));
_COM_SMARTPTR_TYPEDEF(ITerrainArrow, __uuidof(ITerrainArrow));
_COM_SMARTPTR_TYPEDEF(ITerrain3DArrow, __uuidof(ITerrain3DArrow));
_COM_SMARTPTR_TYPEDEF(ITerrainRectangle, __uuidof(ITerrainRectangle));
_COM_SMARTPTR_TYPEDEF(ITerrain3DRectBase, __uuidof(ITerrain3DRectBase));
_COM_SMARTPTR_TYPEDEF(ITerrainEllipse, __uuidof(ITerrainEllipse));
_COM_SMARTPTR_TYPEDEF(ITerrainArc, __uuidof(ITerrainArc));
_COM_SMARTPTR_TYPEDEF(ITerrainSphere, __uuidof(ITerrainSphere));
_COM_SMARTPTR_TYPEDEF(ITerrainLocation, __uuidof(ITerrainLocation));
_COM_SMARTPTR_TYPEDEF(ILabelStyle, __uuidof(ILabelStyle));
_COM_SMARTPTR_TYPEDEF(ITerrainImageLabel, __uuidof(ITerrainImageLabel));
_COM_SMARTPTR_TYPEDEF(IPresentationStep, __uuidof(IPresentationStep));
_COM_SMARTPTR_TYPEDEF(IPresentationSteps, __uuidof(IPresentationSteps));
_COM_SMARTPTR_TYPEDEF(IPresentation, __uuidof(IPresentation));
_COM_SMARTPTR_TYPEDEF(IComplexParticleEffect, __uuidof(IComplexParticleEffect));
_COM_SMARTPTR_TYPEDEF(IKmlGroup, __uuidof(IKmlGroup));
_COM_SMARTPTR_TYPEDEF(IHeatMap, __uuidof(IHeatMap));
_COM_SMARTPTR_TYPEDEF(IOperation, __uuidof(IOperation));
_COM_SMARTPTR_TYPEDEF(IClipPlaneOperation, __uuidof(IClipPlaneOperation));
_COM_SMARTPTR_TYPEDEF(IObjectManager, __uuidof(IObjectManager));
_COM_SMARTPTR_TYPEDEF(ICacheManager, __uuidof(ICacheManager));
_COM_SMARTPTR_TYPEDEF(IRenderRule, __uuidof(IRenderRule));
_COM_SMARTPTR_TYPEDEF(ITextRenderScheme, __uuidof(ITextRenderScheme));
_COM_SMARTPTR_TYPEDEF(IGeometryRenderScheme, __uuidof(IGeometryRenderScheme));
_COM_SMARTPTR_TYPEDEF(IObjectEditor, __uuidof(IObjectEditor));
_COM_SMARTPTR_TYPEDEF(IViewport, __uuidof(IViewport));
_COM_SMARTPTR_TYPEDEF(IVisualAnalysis, __uuidof(IVisualAnalysis));
_COM_SMARTPTR_TYPEDEF(IHighlightHelper, __uuidof(IHighlightHelper));
_COM_SMARTPTR_TYPEDEF(ISunConfig, __uuidof(ISunConfig));
_COM_SMARTPTR_TYPEDEF(IPointCloudSymbol, __uuidof(IPointCloudSymbol));
_COM_SMARTPTR_TYPEDEF(IRenderPOIPickResult, __uuidof(IRenderPOIPickResult));
_COM_SMARTPTR_TYPEDEF(IUtility, __uuidof(IUtility));
_COM_SMARTPTR_TYPEDEF(ITerrainVideoConfig, __uuidof(ITerrainVideoConfig));
_COM_SMARTPTR_TYPEDEF(IProject, __uuidof(IProject));
_COM_SMARTPTR_TYPEDEF(IHeatMapPlayer, __uuidof(IHeatMapPlayer));
_COM_SMARTPTR_TYPEDEF(IUIRect, __uuidof(IUIRect));
_COM_SMARTPTR_TYPEDEF(IUIWindow, __uuidof(IUIWindow));
_COM_SMARTPTR_TYPEDEF(IUIImageButton, __uuidof(IUIImageButton));
_COM_SMARTPTR_TYPEDEF(IUIWindowManager, __uuidof(IUIWindowManager));
_COM_SMARTPTR_TYPEDEF(IUIEventArgs, __uuidof(IUIEventArgs));
_COM_SMARTPTR_TYPEDEF(_IRenderControlEvents, __uuidof(_IRenderControlEvents));
_COM_SMARTPTR_TYPEDEF(IExportManager, __uuidof(IExportManager));
_COM_SMARTPTR_TYPEDEF(IRenderControl, __uuidof(IRenderControl));
_COM_SMARTPTR_TYPEDEF(IFeatureLayerPickResult, __uuidof(IFeatureLayerPickResult));
_COM_SMARTPTR_TYPEDEF(I3DTileLayerPickResult, __uuidof(I3DTileLayerPickResult));
_COM_SMARTPTR_TYPEDEF(IReferencePlanePickResult, __uuidof(IReferencePlanePickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainPickResult, __uuidof(ITerrainPickResult));
_COM_SMARTPTR_TYPEDEF(IRenderModelPointPickResult, __uuidof(IRenderModelPointPickResult));
_COM_SMARTPTR_TYPEDEF(IRenderPolylinePickResult, __uuidof(IRenderPolylinePickResult));
_COM_SMARTPTR_TYPEDEF(IRenderPolygonPickResult, __uuidof(IRenderPolygonPickResult));
_COM_SMARTPTR_TYPEDEF(IRenderTriMeshPickResult, __uuidof(IRenderTriMeshPickResult));
_COM_SMARTPTR_TYPEDEF(IRenderMultiTriMeshPickResult, __uuidof(IRenderMultiTriMeshPickResult));
_COM_SMARTPTR_TYPEDEF(IRenderMultiPointPickResult, __uuidof(IRenderMultiPointPickResult));
_COM_SMARTPTR_TYPEDEF(IRenderMultiPolylinePickResult, __uuidof(IRenderMultiPolylinePickResult));
_COM_SMARTPTR_TYPEDEF(IRenderMultiPolygonPickResult, __uuidof(IRenderMultiPolygonPickResult));
_COM_SMARTPTR_TYPEDEF(IRenderPointPickResult, __uuidof(IRenderPointPickResult));
_COM_SMARTPTR_TYPEDEF(ILabelPickResult, __uuidof(ILabelPickResult));
_COM_SMARTPTR_TYPEDEF(ITableLabelPickResult, __uuidof(ITableLabelPickResult));
_COM_SMARTPTR_TYPEDEF(IOverlayLabelPickResult, __uuidof(IOverlayLabelPickResult));
_COM_SMARTPTR_TYPEDEF(IParticleEffectPickResult, __uuidof(IParticleEffectPickResult));
_COM_SMARTPTR_TYPEDEF(ISkinnedMeshPickResult, __uuidof(ISkinnedMeshPickResult));
_COM_SMARTPTR_TYPEDEF(IValueMapTextRender, __uuidof(IValueMapTextRender));
_COM_SMARTPTR_TYPEDEF(IToolTipTextRender, __uuidof(IToolTipTextRender));
_COM_SMARTPTR_TYPEDEF(IValueMapGeometryRender, __uuidof(IValueMapGeometryRender));
_COM_SMARTPTR_TYPEDEF(ISimpleTextRender, __uuidof(ISimpleTextRender));
_COM_SMARTPTR_TYPEDEF(ISimpleGeometryRender, __uuidof(ISimpleGeometryRender));
_COM_SMARTPTR_TYPEDEF(ISolidSymbol, __uuidof(ISolidSymbol));
_COM_SMARTPTR_TYPEDEF(ISimplePointSymbol, __uuidof(ISimplePointSymbol));
_COM_SMARTPTR_TYPEDEF(IImagePointSymbol, __uuidof(IImagePointSymbol));
_COM_SMARTPTR_TYPEDEF(IRangeRenderRule, __uuidof(IRangeRenderRule));
_COM_SMARTPTR_TYPEDEF(IUniqueValuesRenderRule, __uuidof(IUniqueValuesRenderRule));
_COM_SMARTPTR_TYPEDEF(IMotionable, __uuidof(IMotionable));
_COM_SMARTPTR_TYPEDEF(ITerrainHolePickResult, __uuidof(ITerrainHolePickResult));
_COM_SMARTPTR_TYPEDEF(ITileHolePickResult, __uuidof(ITileHolePickResult));
_COM_SMARTPTR_TYPEDEF(IRenderArrowPickResult, __uuidof(IRenderArrowPickResult));
_COM_SMARTPTR_TYPEDEF(IWindowParam, __uuidof(IWindowParam));
_COM_SMARTPTR_TYPEDEF(IHTMLWindow, __uuidof(IHTMLWindow));
_COM_SMARTPTR_TYPEDEF(IPolygon3DSymbol, __uuidof(IPolygon3DSymbol));
_COM_SMARTPTR_TYPEDEF(ITerrainModifierPickResult, __uuidof(ITerrainModifierPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainArrowPickResult, __uuidof(ITerrainArrowPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrain3DArrowPickResult, __uuidof(ITerrain3DArrowPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainRegularPolygonPickResult, __uuidof(ITerrainRegularPolygonPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainCylinderPickResult, __uuidof(ITerrainCylinderPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainConePickResult, __uuidof(ITerrainConePickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainRectanglePickResult, __uuidof(ITerrainRectanglePickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainBoxPickResult, __uuidof(ITerrainBoxPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainPyramidPickResult, __uuidof(ITerrainPyramidPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainEllipsePickResult, __uuidof(ITerrainEllipsePickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainArcPickResult, __uuidof(ITerrainArcPickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainSpherePickResult, __uuidof(ITerrainSpherePickResult));
_COM_SMARTPTR_TYPEDEF(ITerrainImageLabelPickResult, __uuidof(ITerrainImageLabelPickResult));
_COM_SMARTPTR_TYPEDEF(IComplexParticleEffectPickResult, __uuidof(IComplexParticleEffectPickResult));
_COM_SMARTPTR_TYPEDEF(IUIWindowEventArgs, __uuidof(IUIWindowEventArgs));
_COM_SMARTPTR_TYPEDEF(IUIMouseEventArgs, __uuidof(IUIMouseEventArgs));
_COM_SMARTPTR_TYPEDEF(IInternalTool, __uuidof(IInternalTool));
_COM_SMARTPTR_TYPEDEF(IInternalLicenseKey, __uuidof(IInternalLicenseKey));
_COM_SMARTPTR_TYPEDEF(IReferenceHelper, __uuidof(IReferenceHelper));

//
// Type library items
//
    const int _GRC_OK = 0;
    const int _GRC_FAILED = -1;
    const int _GRC_NOT_IMPLEMENTED = -2;
    const int _GRC_INVALID_PARAMETER = -3;
    const int _GRC_INVALID_POINTER = -4;
    const int _GRC_VALUE_LENGTH_ZERO = -5;
    const int _GRC_NOT_EXIST = -6;
    const int _GRC_NOT_ENOUGH_MEMORY = -7;
    const int _GRC_INVALID_CRS = -8;
    const int _GRC_INVALID_INTERECT_MODE = -9;
    const int _GRC_NOT_SUPPORT = -1000;
    const int _GRC_CONNECTION_OPEN_FAILED_UNKNOWN = -2001;
    const int _GRC_CONNECTION_OPEN_FAILED_TIMEOUT = -2002;
    const int _GRC_UNSUPPORT_VERSION = -2101;
    const int _GRC_MODELCLASS_NOT_EXIST = -2102;
    const int _GRC_IMAGECLASS_NOT_EXIST = -2103;
    const int _GRC_FEATURECLASS_NOT_EXIST = -2104;
    const int _GRC_FEATUREDATASET_NOT_EXIST = -2105;
    const int _GRC_FEATURELAYER_NOT_EXIST = -2201;
    const int _GRC_FEATURE_IS_DELETED = -2301;
    const int _GRC_FIELDINFO_NO_FIELDINFO = -2400;
    const int _GRC_FIELDINFO_NO_FEATURE_ID = -2401;
    const int _GRC_FIELDINFO_IS_NOT_EXISTED = -2402;
    const int _GRC_FIELDINFO_LACK_REGISTERED_RENDERINDEX = -2403;
    const int _GRC_FIELDVALUE_IS_NULL = -2404;
    const int _GRC_FIELDVALUE_TYPE_NOT_MATCH = -2405;
    const int _GRC_FIELDVALUE_NOT_DEFAULT = -2406;
    const int _GRC_FIELDVALUE_NO_EDITABLE = -2407;
    const int _GRC_FIELDVALUE_NOT_REGISTERED_RENDERINDEX = -2408;
    const int _GRC_FIELDVALUE_LOGICGROUP_NOT_INT32 = -2409;
    const int _GRC_FIELDINFO_LACK_REGISTERED = -2410;
    const int _GRC_GEOMETRY_INVALID_GEOMETRY = -3001;
    const int _GRC_GEOMETRY_TYPE_NOT_SUPPORT = -3002;
    const int _GRC_INVALID_RENDER = -4001;
    const int _GRC_INVALID_Symbol = -4002;
    const int _GRC_INDEX_OUT_OF_RANGE = -5000;
    const int _GRC_INVALID_INTERACT_MODE = -5001;
    const int _GRC_EXPORTING_VIDEO = -5002;
    const int _GRC_IMPORT_WAYPOINTS_ERROR = -5003;
    const int _GRC_TERRAIN_CONNECTINFO_FORMAT_ERROR = -6000;
    const int _GRC_TERRAIN_IO_EXCEPTION = -6001;
    const int _GRC_TERRAIN_READINFORMATION_ERROR = -6002;
    const int _GRC_TERRAIN_PASSWORD_MISMATCH = -6003;
    const int _GRC_TERRAIN_LAYER_NOT_EXIST = -6004;
    const int _GRC_TERRAIN_FB_UNKNOWN_ERROR = -6005;
    const int _GRC_TERRAIN_FILE_FORMAT_ERROR = -6006;
    const int _GRC_TERRAIN_TYPE_MISMATCH = -6007;
    const int _GRC_TERRAIN_INVALID_CRS = -6008;
    const int _GRC_GETALTITUDE_OUT_OF_TERRAIN_RANGE = -6009;
    const int _GRC_TILEDFEATURELAYER_NOT_EXIST = -6100;
    const int _GRC_TILEDFEATURELAYER_IO_EXCEPTION = -6101;
    const int _GRC_TILEDFEATURELAYER_PASSWORD_MISMATCH = -6102;
    const int _GRC_TILEDFEATURELAYER_FB_UNKNOWN_ERROR = -6103;
    const int _GRC_TILEDFEATURELAYER_FILE_FORMAT_ERROR = -6104;
    const int _GRC_TILEDFEATURELAYER_LOCAL_DATA_NOT_SUPPORT = -6105;
    const int _GRC_TILEDFEATURELAYER_SERVICE_READ_INFORMATION_ERROR = -6106;
    const int _GRC_TILEDFEATURELAYER_INVALID_CRS = -6107;
    const int _GRC_TILEDFEATURELAYER_ALREADY_REGISTERED = -6108;
    const int _GRC_TERRAIN_GVFILE_IS_NO_PRIVILEGE = -6010;
    const int _GRC_TERRAIN_GVFILE_IS_CORRUPT = -6011;
    const int _GRC_WORLD_POSITION_NOT_INITIALIZED = -7000;
    const int _GRC_ACCESS_FILE_ERROR = -8000;
    const int _GRC_FILE_EXTENTION_ERROR = -8001;
    const int _GRC_OBJECT_NOT_FOUND = -8002;

enum gviRenderSystem
{
    gviRenderD3D = 0,
    gviRenderOpenGL = 1
};

enum gviObjectType
{
    gviObjectNone = 0,
    gviObjectReferencePlane = 2,
    gviObjectFeatureLayer = 256,
    gviObjectTerrain = 257,
    gviObjectRenderModelPoint = 258,
    gviObjectTerrainRoute = 260,
    gviObjectRenderPolyline = 261,
    gviObjectRenderPolygon = 262,
    gviObjectRenderTriMesh = 263,
    gviObjectRenderMultiPoint = 264,
    gviObjectRenderPoint = 265,
    gviObjectCameraTour = 266,
    gviObjectMotionPath = 267,
    gviObjectSkyBox = 271,
    gviObjectParticleEffect = 272,
    gviObjectLabel = 273,
    gviObjectTableLabel = 274,
    gviObjectSkinnedMesh = 275,
    gviObjectRenderArrow = 276,
    gviObjectRenderMultiPolyline = 277,
    gviObjectRenderMultiPolygon = 278,
    gviObjectImageryLayer = 279,
    gviObjectRenderMultiTriMesh = 280,
    gviObjectTerrainHole = 281,
    gviObject3DTileLayer = 282,
    gviObjectTerrainVideo = 283,
    gviObjectOverlayLabel = 284,
    gviObjectDynamicObject = 286,
    gviObjectTerrainModifier = 287,
    gviObjectRenderPointCloud = 288,
    gviObjectRenderPOI = 289,
    gviObjectWalkGround = 290,
    gviObject3DTileHole = 291,
    gviObjectTerrainRegularPolygon = 293,
    gviObjectTerrainCylinder = 294,
    gviObjectTerrainCone = 295,
    gviObjectTerrainArrow = 296,
    gviObjectTerrain3DArrow = 297,
    gviObjectTerrainLocation = 298,
    gviObjectTerrainRectangle = 299,
    gviObjectTerrainBox = 300,
    gviObjectTerrainPyramid = 301,
    gviObjectTerrainEllipse = 302,
    gviObjectTerrainArc = 303,
    gviObjectTerrainSphere = 304,
    gviObjectPresentation = 305,
    gviObjectTerrainImageLabel = 306,
    gviObjectComplexParticleEffect = 307,
    gviObjectViewshed = 308,
    gviObjectHeatMap = 309,
    gviObjectClipPlaneOperation = 310
};

enum gviMeasurementMode
{
    gviMeasureAerialDistance = 0,
    gviMeasureHorizontalDistance = 1,
    gviMeasureVerticalDistance = 2,
    gviMeasureCoordinate = 3,
    gviMeasureGroundDistance = 4,
    gviMeasureArea = 5,
    gviMeasureGroundArea = 6,
    gviMeasureGroupSightLine = 7
};

enum gviClipMode
{
    gviClipCustomePlane = 0,
    gviClipBox = 1
};

enum gviClipPlaneOperation
{
    gviSingleClipOperation = 0,
    gviBoxClipOperation = 1
};

enum gviInteractMode
{
    gviInteractNormal = 1,
    gviInteractSelect = 2,
    gviInteractMeasurement = 3,
    gviInteractEdit = 4,
    gviInteractWalk = 5,
    gviInteractDisable = 6,
    gviInteract2DMap = 7,
    gviInteractSlide = 10,
    gviInteractClipPlane = 11
};

enum gviEditorType
{
    gviEditorNone = 0,
    gviEditorMove = 1,
    gviEditorRotate = 2,
    gviEditorScale = 3,
    gviEditorZRotate = 4,
    gviEditorZScale = 5,
    gviEditorZMove = 6,
    gviEditorXYMove = 7,
    gviEditorBoxScale = 8
};

enum gviMouseSelectObjectMask
{
    gviSelectNone = 0,
    gviSelectFeatureLayer = 1,
    gviSelectTerrain = 2,
    gviSelectReferencePlane = 8,
    gviSelectTerrainHole = 16,
    gviSelectTileLayer = 32,
    gviSelectLable = 64,
    gviSelectParticleEffect = 128,
    gviSelectRenderGeometry = 256,
    gviSelectSkinnedMesh = 512,
    gviSelectTileHole = 1024,
    gviSelectOverlayLabel = 2048,
    gviSelectTerrainObject = 4096,
    gviSelectAll = 65535
};

enum gviMouseSelectMode
{
    gviMouseSelectClick = 1,
    gviMouseSelectDrag = 2,
    gviMouseSelectMove = 4,
    gviMouseSelectHover = 8
};

enum gviSetCameraFlags
{
    gviSetCameraNoFlags = 0,
    gviSetCameraIgnoreX = 1,
    gviSetCameraIgnoreY = 2,
    gviSetCameraIgnoreZ = 4,
    gviSetCameraIgnorePosition = 7,
    gviSetCameraIgnoreYaw = 8,
    gviSetCameraIgnorePitch = 16,
    gviSetCameraIgnoreRoll = 32,
    gviSetCameraIgnoreOrientation = 56
};

enum gviGetElevationType
{
    gviGetElevationFromDatabase = 0,
    gviGetElevationFromMemory = 1
};

enum gviPivotAlignment
{
    gviPivotAlignBottomLeft = 0,
    gviPivotAlignBottomCenter = 1,
    gviPivotAlignBottomRight = 2,
    gviPivotAlignCenterLeft = 3,
    gviPivotAlignCenterCenter = 4,
    gviPivotAlignCenterRight = 5,
    gviPivotAlignTopLeft = 6,
    gviPivotAlignTopCenter = 7,
    gviPivotAlignTopRight = 8
};

enum gviDashStyle
{
    gviDashSolid = -1,
    gviDashXLarge = -1044481,
    gviDashLarge = -16776961,
    gviDashMedium = -267390961,
    gviDashSmall = -1010580541,
    gviDashTiny = -1717986919,
    gviDashDots = -1431655766,
    gviDashDot = -16678657,
    gviDashDotDot = -15978241
};

enum gviMultilineJustification
{
    gviMultilineLeft = 0,
    gviMultilineCenter = 1,
    gviMultilineRight = 2
};

enum gviCameraTourMode
{
    gviCameraTourLinear = 0,
    gviCameraTourSmooth = 1,
    gviCameraTourBounce = 2
};

enum gviSimplePointStyle
{
    gviSimplePointCircle = 0,
    gviSimplePointSquare = 1,
    gviSimplePointCross = 2,
    gviSimplePointX = 3,
    gviSimplePointDiamond = 4
};

enum gviViewportMode
{
    gviViewportSinglePerspective = 1,
    gviViewportStereoAnaglyph = 2,
    gviViewportStereoQuadbuffer = 3,
    gviViewportL1R1 = 4,
    gviViewportT1B1 = 6,
    gviViewportL1M1R1 = 7,
    gviViewportT1M1B1 = 8,
    gviViewportL2R1 = 9,
    gviViewportL1R2 = 10,
    gviViewportQuad = 11,
    gviViewportPIP = 12,
    gviViewportQuadH = 13,
    gviViewportStereoDualView = 14,
    gviViewportL1R1SingleFrustum = 15,
    gviViewportT1B1SingleFrustum = 16,
    gviViewportStereoDualOculus = 17
};

enum gviSkyboxImageIndex
{
    gviSkyboxImageFront = 0,
    gviSkyboxImageBack = 1,
    gviSkyboxImageLeft = 2,
    gviSkyboxImageRight = 3,
    gviSkyboxImageTop = 4,
    gviSkyboxImageBottom = 5
};

enum gviGeoEditType
{
    gviGeoEditCreator = 0,
    gviGeoEdit3DMove = 1,
    gviGeoEdit3DRotate = 2,
    gviGeoEdit3DScale = 3,
    gviGeoEdit2DMove = 4,
    gviGeoEditZRotate = 5,
    gviGeoEditZScale = 6,
    gviGeoEditVertex = 7,
    gviGeoEditBoxScale = 8
};

enum gviParticleBillboardType
{
    gviParticleBillboardOrientedCamera = 0,
    gviParticleBillboardOrientedMoveDirection = 1
};

enum gviEmitterType
{
    gviEmitterNone = 0,
    gviEmitterPoint = 1,
    gviEmitterBox = 2,
    gviEmitterCircle = 3
};

enum gviWeatherType
{
    gviWeatherSunShine = 0,
    gviWeatherLightRain = 1,
    gviWeatherModerateRain = 2,
    gviWeatherHeavyRain = 3,
    gviWeatherLightSnow = 4,
    gviWeatherModerateSnow = 5,
    gviWeatherHeavySnow = 6
};

enum gviModKeyMask
{
    gviModKeyCtrl = 12,
    gviModKeyShift = 3,
    gviModKeyDblClk = 16384
};

enum gviViewportMask
{
    gviViewNone = 0,
    gviView0 = 1,
    gviView1 = 2,
    gviView2 = 4,
    gviView3 = 8,
    gviViewAllNormalView = 15,
    gviViewPIP = 16
};

enum gviRenderRuleType
{
    gviRenderRuleRange = 0,
    gviRenderRuleUniqueValues = 1
};

enum gviHeightStyle
{
    gviHeightOnTerrain = 0,
    gviHeightAbsolute = 1,
    gviHeightRelative = 2,
    gviHeightOnEverything = 3
};

enum gviFogMode
{
    gviFogNone = 0,
    gviFogExp = 1,
    gviFogExp2 = 2,
    gviFogLinear = 3
};

enum gviRenderType
{
    gviRenderSimple = 0,
    gviRenderValueMap = 1,
    gviRenderToolTip = 2
};

enum gviRasterSourceType
{
    gviRasterUnknown = 0,
    gviRasterSourceFile = 1,
    gviRasterSourceGeoRaster = 2,
    gviRasterSourceWMS = 3,
    gviRasterSourceWMTS = 4,
    gviRasterSourceMapServer = 5
};

enum gviGeometrySymbolType
{
    gviGeoSymbolPoint = 0,
    gviGeoSymbolImagePoint = 1,
    gviGeoSymbolModelPoint = 2,
    gviGeoSymbolCurve = 3,
    gviGeoSymbolSurface = 4,
    gviGeoSymbol3DPolygon = 5,
    gviGeoSymbolSolid = 6,
    gviGeoSymbolPointCloud = 7
};

enum gviFlyMode
{
    gviFlyArc = 0,
    gviFlyLinear = 1
};

enum gviActionCode
{
    gviActionFlyTo = 0,
    gviActionJump = 1,
    gviActionFollowBehind = 2,
    gviActionFollowAbove = 3,
    gviActionFollowBelow = 4,
    gviActionFollowLeft = 5,
    gviActionFollowRight = 6,
    gviActionFollowBehindAndAbove = 7,
    gviActionFollowCockpit = 8
};

enum gviHTMLWindowPosition
{
    gviWinPosUserDefined = 0,
    gviWinPosCenterParent = 1,
    gviWinPosCenterDesktop = 2,
    gviWinPosMousePosition = 3,
    gviWinPosParentSize = 4,
    gviWinPosParentRightTop = 5
};

enum gviSunCalculateMode
{
    gviSunModeFollowCamera = 1,
    gviSunModeAccordingToGMT = 2,
    gviSunModeUserDefined = 3
};

enum gviMouseSnapMode
{
    gviMouseSnapDisable = 0,
    gviMouseSnapVertex = 1
};

enum gviArrowType
{
    gviArrowSingle = 0,
    gviArrowDual = 1
};

enum gviCollisionDetectionMode
{
    gviCollisionDisable = 0,
    gviCollisionOnlyKeyboard = 1,
    gviCollisionEnable = 3
};

enum gviAttributeMask
{
    gviAttributeHighlight = 1,
    gviAttributeCollision = 2,
    gviAttributeClipPlane = 4
};

enum gviRenderControlParameters
{
    gviRenderParamMeasurementLengthUnit = 0,
    gviRenderParamMeasurementAreaUnit = 1,
    gviRenderParamLanguage = 2,
    gviRenderParamLight0Ambient = 3,
    gviRenderParamLight0Diffuse = 4,
    gviRenderParamLightModelAmbient = 5,
    gviRenderParamStereoFusionDistance = 6,
    gviRenderParamStereoEyeSeparation = 7,
    gviRenderParamStereoScreenDistance = 8,
    gviRenderParam3DWindowHeight = 9,
    gviRenderParam3DWindowWidth = 10,
    gviRenderParamOcclusionQuery = 11,
    gviRenderParamOutlineColor = 12,
    gviRenderParamAlphaTestValue = 13,
    gviRenderParamClipPlaneLineColor = 14
};

enum gviManipulatorMode
{
    gviCityMakerManipulator = 0,
    gviGoogleEarthManipulator = 1
};

enum gviLengthUnit
{
    gviLengthUnitMeter = 0,
    gviLengthUnitKilometer = 1,
    gviLengthUnitFoot = 2,
    gviLengthUnitMile = 3,
    gviLengthUnitSeaMile = 4
};

enum gviAreaUnit
{
    gviAreaUnitSquareMeter = 0,
    gviAreaUnitSquareKilometer = 1,
    gviAreaUnitHectare = 2,
    gviAreaUnitMu = 3,
    gviAreaUnitQing = 4,
    gviAreaUnitAcre = 5,
    gviAreaUnitSquareMile = 6
};

enum gviLockMode
{
    gviLockDecal = 0,
    gviLockAxis = 1,
    gviLockAxisTextUp = 2,
    gviAxisAutoPitch = 3,
    gviAxisAutoPitchTextup = 4
};

enum gviDynamicMotionStyle
{
    gviDynamicMotionGroundVehicle = 0,
    gviDynamicMotionAirplane = 1,
    gviDynamicMotionHelicopter = 2,
    gviDynamicMotionHover = 3
};

enum gviElevationBehaviorMode
{
    gviElevationBehaviorReplace = 0,
    gviElevationBehaviorBelow = 1,
    gviElevationBehaviorAbove = 2
};

enum gviDepthTestMode
{
    gviDepthTestEnable = 0,
    gviDepthTestDisable = 1,
    gviDepthTestAdvance = 2,
    gviDepthTestGreaterEqual = 3,
    gviDepthTestGreater = 4,
    gviDepthTestLessEqual = 5,
    gviDepthTestEqual = 6,
    gviDepthTestNotEqual = 7,
    gviDepthTestAlways = 8,
    gviDepthTestAdvanceSecondDrawMaxDepth = 1000
};

enum gviWalkMode
{
    gviWalkDisable = 0,
    gviWalkOnWalkGround = 1,
    gviWalkOnAll = -1
};

enum gviTerrainActionCode
{
    gviFlyToTerrain = 0,
    gviJumpToTerrain = 1
};

enum gviAltitudeType
{
    gviAltitudeTerrainRelative = 0,
    gviAltitudePivotRelative = 1,
    gviAltitudeOnTerrain = 2,
    gviAltitudeTerrainAbsolute = 3
};

enum gviLineToGroundType
{
    gviLineTypeNone = 0,
    gviLineTypeToGround = 1,
    gviLineTypeCustom = 2
};

enum gviShowTextOptions
{
    gviShowTextAlways = 0,
    gviShowTextOnHover = 1
};

enum gviPresentationPlayMode
{
    gviPresentationPlayAutomatic = 0,
    gviPresentationPlayManual = 1
};

enum gviPresentationPlaySpeed
{
    gviPresentationPlayVerySlow = 0,
    gviPresentationPlaySlow = 1,
    gviPresentationPlayNormal = 2,
    gviPresentationPlayFast = 3,
    gviPresentationPlayVeryFast = 4
};

enum gviPresentationStatus
{
    gviPresentationPlaying = 0,
    gviPresentationNotPlaying = 1,
    gviPresentationPaused = 2,
    gviPresentationWaitingTime = 3,
    gviPresentationWaitingClick = 4,
    gviPresentationBeforeSwitchingToAnotherPresentation = 5,
    gviPresentationAfterSwitchingFromAnotherPresentation = 6
};

enum gviPresentationStepContinue
{
    gviPresentationStepContinueMouseClick = 0,
    gviPresentationStepContinueWait = 1
};

enum gviPresentationStepFlightSpeed
{
    gviPresentationStepFlightVerySlow = 0,
    gviPresentationStepFlightSlow = 1,
    gviPresentationStepFlightNormal = 2,
    gviPresentationStepFlightFast = 3,
    gviPresentationStepFlightVeryFast = 4
};

enum gviPresentationSplineSpeedBehavior
{
    gviPresentationSplineSpeedAutomatic = 0,
    gviPresentationSplineSpeedManualIgnoreSpeedFactor = 1,
    gviPresentationSplineSpeedManualWithSpeedFactor = 2
};

enum gviPresentationStepType
{
    gviPresentationStepTypeClearCaption = -1,
    gviPresentationStepTypeLocation = 0,
    gviPresentationStepTypeDynamicObject = 1,
    gviPresentationStepTypeGroupOrObject = 2,
    gviPresentationStepTypeUnderGroundMode = 3,
    gviPresentationStepTypeTimeSlider = 4,
    gviPresentationStepTypeSetTime = 5,
    gviPresentationStepTypeMessage = 6,
    gviPresentationStepTypeTool = 7,
    gviPresentationStepTypeCaption = 8,
    gviPresentationStepTypeRestartDynamicObject = 9,
    gviPresentationStepTypeFlightSpeedFactor = 10,
    gviPresentationStepTypePlayTimeAnimation = 11,
    gviPresentationStepTypePlayAnotherPresentation = 12,
    gviPresentationStepTypeObjectControl = 13,
    gviPresentationStepTypeEnvironmentSetting = 14
};

enum gviPresentationCaptionPosition
{
    gviPresentationCaptionPositionTopLeft = 0,
    gviPresentationCaptionPositionTopCenter = 1,
    gviPresentationCaptionPositionTopRight = 2,
    gviPresentationCaptionPositionBottomLeft = 3,
    gviPresentationCaptionPositionBottomCenter = 4,
    gviPresentationCaptionPositionBottomRight = 5
};

enum gviPresentationCaptionSizeType
{
    gviPresentationCaptionSizeTypeFixed = 0,
    gviPresentationCaptionSizeTypeAutomaticallyAdjust = 1
};

enum gviPresentationPlayAlgorithm
{
    gviPresentationPlayAlgorithmFlyTo = 0,
    gviPresentationPlayAlgorithmSpline = 1
};

enum gviComplexParticleEffectType
{
    gviComplexParticleEffectUnknown = 0,
    gviComplexParticleEffectFire_0 = 1000,
    gviComplexParticleEffectFire_1 = 1001,
    gviComplexParticleEffectFire_2 = 1002,
    gviComplexParticleEffectFire_3 = 1003,
    gviComplexParticleEffectFire_4 = 1004,
    gviComplexParticleEffectSmoke_0 = 2000,
    gviComplexParticleEffectSmoke_1 = 2001,
    gviComplexParticleEffectSmoke_2 = 2002,
    gviComplexParticleEffectExplosion_0 = 3000,
    gviComplexParticleEffectExplosion_1 = 3001,
    gviComplexParticleEffectExplosion_2 = 3002,
    gviComplexParticleEffectExplosion_3 = 3003,
    gviComplexParticleEffectExplosion_4 = 3004,
    gviComplexParticleEffectExplosion_5 = 3005,
    gviComplexParticleEffectExplosion_6 = 3006,
    gviComplexParticleEffectExplosion_7 = 3007,
    gviComplexParticleEffectExplosion_8 = 3008,
    gviComplexParticleEffectRocketTailFlame = 9000
};

enum gviMsgChainFlags
{
    gviMsgChainLButtonDown = 1,
    gviMsgChainLButtonUp = 2,
    gviMsgChainLButtonDblClk = 4,
    gviMsgChainMButtonDown = 8,
    gviMsgChainMButtonUp = 16,
    gviMsgChainMButtonDblClk = 32,
    gviMsgChainRButtonDown = 64,
    gviMsgChainRButtonUp = 128,
    gviMsgChainRButtonDblClk = 256,
    gviMsgChainMouseMove = 512,
    gviMsgChainMouseHover = 1024,
    gviMsgChainMouseWheel = 2048,
    gviMsgChainKeyDown = 4096,
    gviMsgChainKeyUp = 8192
};

enum gviUIWindowType
{
    gviUIUnknown = 0,
    gviUIImageButton = 1,
    gviUIButton = 2
};

enum gviUIEventType
{
    gviUINone = -1,
    gviUIMouseClick = -11,
    gviUIMouseEntersArea = -12,
    gviUIMouseLeavesArea = -13,
    gviUIMouseButtonDown = -14,
    gviUIMouseButtonUp = -15,
    gviUIMouseButtonDoubleClick = -16,
    gviUIMouseMove = -17
};

enum gviUIMouseButtonType
{
    gviUILeftButton = 0,
    gviUIRightButton = 1,
    gviUIMiddleButton = 2,
    gviUIX1Button = 3,
    gviUIX2Button = 4,
    gviUIMouseButtonCount = 5,
    gviUINoButton = 6
};

struct __declspec(uuid("682ac2c1-490e-4820-a7fe-7ab460da002d"))
IRObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetType))
    enum gviObjectType Type;
    __declspec(property(get=GetGuid))
    GUID Guid;
    __declspec(property(get=GetAttributeMask,put=PutAttributeMask))
    enum gviAttributeMask AttributeMask;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSaveInCepFile,put=PutSaveInCepFile))
    VARIANT_BOOL SaveInCepFile;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    enum gviObjectType GetType ( );
    GUID GetGuid ( );
    enum gviAttributeMask GetAttributeMask ( );
    void PutAttributeMask (
        enum gviAttributeMask pVal );
    HRESULT SetClientData (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetClientData (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetSaveInCepFile ( );
    void PutSaveInCepFile (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall get_AttributeMask (
        /*[out,retval]*/ enum gviAttributeMask * pVal ) = 0;
      virtual HRESULT __stdcall put_AttributeMask (
        /*[in]*/ enum gviAttributeMask pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClientData (
        BSTR Name,
        BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetClientData (
        BSTR Name,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SaveInCepFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SaveInCepFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("d2527ea6-02ff-4bab-81bc-372f3f3243f6"))
IRenderable : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetMinVisibleDistance,put=PutMinVisibleDistance))
    double MinVisibleDistance;
    __declspec(property(get=GetVisibleMask,put=PutVisibleMask))
    enum gviViewportMask VisibleMask;
    __declspec(property(get=GetMouseSelectMask,put=PutMouseSelectMask))
    enum gviViewportMask MouseSelectMask;
    __declspec(property(get=GetEnvelope))
    IEnvelopePtr Envelope;
    __declspec(property(get=GetMaxVisibleDistance,put=PutMaxVisibleDistance))
    double MaxVisibleDistance;
    __declspec(property(get=GetMinVisiblePixels,put=PutMinVisiblePixels))
    float MinVisiblePixels;
    __declspec(property(get=GetViewingDistance,put=PutViewingDistance))
    double ViewingDistance;
    __declspec(property(get=GetDepthTestMode,put=PutDepthTestMode))
    enum gviDepthTestMode DepthTestMode;

    //
    // Wrapper methods for error-handling
    //

    enum gviViewportMask GetVisibleMask ( );
    void PutVisibleMask (
        enum gviViewportMask pVal );
    enum gviViewportMask GetMouseSelectMask ( );
    void PutMouseSelectMask (
        enum gviViewportMask pVal );
    IEnvelopePtr GetEnvelope ( );
    double GetMaxVisibleDistance ( );
    void PutMaxVisibleDistance (
        double pVal );
    double GetMinVisibleDistance ( );
    void PutMinVisibleDistance (
        double pVal );
    float GetMinVisiblePixels ( );
    void PutMinVisiblePixels (
        float pVal );
    HRESULT Highlight (
        OLE_COLOR Color );
    HRESULT Unhighlight ( );
    double GetViewingDistance ( );
    void PutViewingDistance (
        double pVal );
    enum gviDepthTestMode GetDepthTestMode ( );
    void PutDepthTestMode (
        enum gviDepthTestMode pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VisibleMask (
        /*[out,retval]*/ enum gviViewportMask * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibleMask (
        /*[in]*/ enum gviViewportMask pVal ) = 0;
      virtual HRESULT __stdcall get_MouseSelectMask (
        /*[out,retval]*/ enum gviViewportMask * pVal ) = 0;
      virtual HRESULT __stdcall put_MouseSelectMask (
        /*[in]*/ enum gviViewportMask pVal ) = 0;
      virtual HRESULT __stdcall get_Envelope (
        /*[out,retval]*/ struct IEnvelope * * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxVisibleDistance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxVisibleDistance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinVisibleDistance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinVisibleDistance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinVisiblePixels (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_MinVisiblePixels (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall raw_Highlight (
        OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall raw_Unhighlight ( ) = 0;
      virtual HRESULT __stdcall get_ViewingDistance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewingDistance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DepthTestMode (
        /*[out,retval]*/ enum gviDepthTestMode * pVal ) = 0;
      virtual HRESULT __stdcall put_DepthTestMode (
        /*[in]*/ enum gviDepthTestMode pVal ) = 0;
};

struct __declspec(uuid("7c70c1e4-9a28-48c2-ba45-305b4ddf5837"))
IRenderGeometry : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetForceCullMode,put=PutForceCullMode))
    VARIANT_BOOL ForceCullMode;
    __declspec(property(get=GetShowOutline,put=PutShowOutline))
    VARIANT_BOOL ShowOutline;
    __declspec(property(get=GetToolTipText,put=PutToolTipText))
    _bstr_t ToolTipText;

    //
    // Wrapper methods for error-handling
    //

    IGeometryPtr GetFdeGeometry ( );
    HRESULT SetFdeGeometry (
        struct IGeometry * newVal );
    void PutForceCullMode (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetForceCullMode ( );
    void PutCullMode (
        enum gviCullFaceMode pVal );
    enum gviCullFaceMode GetCullMode ( );
    HRESULT Glow (
        long Duration );
    void PutShowOutline (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowOutline ( );
    _bstr_t GetToolTipText ( );
    void PutToolTipText (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetFdeGeometry (
        /*[out,retval]*/ struct IGeometry * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFdeGeometry (
        /*[in]*/ struct IGeometry * newVal ) = 0;
      virtual HRESULT __stdcall put_ForceCullMode (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ForceCullMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CullMode (
        /*[in]*/ enum gviCullFaceMode pVal ) = 0;
      virtual HRESULT __stdcall get_CullMode (
        /*[out,retval]*/ enum gviCullFaceMode * pVal ) = 0;
      virtual HRESULT __stdcall raw_Glow (
        long Duration ) = 0;
      virtual HRESULT __stdcall put_ShowOutline (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowOutline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ToolTipText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ToolTipText (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("39fff071-ef9e-4002-9f57-c1a79b4ef5d6"))
IReferencePlane : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPlaneHeight,put=PutPlaneHeight))
    double PlaneHeight;
    __declspec(property(get=GetVisibleMask,put=PutVisibleMask))
    enum gviViewportMask VisibleMask;

    //
    // Wrapper methods for error-handling
    //

    double GetPlaneHeight ( );
    void PutPlaneHeight (
        double pVal );
    enum gviViewportMask GetVisibleMask ( );
    void PutVisibleMask (
        enum gviViewportMask pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlaneHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaneHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VisibleMask (
        /*[out,retval]*/ enum gviViewportMask * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibleMask (
        /*[in]*/ enum gviViewportMask pVal ) = 0;
};

struct __declspec(uuid("d0b1e4c5-5fc6-4a03-94db-9be89f288550"))
IFeatureManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL CreateFeatures (
        struct IFeatureClass * FeatureClass,
        struct IRowBufferCollection * RowBuffers );
    VARIANT_BOOL CreateFeature (
        struct IFeatureClass * FeatureClass,
        struct IRowBuffer * RowBuffer );
    VARIANT_BOOL EditFeatures (
        struct IFeatureClass * FeatureClass,
        struct IRowBufferCollection * RowBuffers );
    VARIANT_BOOL EditFeature (
        struct IFeatureClass * FeatureClass,
        struct IRowBuffer * RowBuffer );
    VARIANT_BOOL DeleteFeatures (
        struct IFeatureClass * FeatureClass,
        SAFEARRAY * Ids );
    VARIANT_BOOL DeleteFeature (
        struct IFeatureClass * FeatureClass,
        long FeatureId );
    VARIANT_BOOL HighlightFeature (
        struct IFeatureClass * FeatureClass,
        long FeatureId,
        OLE_COLOR ColorValue );
    VARIANT_BOOL UnhighlightFeature (
        struct IFeatureClass * FeatureClass,
        long FeatureId );
    VARIANT_BOOL UnhighlightFeatureClass (
        struct IFeatureClass * FeatureClass );
    VARIANT_BOOL UnhighlightAll ( );
    HRESULT RefreshFeatureClass (
        struct IFeatureClass * FeatureClass );
    HRESULT RefreshAll ( );
    VARIANT_BOOL SetFeatureVisibleMask (
        struct IFeatureClass * FeatureClass,
        long FeatureId,
        enum gviViewportMask VisibleMask );
    VARIANT_BOOL SetFeaturesVisibleMask (
        struct IFeatureClass * FeatureClass,
        SAFEARRAY * FIDs,
        enum gviViewportMask VisibleMask );
    VARIANT_BOOL ResetFeatureVisibleMask (
        struct IFeatureClass * FeatureClass,
        long FeatureId );
    VARIANT_BOOL ResetFeatureClassVisibleMask (
        struct IFeatureClass * FeatureClass );
    VARIANT_BOOL ResetAllVisibleMask ( );
    VARIANT_BOOL HighlightFeatures (
        struct IFeatureClass * FeatureClass,
        SAFEARRAY * FIDs,
        OLE_COLOR ColorValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFeatures (
        struct IFeatureClass * FeatureClass,
        struct IRowBufferCollection * RowBuffers,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFeature (
        struct IFeatureClass * FeatureClass,
        struct IRowBuffer * RowBuffer,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_EditFeatures (
        struct IFeatureClass * FeatureClass,
        struct IRowBufferCollection * RowBuffers,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_EditFeature (
        struct IFeatureClass * FeatureClass,
        struct IRowBuffer * RowBuffer,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteFeatures (
        struct IFeatureClass * FeatureClass,
        SAFEARRAY * Ids,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteFeature (
        struct IFeatureClass * FeatureClass,
        long FeatureId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_HighlightFeature (
        struct IFeatureClass * FeatureClass,
        long FeatureId,
        OLE_COLOR ColorValue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UnhighlightFeature (
        struct IFeatureClass * FeatureClass,
        long FeatureId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UnhighlightFeatureClass (
        struct IFeatureClass * FeatureClass,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UnhighlightAll (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RefreshFeatureClass (
        struct IFeatureClass * FeatureClass ) = 0;
      virtual HRESULT __stdcall raw_RefreshAll ( ) = 0;
      virtual HRESULT __stdcall raw_SetFeatureVisibleMask (
        struct IFeatureClass * FeatureClass,
        long FeatureId,
        enum gviViewportMask VisibleMask,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFeaturesVisibleMask (
        struct IFeatureClass * FeatureClass,
        SAFEARRAY * FIDs,
        enum gviViewportMask VisibleMask,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetFeatureVisibleMask (
        struct IFeatureClass * FeatureClass,
        long FeatureId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetFeatureClassVisibleMask (
        struct IFeatureClass * FeatureClass,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetAllVisibleMask (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_HighlightFeatures (
        struct IFeatureClass * FeatureClass,
        SAFEARRAY * FIDs,
        OLE_COLOR ColorValue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("cfaff3e3-4b1e-4346-beb5-b31aa902321d"))
IPickResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum gviObjectType Type;

    //
    // Wrapper methods for error-handling
    //

    enum gviObjectType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviObjectType * pVal ) = 0;
};

struct __declspec(uuid("504a18f2-c761-4961-a7a0-0eaa21bdd698"))
IPickResultCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPickResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IPickResultPtr GetItem (
        long n );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long n,
        /*[out,retval]*/ struct IPickResult * * pVal ) = 0;
};

struct __declspec(uuid("23f94bbf-afb7-47f5-86b7-7a95beb18e2a"))
ITransformHelper : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum gviEditorType Type;
    __declspec(property(get=GetCrsWKT,put=PutCrsWKT))
    _bstr_t CrsWKT;

    //
    // Wrapper methods for error-handling
    //

    enum gviEditorType GetType ( );
    void PutType (
        enum gviEditorType pVal );
    HRESULT SetPosition (
        struct IVector3 * Position );
    _bstr_t GetCrsWKT ( );
    void PutCrsWKT (
        _bstr_t pVal );
    HRESULT SetPosition2 (
        struct IVector3 * Position,
        struct IEulerAngle * Angle );
    HRESULT SetPosition3 (
        struct IEnvelope * Env,
        struct IEulerAngle * Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviEditorType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum gviEditorType pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        struct IVector3 * Position ) = 0;
      virtual HRESULT __stdcall get_CrsWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrsWKT (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition2 (
        struct IVector3 * Position,
        struct IEulerAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_SetPosition3 (
        struct IEnvelope * Env,
        struct IEulerAngle * Angle ) = 0;
};

struct __declspec(uuid("509994d1-8ff9-4b91-a6f3-13a54d10668c"))
ICamera : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCollisionDetectionMode,put=PutCollisionDetectionMode))
    enum gviCollisionDetectionMode CollisionDetectionMode;
    __declspec(property(get=GetCanUndo))
    VARIANT_BOOL CanUndo;
    __declspec(property(get=GetCanRedo))
    VARIANT_BOOL CanRedo;
    __declspec(property(get=GetWalkMode,put=PutWalkMode))
    enum gviWalkMode WalkMode;
    __declspec(property(get=GetEnvelope,put=PutEnvelope))
    IEnvelopePtr Envelope;

    //
    // Wrapper methods for error-handling
    //

    HRESULT LookAt (
        struct IVector3 * Position,
        double Distance,
        struct IEulerAngle * Angle );
    HRESULT LookAt2 (
        struct IPoint * Position,
        double Distance,
        struct IEulerAngle * Angle );
    HRESULT SetCamera (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        enum gviSetCameraFlags Flags );
    HRESULT SetCamera2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        enum gviSetCameraFlags Flags );
    HRESULT GetCamera (
        struct IVector3 * * Position,
        struct IEulerAngle * * Angle );
    HRESULT GetCamera2 (
        struct IPoint * * Position,
        struct IEulerAngle * * Angle );
    double GetFlyTime ( );
    void PutFlyTime (
        double pVal );
    IEulerAnglePtr GetAimingAngles (
        struct IVector3 * Position1,
        struct IVector3 * Position2 );
    IEulerAnglePtr GetAimingAngles2 (
        struct IPoint * Position1,
        struct IPoint * Position2 );
    IVector3Ptr GetAimingPoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Range );
    IPointPtr GetAimingPoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Range );
    HRESULT LookAtEnvelope (
        struct IEnvelope * Env );
    HRESULT LookAtEnvelope2 (
        _bstr_t CrsWKT,
        struct IEnvelope * Env );
    IMatrixPtr AsMatrix ( );
    HRESULT FromMatrix (
        struct IMatrix * newVal );
    float GetVerticalFieldOfView ( );
    void PutVerticalFieldOfView (
        float pVal );
    float GetWalkSpeed ( );
    void PutWalkSpeed (
        float pVal );
    float GetFlySpeed ( );
    void PutFlySpeed (
        float pVal );
    enum gviFlyMode GetFlyMode ( );
    void PutFlyMode (
        enum gviFlyMode pVal );
    float GetNearClipPlane ( );
    void PutNearClipPlane (
        float pVal );
    float GetFarClipPlane ( );
    void PutFarClipPlane (
        float pVal );
    VARIANT_BOOL GetAutoClipPlane ( );
    void PutAutoClipPlane (
        VARIANT_BOOL pVal );
    HRESULT FlyToObject (
        GUID ObjectId,
        enum gviActionCode ActionCode );
    IPickResultPtr ScreenToWorld (
        long WindowX,
        long WindowY,
        struct IPoint * * IntersectPoint );
    enum gviCollisionDetectionMode GetCollisionDetectionMode ( );
    void PutCollisionDetectionMode (
        enum gviCollisionDetectionMode pVal );
    VARIANT_BOOL GetCanUndo ( );
    VARIANT_BOOL GetCanRedo ( );
    HRESULT Undo ( );
    HRESULT Redo ( );
    HRESULT Stop ( );
    float GetWalkHeight ( );
    void PutWalkHeight (
        float pVal );
    enum gviWalkMode GetWalkMode ( );
    void PutWalkMode (
        enum gviWalkMode pVal );
    VARIANT_BOOL WorldToScreen (
        double WorldX,
        double WorldY,
        double WorldZ,
        double * ScreenX,
        double * ScreenY,
        int Mode,
        VARIANT_BOOL * BoolInScreen );
    IEnvelopePtr GetEnvelope ( );
    void PutEnvelope (
        struct IEnvelope * pVal );
    VARIANT_BOOL GetUndergroundMode ( );
    void PutUndergroundMode (
        VARIANT_BOOL pVal );
    HRESULT ZoomIn (
        float Delta );
    HRESULT ZoomOut (
        float Delta );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LookAt (
        struct IVector3 * Position,
        double Distance,
        struct IEulerAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_LookAt2 (
        struct IPoint * Position,
        double Distance,
        struct IEulerAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_SetCamera (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        enum gviSetCameraFlags Flags ) = 0;
      virtual HRESULT __stdcall raw_SetCamera2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        enum gviSetCameraFlags Flags ) = 0;
      virtual HRESULT __stdcall raw_GetCamera (
        /*[out]*/ struct IVector3 * * Position,
        /*[out]*/ struct IEulerAngle * * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetCamera2 (
        /*[out]*/ struct IPoint * * Position,
        /*[out]*/ struct IEulerAngle * * Angle ) = 0;
      virtual HRESULT __stdcall get_FlyTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FlyTime (
        double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAimingAngles (
        struct IVector3 * Position1,
        struct IVector3 * Position2,
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAimingAngles2 (
        struct IPoint * Position1,
        struct IPoint * Position2,
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAimingPoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Range,
        /*[out,retval]*/ struct IVector3 * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAimingPoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Range,
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall raw_LookAtEnvelope (
        struct IEnvelope * Env ) = 0;
      virtual HRESULT __stdcall raw_LookAtEnvelope2 (
        BSTR CrsWKT,
        struct IEnvelope * Env ) = 0;
      virtual HRESULT __stdcall raw_AsMatrix (
        /*[out,retval]*/ struct IMatrix * * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromMatrix (
        struct IMatrix * newVal ) = 0;
      virtual HRESULT __stdcall get_VerticalFieldOfView (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalFieldOfView (
        float pVal ) = 0;
      virtual HRESULT __stdcall get_WalkSpeed (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_WalkSpeed (
        float pVal ) = 0;
      virtual HRESULT __stdcall get_FlySpeed (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_FlySpeed (
        float pVal ) = 0;
      virtual HRESULT __stdcall get_FlyMode (
        /*[out,retval]*/ enum gviFlyMode * pVal ) = 0;
      virtual HRESULT __stdcall put_FlyMode (
        enum gviFlyMode pVal ) = 0;
      virtual HRESULT __stdcall get_NearClipPlane (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_NearClipPlane (
        float pVal ) = 0;
      virtual HRESULT __stdcall get_FarClipPlane (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_FarClipPlane (
        float pVal ) = 0;
      virtual HRESULT __stdcall get_AutoClipPlane (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoClipPlane (
        VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_FlyToObject (
        GUID ObjectId,
        enum gviActionCode ActionCode ) = 0;
      virtual HRESULT __stdcall raw_ScreenToWorld (
        long WindowX,
        long WindowY,
        /*[out]*/ struct IPoint * * IntersectPoint,
        /*[out,retval]*/ struct IPickResult * * PickResult ) = 0;
      virtual HRESULT __stdcall get_CollisionDetectionMode (
        /*[out,retval]*/ enum gviCollisionDetectionMode * pVal ) = 0;
      virtual HRESULT __stdcall put_CollisionDetectionMode (
        /*[in]*/ enum gviCollisionDetectionMode pVal ) = 0;
      virtual HRESULT __stdcall get_CanUndo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanRedo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Undo ( ) = 0;
      virtual HRESULT __stdcall raw_Redo ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall get_WalkHeight (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_WalkHeight (
        float pVal ) = 0;
      virtual HRESULT __stdcall get_WalkMode (
        /*[out,retval]*/ enum gviWalkMode * pVal ) = 0;
      virtual HRESULT __stdcall put_WalkMode (
        /*[in]*/ enum gviWalkMode pVal ) = 0;
      virtual HRESULT __stdcall raw_WorldToScreen (
        double WorldX,
        double WorldY,
        double WorldZ,
        /*[out]*/ double * ScreenX,
        /*[out]*/ double * ScreenY,
        int Mode,
        /*[out]*/ VARIANT_BOOL * BoolInScreen,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Envelope (
        /*[out,retval]*/ struct IEnvelope * * pVal ) = 0;
      virtual HRESULT __stdcall put_Envelope (
        /*[in]*/ struct IEnvelope * pVal ) = 0;
      virtual HRESULT __stdcall get_UndergroundMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UndergroundMode (
        VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ZoomIn (
        float Delta ) = 0;
      virtual HRESULT __stdcall raw_ZoomOut (
        float Delta ) = 0;
};

struct __declspec(uuid("33e4cca8-412a-4701-8e62-1f0814a8f969"))
ITerrain : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetIsPlanarTerrain))
    VARIANT_BOOL IsPlanarTerrain;
    __declspec(property(get=GetCrsWKT))
    _bstr_t CrsWKT;
    __declspec(property(get=GetSupportAtmosphere))
    VARIANT_BOOL SupportAtmosphere;
    __declspec(property(get=GetDemAvailable,put=PutDemAvailable))
    VARIANT_BOOL DemAvailable;
    __declspec(property(get=GetVisibleMask,put=PutVisibleMask))
    enum gviViewportMask VisibleMask;
    __declspec(property(get=GetIsRegistered))
    VARIANT_BOOL IsRegistered;
    __declspec(property(get=GetEnableAtmosphere,put=PutEnableAtmosphere))
    VARIANT_BOOL EnableAtmosphere;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    double Opacity;
    __declspec(property(get=GetEnableOceanEffect,put=PutEnableOceanEffect))
    VARIANT_BOOL EnableOceanEffect;
    __declspec(property(get=GetOceanWindSpeed,put=PutOceanWindSpeed))
    double OceanWindSpeed;
    __declspec(property(get=GetOceanWindDirection,put=PutOceanWindDirection))
    double OceanWindDirection;
    __declspec(property(get=GetConnectInfo))
    _bstr_t ConnectInfo;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL RegisterTerrain (
        _bstr_t LayerInfo,
        _bstr_t Password );
    VARIANT_BOOL GetIsPlanarTerrain ( );
    HRESULT UnregisterTerrain ( );
    _bstr_t GetCrsWKT ( );
    double GetElevation (
        double X,
        double Y,
        enum gviGetElevationType GetAltitudeType );
    VARIANT_BOOL GetDemAvailable ( );
    void PutDemAvailable (
        VARIANT_BOOL pVal );
    enum gviViewportMask GetVisibleMask ( );
    void PutVisibleMask (
        enum gviViewportMask pVal );
    VARIANT_BOOL GetIsRegistered ( );
    HRESULT FlyTo (
        enum gviTerrainActionCode newVal );
    double GetOpacity ( );
    void PutOpacity (
        double pVal );
    IPolylinePtr FindBestPath (
        double StartX,
        double StartY,
        double EndX,
        double EndY,
        long SampleNumber,
        double SearchAreaFactor,
        double MaxClimbSlope,
        double MaxDescentSlope );
    IEulerAnglePtr GetSlope (
        double X,
        double Y );
    VARIANT_BOOL GetSupportAtmosphere ( );
    VARIANT_BOOL GetEnableAtmosphere ( );
    void PutEnableAtmosphere (
        VARIANT_BOOL pVal );
    HRESULT SetInvisibleRegion (
        struct IMultiPolygon * Region );
    IMultiPolygonPtr GetInvisibleRegion ( );
    HRESULT SetOceanRegion (
        struct IMultiPolygon * Region );
    IMultiPolygonPtr GetOceanRegion ( );
    VARIANT_BOOL GetEnableOceanEffect ( );
    void PutEnableOceanEffect (
        VARIANT_BOOL pVal );
    double GetOceanWindSpeed ( );
    void PutOceanWindSpeed (
        double pVal );
    double GetOceanWindDirection ( );
    void PutOceanWindDirection (
        double pVal );
    _bstr_t GetConnectInfo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RegisterTerrain (
        BSTR LayerInfo,
        BSTR Password,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsPlanarTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UnregisterTerrain ( ) = 0;
      virtual HRESULT __stdcall get_CrsWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetElevation (
        double X,
        double Y,
        enum gviGetElevationType GetAltitudeType,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DemAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DemAvailable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VisibleMask (
        /*[out,retval]*/ enum gviViewportMask * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibleMask (
        /*[in]*/ enum gviViewportMask pVal ) = 0;
      virtual HRESULT __stdcall get_IsRegistered (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FlyTo (
        enum gviTerrainActionCode newVal ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_FindBestPath (
        double StartX,
        double StartY,
        double EndX,
        double EndY,
        long SampleNumber,
        double SearchAreaFactor,
        double MaxClimbSlope,
        double MaxDescentSlope,
        /*[out,retval]*/ struct IPolyline * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSlope (
        double X,
        double Y,
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall get_SupportAtmosphere (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableAtmosphere (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAtmosphere (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetInvisibleRegion (
        struct IMultiPolygon * Region ) = 0;
      virtual HRESULT __stdcall raw_GetInvisibleRegion (
        /*[out,retval]*/ struct IMultiPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOceanRegion (
        struct IMultiPolygon * Region ) = 0;
      virtual HRESULT __stdcall raw_GetOceanRegion (
        /*[out,retval]*/ struct IMultiPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableOceanEffect (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableOceanEffect (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OceanWindSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OceanWindSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OceanWindDirection (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OceanWindDirection (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectInfo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("48fd05c2-d6ef-4fb8-a326-9e2c07fc1754"))
ISkyBox : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetWeather,put=PutWeather))
    enum gviWeatherType Weather;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    OLE_COLOR BackgroundColor;
    __declspec(property(get=GetHeading,put=PutHeading))
    double Heading;
    __declspec(property(get=GetFogMode,put=PutFogMode))
    enum gviFogMode FogMode;
    __declspec(property(get=GetFogColor,put=PutFogColor))
    OLE_COLOR FogColor;
    __declspec(property(get=GetFogStartDistance,put=PutFogStartDistance))
    float FogStartDistance;
    __declspec(property(get=GetFogEndDistance,put=PutFogEndDistance))
    float FogEndDistance;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackgroundColor ( );
    void PutBackgroundColor (
        OLE_COLOR pVal );
    double GetHeading ( );
    void PutHeading (
        double pVal );
    HRESULT SetImagePath (
        enum gviSkyboxImageIndex ImageIndex,
        _bstr_t ImagePath );
    _bstr_t GetImagePath (
        enum gviSkyboxImageIndex ImageIndex );
    enum gviFogMode GetFogMode ( );
    void PutFogMode (
        enum gviFogMode pVal );
    OLE_COLOR GetFogColor ( );
    void PutFogColor (
        OLE_COLOR pVal );
    float GetFogStartDistance ( );
    void PutFogStartDistance (
        float pVal );
    float GetFogEndDistance ( );
    void PutFogEndDistance (
        float pVal );
    enum gviWeatherType GetWeather ( );
    void PutWeather (
        enum gviWeatherType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Heading (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Heading (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetImagePath (
        enum gviSkyboxImageIndex ImageIndex,
        BSTR ImagePath ) = 0;
      virtual HRESULT __stdcall raw_GetImagePath (
        enum gviSkyboxImageIndex ImageIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FogMode (
        /*[out,retval]*/ enum gviFogMode * pVal ) = 0;
      virtual HRESULT __stdcall put_FogMode (
        /*[in]*/ enum gviFogMode pVal ) = 0;
      virtual HRESULT __stdcall get_FogColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FogColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FogStartDistance (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_FogStartDistance (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_FogEndDistance (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_FogEndDistance (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_Weather (
        /*[out,retval]*/ enum gviWeatherType * pVal ) = 0;
      virtual HRESULT __stdcall put_Weather (
        /*[in]*/ enum gviWeatherType pVal ) = 0;
};

struct __declspec(uuid("c4100782-dedc-435c-a281-2b0000ece5ef"))
ITextRender : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression;
    __declspec(property(get=GetRenderType))
    enum gviRenderType RenderType;
    __declspec(property(get=GetDynamicPlacement,put=PutDynamicPlacement))
    VARIANT_BOOL DynamicPlacement;
    __declspec(property(get=GetMinimizeOverlap,put=PutMinimizeOverlap))
    VARIANT_BOOL MinimizeOverlap;
    __declspec(property(get=GetRemoveDuplicate,put=PutRemoveDuplicate))
    VARIANT_BOOL RemoveDuplicate;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    _bstr_t GetExpression ( );
    void PutExpression (
        _bstr_t pVal );
    enum gviRenderType GetRenderType ( );
    VARIANT_BOOL GetDynamicPlacement ( );
    void PutDynamicPlacement (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMinimizeOverlap ( );
    void PutMinimizeOverlap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRemoveDuplicate ( );
    void PutRemoveDuplicate (
        VARIANT_BOOL pVal );
    _bstr_t AsXml ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RenderType (
        /*[out,retval]*/ enum gviRenderType * pVal ) = 0;
      virtual HRESULT __stdcall get_DynamicPlacement (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DynamicPlacement (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinimizeOverlap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MinimizeOverlap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveDuplicate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveDuplicate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("8ff7cc48-1dc6-4d19-a8bb-8849a60799ad"))
IGeometryRender : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetRenderGroupField,put=PutRenderGroupField))
    _bstr_t RenderGroupField;
    __declspec(property(get=GetRenderType))
    enum gviRenderType RenderType;
    __declspec(property(get=GetHeightStyle,put=PutHeightStyle))
    enum gviHeightStyle HeightStyle;
    __declspec(property(get=GetHeightOffset,put=PutHeightOffset))
    double HeightOffset;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    _bstr_t GetRenderGroupField ( );
    void PutRenderGroupField (
        _bstr_t pVal );
    enum gviRenderType GetRenderType ( );
    enum gviHeightStyle GetHeightStyle ( );
    void PutHeightStyle (
        enum gviHeightStyle pVal );
    double GetHeightOffset ( );
    void PutHeightOffset (
        double pVal );
    _bstr_t AsXml ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_RenderGroupField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RenderGroupField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RenderType (
        /*[out,retval]*/ enum gviRenderType * pVal ) = 0;
      virtual HRESULT __stdcall get_HeightStyle (
        /*[out,retval]*/ enum gviHeightStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightStyle (
        /*[in]*/ enum gviHeightStyle pVal ) = 0;
      virtual HRESULT __stdcall get_HeightOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("9b39e213-e55f-4041-ace8-0748de409ed5"))
IFeatureClassInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataSourceConnectionString))
    _bstr_t DataSourceConnectionString;
    __declspec(property(get=GetDataSetName))
    _bstr_t DataSetName;
    __declspec(property(get=GetFeatureClassName))
    _bstr_t FeatureClassName;
    __declspec(property(get=GetFidFieldName))
    _bstr_t FidFieldName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDataSourceConnectionString ( );
    _bstr_t GetDataSetName ( );
    _bstr_t GetFeatureClassName ( );
    _bstr_t GetFidFieldName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataSourceConnectionString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DataSetName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureClassName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FidFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("39b320a8-bee1-4397-9469-e7e6fb055558"))
IFeatureLayer : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetFeatureClassId))
    GUID FeatureClassId;
    __declspec(property(get=GetGeometryFieldName))
    _bstr_t GeometryFieldName;
    __declspec(property(get=GetForceCullMode,put=PutForceCullMode))
    VARIANT_BOOL ForceCullMode;
    __declspec(property(get=GetEnableTemporal,put=PutEnableTemporal))
    VARIANT_BOOL EnableTemporal;
    __declspec(property(get=GetTime,put=PutTime))
    DATE Time;
    __declspec(property(get=GetDrawOrder,put=PutDrawOrder))
    long DrawOrder;
    __declspec(property(get=GetGeometryType))
    enum gviGeometryColumnType GeometryType;
    __declspec(property(get=GetFeatureClassInfo))
    IFeatureClassInfoPtr FeatureClassInfo;
    __declspec(property(get=GetHiddenFeatures,put=PutHiddenFeatures))
    SAFEARRAY * HiddenFeatures;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetGroupVisibleMask (
        long GroupId,
        enum gviViewportMask VisibleMask );
    enum gviViewportMask GetGroupVisibleMask (
        long GroupId );
    GUID GetFeatureClassId ( );
    _bstr_t GetGeometryFieldName ( );
    ITextRenderPtr GetTextRender ( );
    VARIANT_BOOL SetTextRender (
        struct ITextRender * newVal );
    IGeometryRenderPtr GetGeometryRender ( );
    VARIANT_BOOL SetGeometryRender (
        struct IGeometryRender * newVal );
    HRESULT SetEnableGroupColor (
        long GroupId,
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetEnableGroupColor (
        long GroupId );
    HRESULT SetGroupColor (
        long GroupId,
        OLE_COLOR newVal );
    OLE_COLOR GetGroupColor (
        long GroupId );
    void PutForceCullMode (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetForceCullMode ( );
    void PutCullMode (
        enum gviCullFaceMode pVal );
    enum gviCullFaceMode GetCullMode ( );
    void PutEnableTemporal (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableTemporal ( );
    DATE GetTime ( );
    void PutTime (
        DATE pVal );
    long GetDrawOrder ( );
    void PutDrawOrder (
        long pVal );
    enum gviGeometryColumnType GetGeometryType ( );
    _bstr_t GetWKT ( );
    IFeatureClassInfoPtr GetFeatureClassInfo ( );
    SAFEARRAY * GetHiddenFeatures ( );
    void PutHiddenFeatures (
        SAFEARRAY * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetGroupVisibleMask (
        long GroupId,
        enum gviViewportMask VisibleMask ) = 0;
      virtual HRESULT __stdcall raw_GetGroupVisibleMask (
        long GroupId,
        /*[out,retval]*/ enum gviViewportMask * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureClassId (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall get_GeometryFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTextRender (
        /*[out,retval]*/ struct ITextRender * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTextRender (
        /*[in]*/ struct ITextRender * newVal,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetGeometryRender (
        /*[out,retval]*/ struct IGeometryRender * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetGeometryRender (
        /*[in]*/ struct IGeometryRender * newVal,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEnableGroupColor (
        long GroupId,
        VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall raw_GetEnableGroupColor (
        long GroupId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetGroupColor (
        long GroupId,
        OLE_COLOR newVal ) = 0;
      virtual HRESULT __stdcall raw_GetGroupColor (
        long GroupId,
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ForceCullMode (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ForceCullMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CullMode (
        /*[in]*/ enum gviCullFaceMode pVal ) = 0;
      virtual HRESULT __stdcall get_CullMode (
        /*[out,retval]*/ enum gviCullFaceMode * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableTemporal (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableTemporal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_DrawOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_GeometryType (
        /*[out,retval]*/ enum gviGeometryColumnType * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureClassInfo (
        /*[out,retval]*/ struct IFeatureClassInfo * * pVal ) = 0;
      virtual HRESULT __stdcall get_HiddenFeatures (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall put_HiddenFeatures (
        /*[in]*/ SAFEARRAY * pVal ) = 0;
};

struct __declspec(uuid("290f9680-65a6-426f-9f89-29661227600d"))
ITerrainRoute : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetWaypointsNumber))
    long WaypointsNumber;
    __declspec(property(get=GetAutoRepeat,put=PutAutoRepeat))
    VARIANT_BOOL AutoRepeat;
    __declspec(property(get=GetIsExporting))
    VARIANT_BOOL IsExporting;
    __declspec(property(get=GetCrsWKT,put=PutCrsWKT))
    _bstr_t CrsWKT;
    __declspec(property(get=GetSlideImageName,put=PutSlideImageName))
    _bstr_t SlideImageName;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddWaypoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Speed );
    VARIANT_BOOL AddWaypoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Speed );
    VARIANT_BOOL ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Speed );
    VARIANT_BOOL ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Speed );
    VARIANT_BOOL InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Speed );
    VARIANT_BOOL InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Speed );
    VARIANT_BOOL GetWaypoint (
        long Index,
        struct IVector3 * * Position,
        struct IEulerAngle * * Angle,
        double * Speed );
    VARIANT_BOOL GetWaypoint2 (
        long Index,
        struct IPoint * * Position,
        struct IEulerAngle * * Angle,
        double * Speed );
    VARIANT_BOOL DeleteWaypoint (
        long Index );
    long GetWaypointsNumber ( );
    HRESULT Play ( );
    HRESULT Stop ( );
    HRESULT Pause ( );
    VARIANT_BOOL GetAutoRepeat ( );
    void PutAutoRepeat (
        VARIANT_BOOL pVal );
    VARIANT_BOOL AddWaypointByMatrix (
        struct IMatrix * Mat,
        double Speed );
    VARIANT_BOOL GetWaypointByMatrix (
        long Index,
        struct IMatrix * * Mat,
        double * Speed );
    VARIANT_BOOL ModifyWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Speed );
    VARIANT_BOOL InsertWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Speed );
    HRESULT ExportVideo (
        _bstr_t FilePath,
        long FPS );
    HRESULT CancelExport ( );
    VARIANT_BOOL GetIsExporting ( );
    _bstr_t GetCrsWKT ( );
    void PutCrsWKT (
        _bstr_t pVal );
    _bstr_t AsXml ( );
    VARIANT_BOOL FromXml (
        _bstr_t XmlStringValue );
    _bstr_t GetSlideImageName ( );
    void PutSlideImageName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddWaypoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddWaypoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint (
        long Index,
        /*[out]*/ struct IVector3 * * Position,
        /*[out]*/ struct IEulerAngle * * Angle,
        /*[out]*/ double * Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint2 (
        long Index,
        /*[out]*/ struct IPoint * * Position,
        /*[out]*/ struct IEulerAngle * * Angle,
        /*[out]*/ double * Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteWaypoint (
        long Index,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_WaypointsNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall get_AutoRepeat (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRepeat (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_AddWaypointByMatrix (
        struct IMatrix * Mat,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWaypointByMatrix (
        long Index,
        /*[out]*/ struct IMatrix * * Mat,
        /*[out]*/ double * Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportVideo (
        BSTR FilePath,
        long FPS ) = 0;
      virtual HRESULT __stdcall raw_CancelExport ( ) = 0;
      virtual HRESULT __stdcall get_IsExporting (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CrsWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrsWKT (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromXml (
        BSTR XmlStringValue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SlideImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlideImageName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ce9e73a0-0cdc-4620-a22c-66d62cc40ab2"))
IGeometrySymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetSymbolType))
    enum gviGeometrySymbolType SymbolType;
    __declspec(property(get=GetScript,put=PutScript))
    _bstr_t Script;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    enum gviGeometrySymbolType GetSymbolType ( );
    HRESULT SetResourceDataSet (
        struct IFeatureDataSet * DataSet );
    _bstr_t GetScript ( );
    void PutScript (
        _bstr_t pVal );
    _bstr_t AsXml ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_SymbolType (
        /*[out,retval]*/ enum gviGeometrySymbolType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetResourceDataSet (
        struct IFeatureDataSet * DataSet ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Script (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("f0e8f6ed-0acc-4c1f-ae93-1252a1381e30"))
IModelPointSymbol : IGeometrySymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetEnableTexture,put=PutEnableTexture))
    VARIANT_BOOL EnableTexture;
    __declspec(property(get=GetEnableColor,put=PutEnableColor))
    VARIANT_BOOL EnableColor;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetEnableTexture ( );
    void PutEnableTexture (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableColor ( );
    void PutEnableColor (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_EnableTexture (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableTexture (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("397b609d-fdb7-43f9-8e6f-83f3e1092a45"))
IRenderModelPoint : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    IModelPointSymbolPtr Symbol;
    __declspec(property(get=GetPosition,put=PutPosition))
    IVector3Ptr Position;
    __declspec(property(get=GetMatrix,put=PutMatrix))
    SAFEARRAY * Matrix;
    __declspec(property(get=GetModelName))
    _bstr_t ModelName;

    //
    // Wrapper methods for error-handling
    //

    IModelPointSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct IModelPointSymbol * pVal );
    IVector3Ptr GetPosition ( );
    void PutPosition (
        struct IVector3 * pVal );
    SAFEARRAY * GetMatrix ( );
    void PutMatrix (
        SAFEARRAY * pVal );
    _bstr_t GetModelName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct IModelPointSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct IModelPointSymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IVector3 * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IVector3 * pVal ) = 0;
      virtual HRESULT __stdcall get_Matrix (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall put_Matrix (
        /*[in]*/ SAFEARRAY * pVal ) = 0;
      virtual HRESULT __stdcall get_ModelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b71725a5-dadd-4507-ab69-26f9c159d958"))
ICurveSymbol : IGeometrySymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetRepeatLength,put=PutRepeatLength))
    float RepeatLength;
    __declspec(property(get=GetImageName,put=PutImageName))
    _bstr_t ImageName;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetPattern,put=PutPattern))
    enum gviDashStyle Pattern;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    float GetWidth ( );
    void PutWidth (
        float pVal );
    float GetRepeatLength ( );
    void PutRepeatLength (
        float pVal );
    _bstr_t GetImageName ( );
    void PutImageName (
        _bstr_t pVal );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pVal );
    enum gviDashStyle GetPattern ( );
    void PutPattern (
        enum gviDashStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatLength (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatLength (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_ImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum gviDashStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum gviDashStyle pVal ) = 0;
};

struct __declspec(uuid("402a94f8-f287-44be-9852-283b61ba1141"))
IRenderPolyline : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetHeightStyle,put=PutHeightStyle))
    enum gviHeightStyle HeightStyle;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    ICurveSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ICurveSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ICurveSymbol * pVal );
    enum gviHeightStyle GetHeightStyle ( );
    void PutHeightStyle (
        enum gviHeightStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ICurveSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ICurveSymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_HeightStyle (
        /*[out,retval]*/ enum gviHeightStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightStyle (
        /*[in]*/ enum gviHeightStyle pVal ) = 0;
};

struct __declspec(uuid("76b9d240-3e22-4cdd-8df3-a88235f5aa2d"))
ISurfaceSymbol : IGeometrySymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetBoundarySymbol,put=PutBoundarySymbol))
    ICurveSymbolPtr BoundarySymbol;
    __declspec(property(get=GetEnableLight,put=PutEnableLight))
    VARIANT_BOOL EnableLight;
    __declspec(property(get=GetImageName,put=PutImageName))
    _bstr_t ImageName;
    __declspec(property(get=GetRepeatLengthU,put=PutRepeatLengthU))
    float RepeatLengthU;
    __declspec(property(get=GetRepeatLengthV,put=PutRepeatLengthV))
    float RepeatLengthV;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    ICurveSymbolPtr GetBoundarySymbol ( );
    void PutBoundarySymbol (
        struct ICurveSymbol * pVal );
    VARIANT_BOOL GetEnableLight ( );
    void PutEnableLight (
        VARIANT_BOOL pVal );
    _bstr_t GetImageName ( );
    void PutImageName (
        _bstr_t pVal );
    float GetRepeatLengthU ( );
    void PutRepeatLengthU (
        float pVal );
    float GetRepeatLengthV ( );
    void PutRepeatLengthV (
        float pVal );
    float GetRotation ( );
    void PutRotation (
        float pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BoundarySymbol (
        /*[out,retval]*/ struct ICurveSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_BoundarySymbol (
        /*[in]*/ struct ICurveSymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableLight (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLight (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatLengthU (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatLengthU (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatLengthV (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatLengthV (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float pVal ) = 0;
};

struct __declspec(uuid("20879432-ba26-4f04-984f-fffd82fe160c"))
IRenderPolygon : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetHeightStyle,put=PutHeightStyle))
    enum gviHeightStyle HeightStyle;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    ISurfaceSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ISurfaceSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ISurfaceSymbol * pVal );
    enum gviHeightStyle GetHeightStyle ( );
    void PutHeightStyle (
        enum gviHeightStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ISurfaceSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ISurfaceSymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_HeightStyle (
        /*[out,retval]*/ enum gviHeightStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightStyle (
        /*[in]*/ enum gviHeightStyle pVal ) = 0;
};

struct __declspec(uuid("1a8a249f-70df-4165-bcb2-146b77cc588a"))
IRenderTriMesh : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    ISurfaceSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ISurfaceSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ISurfaceSymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ISurfaceSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ISurfaceSymbol * pVal ) = 0;
};

struct __declspec(uuid("b0e7782a-ff51-4406-93fb-a4857bb87a6b"))
IRenderMultiTriMesh : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    ISurfaceSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ISurfaceSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ISurfaceSymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ISurfaceSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ISurfaceSymbol * pVal ) = 0;
};

struct __declspec(uuid("58fd4415-ce35-4229-aa64-b5c804db9d23"))
IPointSymbol : IGeometrySymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum gviPivotAlignment Alignment;

    //
    // Wrapper methods for error-handling
    //

    long GetSize ( );
    void PutSize (
        long pVal );
    enum gviPivotAlignment GetAlignment ( );
    void PutAlignment (
        enum gviPivotAlignment pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum gviPivotAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum gviPivotAlignment pVal ) = 0;
};

struct __declspec(uuid("20c91390-58f8-4b40-a393-de68812b45e6"))
IRenderMultiPoint : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    IPointSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    IPointSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct IPointSymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct IPointSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct IPointSymbol * pVal ) = 0;
};

struct __declspec(uuid("82301967-e47e-4f84-94f5-bcdd9f094bb9"))
ICameraTour : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCrsWKT,put=PutCrsWKT))
    _bstr_t CrsWKT;
    __declspec(property(get=GetSlideImageName,put=PutSlideImageName))
    _bstr_t SlideImageName;
    __declspec(property(get=GetTotalTime))
    double TotalTime;
    __declspec(property(get=GetTime,put=PutTime))
    double Time;
    __declspec(property(get=GetAutoRepeat,put=PutAutoRepeat))
    VARIANT_BOOL AutoRepeat;
    __declspec(property(get=GetWaypointsNumber))
    long WaypointsNumber;
    __declspec(property(get=GetIsExporting))
    VARIANT_BOOL IsExporting;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ClearWaypoints ( );
    HRESULT AddWaypoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT AddWaypoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT GetWaypoint (
        long Index,
        struct IVector3 * * Position,
        struct IEulerAngle * * Angle,
        double * Duration,
        enum gviCameraTourMode * Mode );
    HRESULT GetWaypoint2 (
        long Index,
        struct IPoint * * Position,
        struct IEulerAngle * * Angle,
        double * Duration,
        enum gviCameraTourMode * Mode );
    HRESULT DeleteWaypoint (
        long Index );
    HRESULT Play ( );
    HRESULT Pause ( );
    HRESULT Stop ( );
    double GetTotalTime ( );
    double GetTime ( );
    void PutTime (
        double pVal );
    VARIANT_BOOL GetAutoRepeat ( );
    void PutAutoRepeat (
        VARIANT_BOOL pVal );
    long GetWaypointsNumber ( );
    long GetIndex ( );
    void PutIndex (
        long pVal );
    _bstr_t AsXml ( );
    VARIANT_BOOL FromXml (
        _bstr_t XmlStringValue );
    VARIANT_BOOL ExportVideo (
        _bstr_t FilePath,
        long FPS );
    HRESULT CancelExport ( );
    VARIANT_BOOL GetIsExporting ( );
    HRESULT FromAse (
        _bstr_t File );
    HRESULT AddWaypointByMatrix (
        struct IMatrix * Mat,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT GetWaypointByMatrix (
        long Index,
        struct IMatrix * * Mat,
        double * Duration,
        enum gviCameraTourMode * Mode );
    HRESULT ModifyWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Duration,
        enum gviCameraTourMode Mode );
    HRESULT InsertWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Duration,
        enum gviCameraTourMode Mode );
    VARIANT_BOOL ExportFrameSequence (
        _bstr_t FilePath,
        long Width,
        long Height,
        long FPS );
    _bstr_t GetCrsWKT ( );
    void PutCrsWKT (
        _bstr_t pVal );
    VARIANT_BOOL ExportPanoramaFrameSequence (
        _bstr_t FilePath,
        long Width,
        long FPS );
    _bstr_t GetSlideImageName ( );
    void PutSlideImageName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ClearWaypoints ( ) = 0;
      virtual HRESULT __stdcall raw_AddWaypoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_AddWaypoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint (
        long Index,
        /*[out]*/ struct IVector3 * * Position,
        /*[out]*/ struct IEulerAngle * * Angle,
        /*[out]*/ double * Duration,
        /*[out]*/ enum gviCameraTourMode * Mode ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint2 (
        long Index,
        /*[out]*/ struct IPoint * * Position,
        /*[out]*/ struct IEulerAngle * * Angle,
        /*[out]*/ double * Duration,
        /*[out]*/ enum gviCameraTourMode * Mode ) = 0;
      virtual HRESULT __stdcall raw_DeleteWaypoint (
        long Index ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall get_TotalTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AutoRepeat (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRepeat (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WaypointsNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Index (
        long pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromXml (
        BSTR XmlStringValue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportVideo (
        BSTR FilePath,
        long FPS,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CancelExport ( ) = 0;
      virtual HRESULT __stdcall get_IsExporting (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromAse (
        BSTR File ) = 0;
      virtual HRESULT __stdcall raw_AddWaypointByMatrix (
        struct IMatrix * Mat,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_GetWaypointByMatrix (
        long Index,
        /*[out]*/ struct IMatrix * * Mat,
        /*[out]*/ double * Duration,
        /*[out]*/ enum gviCameraTourMode * Mode ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double Duration,
        enum gviCameraTourMode Mode ) = 0;
      virtual HRESULT __stdcall raw_ExportFrameSequence (
        BSTR FilePath,
        long Width,
        long Height,
        long FPS,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CrsWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrsWKT (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportPanoramaFrameSequence (
        BSTR FilePath,
        long Width,
        long FPS,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SlideImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlideImageName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("973d963d-16b3-49c0-9506-5bce4e4b40a2"))
IRenderPoint : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    IPointSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    IPointSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct IPointSymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct IPointSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct IPointSymbol * pVal ) = 0;
};

struct __declspec(uuid("62cbef52-6bde-498d-8f14-d9dfaa4067be"))
IMotionPath : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;
    __declspec(property(get=GetAutoRepeat,put=PutAutoRepeat))
    VARIANT_BOOL AutoRepeat;
    __declspec(property(get=GetTotalDuration))
    double TotalDuration;
    __declspec(property(get=GetWaypointsNumber))
    long WaypointsNumber;
    __declspec(property(get=GetCrsWKT,put=PutCrsWKT))
    _bstr_t CrsWKT;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddWaypoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When );
    HRESULT AddWaypoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When );
    HRESULT ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When );
    HRESULT ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When );
    HRESULT InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When );
    HRESULT InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When );
    HRESULT GetWaypoint (
        long Index,
        struct IVector3 * * Position,
        struct IEulerAngle * * Angle,
        struct IVector3 * * Scale,
        double * When );
    HRESULT GetWaypoint2 (
        long Index,
        struct IPoint * * Position,
        struct IEulerAngle * * Angle,
        struct IVector3 * * Scale,
        double * When );
    HRESULT DeleteWaypoint (
        long Index );
    HRESULT ClearWaypoints ( );
    HRESULT Play ( );
    HRESULT Pause ( );
    HRESULT Stop ( );
    double GetTime ( );
    void PutTime (
        double pVal );
    VARIANT_BOOL GetAutoRepeat ( );
    void PutAutoRepeat (
        VARIANT_BOOL pVal );
    long GetIndex ( );
    void PutIndex (
        long pVal );
    _bstr_t AsXml ( );
    VARIANT_BOOL FromXml (
        _bstr_t XmlStringValue );
    double GetTotalDuration ( );
    HRESULT AddWaypointByMatrix (
        struct IMatrix * Mat,
        double When );
    HRESULT GetWaypointByMatrix (
        long Index,
        struct IMatrix * * Mat,
        double * When );
    HRESULT ModifyWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double When );
    HRESULT InsertWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double When );
    long GetWaypointsNumber ( );
    _bstr_t GetCrsWKT ( );
    void PutCrsWKT (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddWaypoint (
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When ) = 0;
      virtual HRESULT __stdcall raw_AddWaypoint2 (
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        struct IEulerAngle * Angle,
        struct IVector3 * Scale,
        double When ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint (
        long Index,
        /*[out]*/ struct IVector3 * * Position,
        /*[out]*/ struct IEulerAngle * * Angle,
        /*[out]*/ struct IVector3 * * Scale,
        /*[out]*/ double * When ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint2 (
        long Index,
        /*[out]*/ struct IPoint * * Position,
        /*[out]*/ struct IEulerAngle * * Angle,
        /*[out]*/ struct IVector3 * * Scale,
        /*[out]*/ double * When ) = 0;
      virtual HRESULT __stdcall raw_DeleteWaypoint (
        long Index ) = 0;
      virtual HRESULT __stdcall raw_ClearWaypoints ( ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AutoRepeat (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRepeat (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Index (
        long pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromXml (
        BSTR XmlStringValue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_TotalDuration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddWaypointByMatrix (
        struct IMatrix * Mat,
        double When ) = 0;
      virtual HRESULT __stdcall raw_GetWaypointByMatrix (
        long Index,
        /*[out]*/ struct IMatrix * * Mat,
        /*[out]*/ double * When ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double When ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypointByMatrix (
        long Index,
        struct IMatrix * Mat,
        double When ) = 0;
      virtual HRESULT __stdcall get_WaypointsNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CrsWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrsWKT (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("61d7b480-85be-41d1-a4d7-4fc81fe76422"))
IParticleEffect : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetEmitterType))
    enum gviEmitterType EmitterType;
    __declspec(property(get=GetImageName,put=PutImageName))
    _bstr_t ImageName;
    __declspec(property(get=GetEmissionMinMoveSpeed,put=PutEmissionMinMoveSpeed))
    double EmissionMinMoveSpeed;
    __declspec(property(get=GetEmissionMaxMoveSpeed,put=PutEmissionMaxMoveSpeed))
    double EmissionMaxMoveSpeed;
    __declspec(property(get=GetEmissionMinRotationSpeed,put=PutEmissionMinRotationSpeed))
    double EmissionMinRotationSpeed;
    __declspec(property(get=GetEmissionMaxRotationSpeed,put=PutEmissionMaxRotationSpeed))
    double EmissionMaxRotationSpeed;
    __declspec(property(get=GetEmissionMinScaleSpeed,put=PutEmissionMinScaleSpeed))
    double EmissionMinScaleSpeed;
    __declspec(property(get=GetEmissionMaxScaleSpeed,put=PutEmissionMaxScaleSpeed))
    double EmissionMaxScaleSpeed;
    __declspec(property(get=GetEmissionMinAngle,put=PutEmissionMinAngle))
    double EmissionMinAngle;
    __declspec(property(get=GetEmissionMaxAngle,put=PutEmissionMaxAngle))
    double EmissionMaxAngle;
    __declspec(property(get=GetEmissionMinRate,put=PutEmissionMinRate))
    double EmissionMinRate;
    __declspec(property(get=GetEmissionMaxRate,put=PutEmissionMaxRate))
    double EmissionMaxRate;
    __declspec(property(get=GetEmissionMinParticleSize,put=PutEmissionMinParticleSize))
    double EmissionMinParticleSize;
    __declspec(property(get=GetEmissionMaxParticleSize,put=PutEmissionMaxParticleSize))
    double EmissionMaxParticleSize;
    __declspec(property(get=GetParticleAspectRatio,put=PutParticleAspectRatio))
    double ParticleAspectRatio;
    __declspec(property(get=GetParticleMinLifeTime,put=PutParticleMinLifeTime))
    double ParticleMinLifeTime;
    __declspec(property(get=GetParticleMaxLifeTime,put=PutParticleMaxLifeTime))
    double ParticleMaxLifeTime;
    __declspec(property(get=GetParticleBirthColor,put=PutParticleBirthColor))
    OLE_COLOR ParticleBirthColor;
    __declspec(property(get=GetParticleDeathColor,put=PutParticleDeathColor))
    OLE_COLOR ParticleDeathColor;
    __declspec(property(get=GetWindDirection,put=PutWindDirection))
    double WindDirection;
    __declspec(property(get=GetWindAcceleration,put=PutWindAcceleration))
    double WindAcceleration;
    __declspec(property(get=GetDamping,put=PutDamping))
    double Damping;
    __declspec(property(get=GetParticleBillboardType,put=PutParticleBillboardType))
    enum gviParticleBillboardType ParticleBillboardType;
    __declspec(property(get=GetVerticalAcceleration,put=PutVerticalAcceleration))
    double VerticalAcceleration;
    __declspec(property(get=GetEmissionDirectionEulerAngle,put=PutEmissionDirectionEulerAngle))
    IEulerAnglePtr EmissionDirectionEulerAngle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Start (
        double Duration );
    HRESULT Stop ( );
    HRESULT SetPointEmitter (
        struct IPoint * Position );
    HRESULT GetPointEmitter (
        struct IPoint * * Position );
    HRESULT SetBoxEmitter (
        struct IPoint * Position,
        double Width,
        double Height,
        double Depth );
    HRESULT GetBoxEmitter (
        struct IPoint * * Position,
        double * Width,
        double * Height,
        double * Depth );
    HRESULT SetCircleEmitter (
        struct IPoint * Position,
        double Radius );
    HRESULT GetCircleEmitter (
        struct IPoint * * Position,
        double * Radius );
    HRESULT SetTextureTileRange (
        long HTile,
        long VTile,
        long StartTile,
        long EndTile );
    HRESULT GetTextureTileRange (
        long * HTile,
        long * VTile,
        long * StartTile,
        long * EndTile );
    _bstr_t GetImageName ( );
    void PutImageName (
        _bstr_t pVal );
    double GetEmissionMinMoveSpeed ( );
    void PutEmissionMinMoveSpeed (
        double pVal );
    double GetEmissionMaxMoveSpeed ( );
    void PutEmissionMaxMoveSpeed (
        double pVal );
    double GetEmissionMinRotationSpeed ( );
    void PutEmissionMinRotationSpeed (
        double pVal );
    double GetEmissionMaxRotationSpeed ( );
    void PutEmissionMaxRotationSpeed (
        double pVal );
    double GetEmissionMinScaleSpeed ( );
    void PutEmissionMinScaleSpeed (
        double pVal );
    double GetEmissionMaxScaleSpeed ( );
    void PutEmissionMaxScaleSpeed (
        double pVal );
    double GetEmissionMinAngle ( );
    void PutEmissionMinAngle (
        double pVal );
    double GetEmissionMaxAngle ( );
    void PutEmissionMaxAngle (
        double pVal );
    double GetEmissionMinRate ( );
    void PutEmissionMinRate (
        double pVal );
    double GetEmissionMaxRate ( );
    void PutEmissionMaxRate (
        double pVal );
    double GetEmissionMinParticleSize ( );
    void PutEmissionMinParticleSize (
        double pVal );
    double GetEmissionMaxParticleSize ( );
    void PutEmissionMaxParticleSize (
        double pVal );
    double GetParticleAspectRatio ( );
    void PutParticleAspectRatio (
        double pVal );
    double GetParticleMinLifeTime ( );
    void PutParticleMinLifeTime (
        double pVal );
    double GetParticleMaxLifeTime ( );
    void PutParticleMaxLifeTime (
        double pVal );
    OLE_COLOR GetParticleBirthColor ( );
    void PutParticleBirthColor (
        OLE_COLOR pVal );
    OLE_COLOR GetParticleDeathColor ( );
    void PutParticleDeathColor (
        OLE_COLOR pVal );
    double GetWindDirection ( );
    void PutWindDirection (
        double pVal );
    double GetWindAcceleration ( );
    void PutWindAcceleration (
        double pVal );
    double GetDamping ( );
    void PutDamping (
        double pVal );
    enum gviParticleBillboardType GetParticleBillboardType ( );
    void PutParticleBillboardType (
        enum gviParticleBillboardType pVal );
    double GetVerticalAcceleration ( );
    void PutVerticalAcceleration (
        double pVal );
    IEulerAnglePtr GetEmissionDirectionEulerAngle ( );
    void PutEmissionDirectionEulerAngle (
        struct IEulerAngle * pVal );
    IPointPtr GetPosition ( );
    enum gviEmitterType GetEmitterType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Start (
        double Duration,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_SetPointEmitter (
        struct IPoint * Position ) = 0;
      virtual HRESULT __stdcall raw_GetPointEmitter (
        struct IPoint * * Position ) = 0;
      virtual HRESULT __stdcall raw_SetBoxEmitter (
        struct IPoint * Position,
        double Width,
        double Height,
        double Depth ) = 0;
      virtual HRESULT __stdcall raw_GetBoxEmitter (
        struct IPoint * * Position,
        double * Width,
        double * Height,
        double * Depth ) = 0;
      virtual HRESULT __stdcall raw_SetCircleEmitter (
        struct IPoint * Position,
        double Radius ) = 0;
      virtual HRESULT __stdcall raw_GetCircleEmitter (
        struct IPoint * * Position,
        double * Radius ) = 0;
      virtual HRESULT __stdcall raw_SetTextureTileRange (
        long HTile,
        long VTile,
        long StartTile,
        long EndTile ) = 0;
      virtual HRESULT __stdcall raw_GetTextureTileRange (
        /*[out]*/ long * HTile,
        /*[out]*/ long * VTile,
        /*[out]*/ long * StartTile,
        /*[out]*/ long * EndTile ) = 0;
      virtual HRESULT __stdcall get_ImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMinMoveSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMinMoveSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMaxMoveSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMaxMoveSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMinRotationSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMinRotationSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMaxRotationSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMaxRotationSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMinScaleSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMinScaleSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMaxScaleSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMaxScaleSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMinAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMinAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMaxAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMaxAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMinRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMinRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMaxRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMaxRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMinParticleSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMinParticleSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionMaxParticleSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionMaxParticleSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParticleAspectRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParticleAspectRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParticleMinLifeTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParticleMinLifeTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParticleMaxLifeTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParticleMaxLifeTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParticleBirthColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParticleBirthColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ParticleDeathColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParticleDeathColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_WindDirection (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WindDirection (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WindAcceleration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WindAcceleration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Damping (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Damping (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ParticleBillboardType (
        /*[out,retval]*/ enum gviParticleBillboardType * pVal ) = 0;
      virtual HRESULT __stdcall put_ParticleBillboardType (
        /*[in]*/ enum gviParticleBillboardType pVal ) = 0;
      virtual HRESULT __stdcall get_VerticalAcceleration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalAcceleration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionDirectionEulerAngle (
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionDirectionEulerAngle (
        /*[in]*/ struct IEulerAngle * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall get_EmitterType (
        /*[out,retval]*/ enum gviEmitterType * pVal ) = 0;
};

struct __declspec(uuid("04ed9c7e-f8a6-47ef-a363-a0832333ff7f"))
ITextAttribute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextSize,put=PutTextSize))
    long TextSize;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    OLE_COLOR TextColor;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    OLE_COLOR BackgroundColor;
    __declspec(property(get=GetMultilineJustification,put=PutMultilineJustification))
    enum gviMultilineJustification MultilineJustification;

    //
    // Wrapper methods for error-handling
    //

    long GetTextSize ( );
    void PutTextSize (
        long pVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline (
        VARIANT_BOOL pVal );
    OLE_COLOR GetTextColor ( );
    void PutTextColor (
        OLE_COLOR pVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pVal );
    _bstr_t GetFont ( );
    void PutFont (
        _bstr_t pVal );
    OLE_COLOR GetBackgroundColor ( );
    void PutBackgroundColor (
        OLE_COLOR pVal );
    enum gviMultilineJustification GetMultilineJustification ( );
    void PutMultilineJustification (
        enum gviMultilineJustification pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TextSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MultilineJustification (
        /*[out,retval]*/ enum gviMultilineJustification * pVal ) = 0;
      virtual HRESULT __stdcall put_MultilineJustification (
        /*[in]*/ enum gviMultilineJustification pVal ) = 0;
};

struct __declspec(uuid("b6943399-a824-4303-9fe6-fe3a8caea812"))
ITextSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextAttribute,put=PutTextAttribute))
    ITextAttributePtr TextAttribute;
    __declspec(property(get=GetVerticalOffset,put=PutVerticalOffset))
    double VerticalOffset;
    __declspec(property(get=GetDrawLine,put=PutDrawLine))
    VARIANT_BOOL DrawLine;
    __declspec(property(get=GetLineColor,put=PutLineColor))
    OLE_COLOR LineColor;
    __declspec(property(get=GetMinVisualDistance,put=PutMinVisualDistance))
    double MinVisualDistance;
    __declspec(property(get=GetMaxVisualDistance,put=PutMaxVisualDistance))
    double MaxVisualDistance;
    __declspec(property(get=GetPriority,put=PutPriority))
    long Priority;
    __declspec(property(get=GetPivotAlignment,put=PutPivotAlignment))
    enum gviPivotAlignment PivotAlignment;
    __declspec(property(get=GetMarginWidth,put=PutMarginWidth))
    long MarginWidth;
    __declspec(property(get=GetMarginHeight,put=PutMarginHeight))
    long MarginHeight;
    __declspec(property(get=GetLockMode,put=PutLockMode))
    enum gviLockMode LockMode;
    __declspec(property(get=GetMarginColor,put=PutMarginColor))
    OLE_COLOR MarginColor;

    //
    // Wrapper methods for error-handling
    //

    ITextAttributePtr GetTextAttribute ( );
    void PutTextAttribute (
        struct ITextAttribute * pVal );
    double GetVerticalOffset ( );
    void PutVerticalOffset (
        double pVal );
    VARIANT_BOOL GetDrawLine ( );
    void PutDrawLine (
        VARIANT_BOOL pVal );
    OLE_COLOR GetLineColor ( );
    void PutLineColor (
        OLE_COLOR pVal );
    double GetMinVisualDistance ( );
    void PutMinVisualDistance (
        double pVal );
    double GetMaxVisualDistance ( );
    void PutMaxVisualDistance (
        double pVal );
    long GetPriority ( );
    void PutPriority (
        long pVal );
    enum gviPivotAlignment GetPivotAlignment ( );
    void PutPivotAlignment (
        enum gviPivotAlignment pVal );
    long GetMarginWidth ( );
    void PutMarginWidth (
        long pVal );
    long GetMarginHeight ( );
    void PutMarginHeight (
        long pVal );
    enum gviLockMode GetLockMode ( );
    void PutLockMode (
        enum gviLockMode pVal );
    OLE_COLOR GetMarginColor ( );
    void PutMarginColor (
        OLE_COLOR pVal );
    _bstr_t AsXml ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextAttribute (
        /*[out,retval]*/ struct ITextAttribute * * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAttribute (
        /*[in]*/ struct ITextAttribute * pVal ) = 0;
      virtual HRESULT __stdcall get_VerticalOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DrawLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MinVisualDistance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinVisualDistance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxVisualDistance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxVisualDistance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PivotAlignment (
        /*[out,retval]*/ enum gviPivotAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_PivotAlignment (
        /*[in]*/ enum gviPivotAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_MarginWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MarginWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MarginHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MarginHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LockMode (
        /*[out,retval]*/ enum gviLockMode * pVal ) = 0;
      virtual HRESULT __stdcall put_LockMode (
        /*[in]*/ enum gviLockMode pVal ) = 0;
      virtual HRESULT __stdcall get_MarginColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarginColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("60044f43-ab72-4c89-af93-3504e043ccfd"))
ILabel : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPointPtr Position;
    __declspec(property(get=GetTextSymbol,put=PutTextSymbol))
    ITextSymbolPtr TextSymbol;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    IPointPtr GetPosition ( );
    void PutPosition (
        struct IPoint * pVal );
    ITextSymbolPtr GetTextSymbol ( );
    void PutTextSymbol (
        struct ITextSymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPoint * pVal ) = 0;
      virtual HRESULT __stdcall get_TextSymbol (
        /*[out,retval]*/ struct ITextSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_TextSymbol (
        /*[in]*/ struct ITextSymbol * pVal ) = 0;
};

struct __declspec(uuid("5a733f77-4ecb-4eb4-945d-d03f2f8c4843"))
ITableLabel : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    float BorderWidth;
    __declspec(property(get=GetTitleText,put=PutTitleText))
    _bstr_t TitleText;
    __declspec(property(get=GetTitleBackgroundColor,put=PutTitleBackgroundColor))
    OLE_COLOR TitleBackgroundColor;
    __declspec(property(get=GetTitleTextAttribute,put=PutTitleTextAttribute))
    ITextAttributePtr TitleTextAttribute;
    __declspec(property(get=GetTableBackgroundColor,put=PutTableBackgroundColor))
    OLE_COLOR TableBackgroundColor;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPointPtr Position;
    __declspec(property(get=GetRowCount))
    long RowCount;
    __declspec(property(get=GetColumnCount))
    long ColumnCount;
    __declspec(property(get=GetBackgroundImageName,put=PutBackgroundImageName))
    _bstr_t BackgroundImageName;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pVal );
    float GetBorderWidth ( );
    void PutBorderWidth (
        float pVal );
    _bstr_t GetTitleText ( );
    void PutTitleText (
        _bstr_t pVal );
    OLE_COLOR GetTitleBackgroundColor ( );
    void PutTitleBackgroundColor (
        OLE_COLOR pVal );
    ITextAttributePtr GetTitleTextAttribute ( );
    void PutTitleTextAttribute (
        struct ITextAttribute * pVal );
    OLE_COLOR GetTableBackgroundColor ( );
    void PutTableBackgroundColor (
        OLE_COLOR pVal );
    ITextAttributePtr GetColumnTextAttribute (
        long Index );
    HRESULT SetColumnTextAttribute (
        long Index,
        struct ITextAttribute * newVal );
    HRESULT SetColumnWidth (
        long Index,
        long Width );
    long GetColumnWidth (
        long Index );
    HRESULT SetRecord (
        long Row,
        long Col,
        _bstr_t Record );
    _bstr_t GetRecord (
        long Row,
        long Col );
    IPointPtr GetPosition ( );
    void PutPosition (
        struct IPoint * pVal );
    long GetRowCount ( );
    long GetColumnCount ( );
    _bstr_t GetBackgroundImageName ( );
    void PutBackgroundImageName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_TitleText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleBackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleBackgroundColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TitleTextAttribute (
        /*[out,retval]*/ struct ITextAttribute * * pVal ) = 0;
      virtual HRESULT __stdcall put_TitleTextAttribute (
        /*[in]*/ struct ITextAttribute * pVal ) = 0;
      virtual HRESULT __stdcall get_TableBackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TableBackgroundColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetColumnTextAttribute (
        long Index,
        /*[out,retval]*/ struct ITextAttribute * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetColumnTextAttribute (
        long Index,
        /*[in]*/ struct ITextAttribute * newVal ) = 0;
      virtual HRESULT __stdcall raw_SetColumnWidth (
        long Index,
        long Width ) = 0;
      virtual HRESULT __stdcall raw_GetColumnWidth (
        long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRecord (
        long Row,
        long Col,
        BSTR Record ) = 0;
      virtual HRESULT __stdcall raw_GetRecord (
        long Row,
        long Col,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPoint * pVal ) = 0;
      virtual HRESULT __stdcall get_RowCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundImageName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b85304e7-fba1-46cb-83f6-1423d743fe28"))
ISkinnedMesh : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetModelPoint,put=PutModelPoint))
    IModelPointPtr ModelPoint;
    __declspec(property(get=GetAnimationCount))
    unsigned long AnimationCount;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLoop ( );
    void PutLoop (
        VARIANT_BOOL pVal );
    double GetDuration ( );
    void PutDuration (
        double pVal );
    HRESULT Play ( );
    HRESULT Stop ( );
    HRESULT Pause ( );
    IModelPointPtr GetModelPoint ( );
    void PutModelPoint (
        struct IModelPoint * pVal );
    unsigned long GetAnimationCount ( );
    unsigned long GetAnimationIndex ( );
    void PutAnimationIndex (
        unsigned long pVal );
    VARIANT_BOOL ClampAnimation (
        double StartPercentage,
        double EndPercentage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Loop (
        VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        double pVal ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall get_ModelPoint (
        /*[out,retval]*/ struct IModelPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelPoint (
        /*[in]*/ struct IModelPoint * pVal ) = 0;
      virtual HRESULT __stdcall get_AnimationCount (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall get_AnimationIndex (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimationIndex (
        unsigned long pVal ) = 0;
      virtual HRESULT __stdcall raw_ClampAnimation (
        double StartPercentage,
        double EndPercentage,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("f5a91bc9-bf64-494f-9af1-831ffdcb7ecd"))
IRenderMultiPolyline : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetHeightStyle,put=PutHeightStyle))
    enum gviHeightStyle HeightStyle;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    ICurveSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ICurveSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ICurveSymbol * pVal );
    enum gviHeightStyle GetHeightStyle ( );
    void PutHeightStyle (
        enum gviHeightStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ICurveSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ICurveSymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_HeightStyle (
        /*[out,retval]*/ enum gviHeightStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightStyle (
        /*[in]*/ enum gviHeightStyle pVal ) = 0;
};

struct __declspec(uuid("137a6c4b-8234-496f-ae2b-deb431d0a859"))
IRenderMultiPolygon : IRenderGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetHeightStyle,put=PutHeightStyle))
    enum gviHeightStyle HeightStyle;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    ISurfaceSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ISurfaceSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ISurfaceSymbol * pVal );
    enum gviHeightStyle GetHeightStyle ( );
    void PutHeightStyle (
        enum gviHeightStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ISurfaceSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ISurfaceSymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_HeightStyle (
        /*[out,retval]*/ enum gviHeightStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightStyle (
        /*[in]*/ enum gviHeightStyle pVal ) = 0;
};

struct __declspec(uuid("a4639595-afed-4bee-8833-288757ad7620"))
IProjectTree : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNotInTreeID))
    GUID NotInTreeID;
    __declspec(property(get=GetRootID))
    GUID RootID;
    __declspec(property(get=GetShowSlide,put=PutShowSlide))
    VARIANT_BOOL ShowSlide;

    //
    // Wrapper methods for error-handling
    //

    GUID GetNotInTreeID ( );
    GUID GetRootID ( );
    GUID CreateGroup (
        _bstr_t GroupName,
        GUID ParentGroupID );
    GUID CreateLockedGroup (
        _bstr_t GroupName,
        GUID ParentGroupID );
    HRESULT DeleteItem (
        GUID Id );
    GUID FindItem (
        _bstr_t Path );
    _bstr_t GetItemName (
        GUID Id );
    GUID GetNextItem (
        GUID Id,
        long Code );
    long GetVisibility (
        GUID Id );
    VARIANT_BOOL IsGroup (
        GUID Id );
    VARIANT_BOOL IsLocked (
        GUID Id );
    GUID LoadCepLayer (
        _bstr_t CepURL,
        GUID ParentGroupID );
    HRESULT LockGroup (
        GUID GroupId,
        VARIANT_BOOL Lock );
    HRESULT RenameGroup (
        GUID GroupId,
        _bstr_t GroupName );
    _bstr_t SaveAsCep (
        _bstr_t CepName,
        GUID GroupId );
    HRESULT SetParent (
        GUID Id,
        GUID GroupId,
        long Index );
    HRESULT SetVisibility (
        GUID Id,
        unsigned char VisibleMask );
    HRESULT SetClientData (
        GUID Id,
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetClientData (
        GUID Id,
        _bstr_t Name );
    VARIANT_BOOL GetShowSlide ( );
    void PutShowSlide (
        VARIANT_BOOL pVal );
    HRESULT SetGroupSlideImageName (
        GUID GroupId,
        _bstr_t ImageName );
    _bstr_t GetGroupSlideImageName (
        GUID GroupId );
    GUID GetSlideRootGroup ( );
    void PutSlideRootGroup (
        GUID pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NotInTreeID (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall get_RootID (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateGroup (
        BSTR GroupName,
        GUID ParentGroupID,
        /*[out,retval]*/ GUID * GroupId ) = 0;
      virtual HRESULT __stdcall raw_CreateLockedGroup (
        BSTR GroupName,
        GUID ParentGroupID,
        /*[out,retval]*/ GUID * GroupId ) = 0;
      virtual HRESULT __stdcall raw_DeleteItem (
        GUID Id ) = 0;
      virtual HRESULT __stdcall raw_FindItem (
        BSTR Path,
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetItemName (
        GUID Id,
        /*[out,retval]*/ BSTR * ItemText ) = 0;
      virtual HRESULT __stdcall raw_GetNextItem (
        GUID Id,
        long Code,
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVisibility (
        GUID Id,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsGroup (
        GUID Id,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsLocked (
        GUID Id,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadCepLayer (
        BSTR CepURL,
        GUID ParentGroupID,
        /*[out,retval]*/ GUID * GroupId ) = 0;
      virtual HRESULT __stdcall raw_LockGroup (
        GUID GroupId,
        VARIANT_BOOL Lock ) = 0;
      virtual HRESULT __stdcall raw_RenameGroup (
        GUID GroupId,
        BSTR GroupName ) = 0;
      virtual HRESULT __stdcall raw_SaveAsCep (
        BSTR CepName,
        GUID GroupId,
        /*[out,retval]*/ BSTR * CepFullPath ) = 0;
      virtual HRESULT __stdcall raw_SetParent (
        GUID Id,
        GUID GroupId,
        long Index ) = 0;
      virtual HRESULT __stdcall raw_SetVisibility (
        GUID Id,
        unsigned char VisibleMask ) = 0;
      virtual HRESULT __stdcall raw_SetClientData (
        GUID Id,
        BSTR Name,
        BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetClientData (
        GUID Id,
        BSTR Name,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ShowSlide (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowSlide (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetGroupSlideImageName (
        GUID GroupId,
        BSTR ImageName ) = 0;
      virtual HRESULT __stdcall raw_GetGroupSlideImageName (
        GUID GroupId,
        /*[out,retval]*/ BSTR * ImageName ) = 0;
      virtual HRESULT __stdcall get_SlideRootGroup (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall put_SlideRootGroup (
        /*[in]*/ GUID pVal ) = 0;
};

struct __declspec(uuid("3fb878f8-1cfa-4b5b-b02b-24592480d31a"))
IRasterSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRedBand,put=PutRedBand))
    long RedBand;
    __declspec(property(get=GetGreenBand,put=PutGreenBand))
    long GreenBand;
    __declspec(property(get=GetBlueBand,put=PutBlueBand))
    long BlueBand;
    __declspec(property(get=GetAlphaBand,put=PutAlphaBand))
    long AlphaBand;
    __declspec(property(get=GetRedEnabled,put=PutRedEnabled))
    VARIANT_BOOL RedEnabled;
    __declspec(property(get=GetGreenEnable,put=PutGreenEnable))
    VARIANT_BOOL GreenEnable;
    __declspec(property(get=GetBlueEnabled,put=PutBlueEnabled))
    VARIANT_BOOL BlueEnabled;
    __declspec(property(get=GetAlphaEnabled,put=PutAlphaEnabled))
    VARIANT_BOOL AlphaEnabled;
    __declspec(property(get=GetBackgroundEnabled,put=PutBackgroundEnabled))
    VARIANT_BOOL BackgroundEnabled;
    __declspec(property(get=GetBackgroundKey,put=PutBackgroundKey))
    OLE_COLOR BackgroundKey;
    __declspec(property(get=GetBackgroundValue,put=PutBackgroundValue))
    OLE_COLOR BackgroundValue;

    //
    // Wrapper methods for error-handling
    //

    long GetRedBand ( );
    void PutRedBand (
        long pVal );
    long GetGreenBand ( );
    void PutGreenBand (
        long pVal );
    long GetBlueBand ( );
    void PutBlueBand (
        long pVal );
    long GetAlphaBand ( );
    void PutAlphaBand (
        long pVal );
    VARIANT_BOOL GetRedEnabled ( );
    void PutRedEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGreenEnable ( );
    void PutGreenEnable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBlueEnabled ( );
    void PutBlueEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAlphaEnabled ( );
    void PutAlphaEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBackgroundEnabled ( );
    void PutBackgroundEnabled (
        VARIANT_BOOL pVal );
    OLE_COLOR GetBackgroundKey ( );
    void PutBackgroundKey (
        OLE_COLOR pVal );
    OLE_COLOR GetBackgroundValue ( );
    void PutBackgroundValue (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RedBand (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RedBand (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_GreenBand (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GreenBand (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BlueBand (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BlueBand (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AlphaBand (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AlphaBand (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RedEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RedEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GreenEnable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GreenEnable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BlueEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BlueEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AlphaEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlphaEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundKey (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundKey (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundValue (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundValue (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("ca6cb811-34ae-427a-b3a8-e463dd4d2c77"))
IImageryLayer : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetImageWidth))
    long ImageWidth;
    __declspec(property(get=GetImageHeight))
    long ImageHeight;
    __declspec(property(get=GetConnectionString))
    _bstr_t ConnectionString;
    __declspec(property(get=GetDrawOrder,put=PutDrawOrder))
    double DrawOrder;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    double Opacity;
    __declspec(property(get=GetBandCount))
    long BandCount;

    //
    // Wrapper methods for error-handling
    //

    long GetImageWidth ( );
    long GetImageHeight ( );
    _bstr_t GetWKT ( );
    VARIANT_BOOL SetWKT (
        _bstr_t newVal );
    _bstr_t GetConnectionString ( );
    IRasterSymbolPtr GetRasterSymbol ( );
    HRESULT SetRasterSymbol (
        struct IRasterSymbol * newVal );
    double GetDrawOrder ( );
    void PutDrawOrder (
        double pVal );
    double GetOpacity ( );
    void PutOpacity (
        double pVal );
    long GetBandCount ( );
    VARIANT_BOOL Valid ( );
    HRESULT GetExtent (
        double * Left,
        double * Right,
        double * Bottom,
        double * Top );
    HRESULT GetResolution (
        double * ResolutionX,
        double * ResolutionY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImageWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetWKT (
        /*[in]*/ BSTR newVal,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRasterSymbol (
        /*[out,retval]*/ struct IRasterSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRasterSymbol (
        /*[in]*/ struct IRasterSymbol * newVal ) = 0;
      virtual HRESULT __stdcall get_DrawOrder (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawOrder (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BandCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Valid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtent (
        /*[out]*/ double * Left,
        /*[out]*/ double * Right,
        /*[out]*/ double * Bottom,
        /*[out]*/ double * Top ) = 0;
      virtual HRESULT __stdcall raw_GetResolution (
        /*[out]*/ double * ResolutionX,
        /*[out]*/ double * ResolutionY ) = 0;
};

struct __declspec(uuid("061d4af5-7aa4-4c53-a78e-3c2c45af4a03"))
ITerrainHole : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawOrder,put=PutDrawOrder))
    long DrawOrder;

    //
    // Wrapper methods for error-handling
    //

    IPolygonPtr GetPolygon ( );
    HRESULT SetPolygon (
        struct IPolygon * newVal );
    long GetDrawOrder ( );
    void PutDrawOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPolygon (
        /*[out,retval]*/ struct IPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPolygon (
        struct IPolygon * newVal ) = 0;
      virtual HRESULT __stdcall get_DrawOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("6094fcc3-7826-49e6-b842-3fe4472cf4a2"))
I3DTileHole : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawOrder,put=PutDrawOrder))
    long DrawOrder;

    //
    // Wrapper methods for error-handling
    //

    IPolygonPtr GetPolygon ( );
    HRESULT SetPolygon (
        struct IPolygon * newVal );
    long GetDrawOrder ( );
    void PutDrawOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPolygon (
        /*[out,retval]*/ struct IPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPolygon (
        struct IPolygon * newVal ) = 0;
      virtual HRESULT __stdcall get_DrawOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("2b0b25fe-622f-4e36-8fbb-77ad2482b1a1"))
I3DTileLayer : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetRenderParams,put=PutRenderParams))
    IPropertySetPtr RenderParams;
    __declspec(property(get=GetConnectionInfo))
    _bstr_t ConnectionInfo;

    //
    // Wrapper methods for error-handling
    //

    IPropertySetPtr GetRenderParams ( );
    void PutRenderParams (
        struct IPropertySet * pVal );
    _bstr_t GetConnectionInfo ( );
    _bstr_t GetWKT ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RenderParams (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall put_RenderParams (
        /*[in]*/ struct IPropertySet * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionInfo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("8eabfadf-becc-431e-bfe0-9b2771d65383"))
IOverlayLabel : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    ITextAttributePtr TextStyle;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum gviPivotAlignment Alignment;
    __declspec(property(get=GetImageName,put=PutImageName))
    _bstr_t ImageName;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    ITextAttributePtr GetTextStyle ( );
    void PutTextStyle (
        struct ITextAttribute * pVal );
    enum gviPivotAlignment GetAlignment ( );
    void PutAlignment (
        enum gviPivotAlignment pVal );
    _bstr_t GetImageName ( );
    void PutImageName (
        _bstr_t pVal );
    HRESULT SetX (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio );
    HRESULT SetY (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio );
    HRESULT SetWidth (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio );
    HRESULT SetHeight (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio );
    long GetX ( );
    long GetY ( );
    long GetWidth ( );
    long GetHeight ( );
    float GetRotation ( );
    void PutRotation (
        float pVal );
    float GetDepth ( );
    void PutDepth (
        float pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ struct ITextAttribute * * pVal ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ struct ITextAttribute * pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum gviPivotAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum gviPivotAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_ImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_SetX (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio ) = 0;
      virtual HRESULT __stdcall raw_SetY (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio ) = 0;
      virtual HRESULT __stdcall raw_SetWidth (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio ) = 0;
      virtual HRESULT __stdcall raw_SetHeight (
        long Offset,
        float WindowWidthRatio,
        float WindowHeightRatio ) = 0;
      virtual HRESULT __stdcall raw_GetX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float pVal ) = 0;
};

struct __declspec(uuid("a9283339-0bc9-4fae-8b1a-87604741cb68"))
ITerrainVideo : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    IPointPtr Position;
    __declspec(property(get=GetAngle,put=PutAngle))
    IEulerAnglePtr Angle;
    __declspec(property(get=GetFarClip,put=PutFarClip))
    double FarClip;
    __declspec(property(get=GetFieldOfView,put=PutFieldOfView))
    double FieldOfView;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;
    __declspec(property(get=GetShowProjector,put=PutShowProjector))
    VARIANT_BOOL ShowProjector;
    __declspec(property(get=GetShowProjectionLines,put=PutShowProjectionLines))
    VARIANT_BOOL ShowProjectionLines;
    __declspec(property(get=GetVideoFileName,put=PutVideoFileName))
    _bstr_t VideoFileName;
    __declspec(property(get=GetVideoLength))
    double VideoLength;
    __declspec(property(get=GetVideoOpacity,put=PutVideoOpacity))
    double VideoOpacity;
    __declspec(property(get=GetVideoPosition,put=PutVideoPosition))
    double VideoPosition;
    __declspec(property(get=GetPlayStatus))
    long PlayStatus;
    __declspec(property(get=GetCanSeek))
    VARIANT_BOOL CanSeek;
    __declspec(property(get=GetPlayVideoOnStartup,put=PutPlayVideoOnStartup))
    VARIANT_BOOL PlayVideoOnStartup;
    __declspec(property(get=GetPlaybackRate,put=PutPlaybackRate))
    double PlaybackRate;
    __declspec(property(get=GetPlayLoop,put=PutPlayLoop))
    VARIANT_BOOL PlayLoop;
    __declspec(property(get=GetIcon,put=PutIcon))
    _bstr_t Icon;

    //
    // Wrapper methods for error-handling
    //

    IPointPtr GetPosition ( );
    void PutPosition (
        struct IPoint * pVal );
    IEulerAnglePtr GetAngle ( );
    void PutAngle (
        struct IEulerAngle * pVal );
    double GetFarClip ( );
    void PutFarClip (
        double pVal );
    double GetFieldOfView ( );
    void PutFieldOfView (
        double pVal );
    double GetAspectRatio ( );
    void PutAspectRatio (
        double pVal );
    VARIANT_BOOL GetShowProjector ( );
    void PutShowProjector (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowProjectionLines ( );
    void PutShowProjectionLines (
        VARIANT_BOOL pVal );
    _bstr_t GetVideoFileName ( );
    void PutVideoFileName (
        _bstr_t pVal );
    double GetVideoLength ( );
    double GetVideoOpacity ( );
    void PutVideoOpacity (
        double pVal );
    double GetVideoPosition ( );
    void PutVideoPosition (
        double pVal );
    long GetPlayStatus ( );
    VARIANT_BOOL GetCanSeek ( );
    VARIANT_BOOL GetPlayVideoOnStartup ( );
    void PutPlayVideoOnStartup (
        VARIANT_BOOL pVal );
    double GetPlaybackRate ( );
    void PutPlaybackRate (
        double pVal );
    VARIANT_BOOL GetPlayLoop ( );
    void PutPlayLoop (
        VARIANT_BOOL pVal );
    _bstr_t GetIcon ( );
    void PutIcon (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPoint * pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ struct IEulerAngle * pVal ) = 0;
      virtual HRESULT __stdcall get_FarClip (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FarClip (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfView (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AspectRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AspectRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShowProjector (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowProjector (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowProjectionLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowProjectionLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VideoFileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VideoFileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VideoLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_VideoOpacity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VideoOpacity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VideoPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VideoPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlayStatus (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CanSeek (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PlayVideoOnStartup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PlayVideoOnStartup (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PlaybackRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaybackRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PlayLoop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PlayLoop (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Icon (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ff77b913-3b1d-47f5-9ffe-1f4acf0c918b"))
IViewshed : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    IPointPtr Position;
    __declspec(property(get=GetAngle,put=PutAngle))
    IEulerAnglePtr Angle;
    __declspec(property(get=GetFarClip,put=PutFarClip))
    double FarClip;
    __declspec(property(get=GetFieldOfView,put=PutFieldOfView))
    double FieldOfView;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;
    __declspec(property(get=GetShowProjector,put=PutShowProjector))
    VARIANT_BOOL ShowProjector;
    __declspec(property(get=GetShowProjectionLines,put=PutShowProjectionLines))
    VARIANT_BOOL ShowProjectionLines;
    __declspec(property(get=GetIcon,put=PutIcon))
    _bstr_t Icon;

    //
    // Wrapper methods for error-handling
    //

    IPointPtr GetPosition ( );
    void PutPosition (
        struct IPoint * pVal );
    IEulerAnglePtr GetAngle ( );
    void PutAngle (
        struct IEulerAngle * pVal );
    double GetFarClip ( );
    void PutFarClip (
        double pVal );
    double GetFieldOfView ( );
    void PutFieldOfView (
        double pVal );
    double GetAspectRatio ( );
    void PutAspectRatio (
        double pVal );
    VARIANT_BOOL GetShowProjector ( );
    void PutShowProjector (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowProjectionLines ( );
    void PutShowProjectionLines (
        VARIANT_BOOL pVal );
    _bstr_t GetIcon ( );
    void PutIcon (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPoint * pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ struct IEulerAngle * pVal ) = 0;
      virtual HRESULT __stdcall get_FarClip (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FarClip (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldOfView (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AspectRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AspectRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShowProjector (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowProjector (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowProjectionLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowProjectionLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Icon (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("0801bc9f-ee2d-4894-80c1-74f8ee6dbc50"))
IRenderArrow : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum gviArrowType ArrowType;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    ISurfaceSymbolPtr Symbol;
    __declspec(property(get=GetHeadHeight,put=PutHeadHeight))
    double HeadHeight;
    __declspec(property(get=GetBottomWidth,put=PutBottomWidth))
    double BottomWidth;
    __declspec(property(get=GetWingAngle,put=PutWingAngle))
    double WingAngle;
    __declspec(property(get=GetWingLength,put=PutWingLength))
    double WingLength;
    __declspec(property(get=GetWingBottomLength,put=PutWingBottomLength))
    double WingBottomLength;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    double Tolerance;
    __declspec(property(get=GetChordHeight,put=PutChordHeight))
    double ChordHeight;
    __declspec(property(get=GetDualArrowFollow,put=PutDualArrowFollow))
    VARIANT_BOOL DualArrowFollow;

    //
    // Wrapper methods for error-handling
    //

    enum gviArrowType GetArrowType ( );
    void PutArrowType (
        enum gviArrowType pVal );
    ISurfaceSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ISurfaceSymbol * pVal );
    double GetHeadHeight ( );
    void PutHeadHeight (
        double pVal );
    double GetBottomWidth ( );
    void PutBottomWidth (
        double pVal );
    double GetWingAngle ( );
    void PutWingAngle (
        double pVal );
    double GetWingLength ( );
    void PutWingLength (
        double pVal );
    double GetWingBottomLength ( );
    void PutWingBottomLength (
        double pVal );
    double GetTolerance ( );
    void PutTolerance (
        double pVal );
    double GetChordHeight ( );
    void PutChordHeight (
        double pVal );
    VARIANT_BOOL GetDualArrowFollow ( );
    void PutDualArrowFollow (
        VARIANT_BOOL pVal );
    HRESULT AddPoint (
        struct IPoint * newVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum gviArrowType * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum gviArrowType pVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ISurfaceSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ISurfaceSymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_HeadHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeadHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BottomWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WingAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WingAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WingLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WingLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WingBottomLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WingBottomLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ChordHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ChordHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DualArrowFollow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DualArrowFollow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        struct IPoint * newVal ) = 0;
};

struct __declspec(uuid("398b390c-53e0-482c-b7f7-0ed75ed8934c"))
IDynamicObject : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoRepeat,put=PutAutoRepeat))
    VARIANT_BOOL AutoRepeat;
    __declspec(property(get=GetCrsWKT,put=PutCrsWKT))
    _bstr_t CrsWKT;
    __declspec(property(get=GetWaypointsNumber))
    long WaypointsNumber;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddWaypoint (
        struct IVector3 * Position,
        double Speed );
    VARIANT_BOOL AddWaypoint2 (
        struct IPoint * Position,
        double Speed );
    _bstr_t AsXml ( );
    HRESULT ClearWaypoints ( );
    VARIANT_BOOL DeleteWaypoint (
        long Index );
    VARIANT_BOOL FromXml (
        _bstr_t XmlStringValue );
    VARIANT_BOOL GetWaypoint (
        long Index,
        struct IVector3 * * Position,
        double * Speed );
    VARIANT_BOOL GetWaypoint2 (
        long Index,
        struct IPoint * * Position,
        double * Speed );
    VARIANT_BOOL ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        double Speed );
    VARIANT_BOOL ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        double Speed );
    VARIANT_BOOL InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        double Speed );
    VARIANT_BOOL InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        double Speed );
    HRESULT Play ( );
    HRESULT Stop ( );
    HRESULT Pause ( );
    VARIANT_BOOL GetAutoRepeat ( );
    void PutAutoRepeat (
        VARIANT_BOOL pVal );
    _bstr_t GetCrsWKT ( );
    void PutCrsWKT (
        _bstr_t pVal );
    long GetIndex ( );
    void PutIndex (
        long pVal );
    long GetWaypointsNumber ( );
    double GetTurnSpeed ( );
    void PutTurnSpeed (
        double pVal );
    enum gviDynamicMotionStyle GetMotionStyle ( );
    void PutMotionStyle (
        enum gviDynamicMotionStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddWaypoint (
        struct IVector3 * Position,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddWaypoint2 (
        struct IPoint * Position,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AsXml (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearWaypoints ( ) = 0;
      virtual HRESULT __stdcall raw_DeleteWaypoint (
        long Index,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromXml (
        BSTR XmlStringValue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint (
        long Index,
        /*[out]*/ struct IVector3 * * Position,
        /*[out]*/ double * Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWaypoint2 (
        long Index,
        /*[out]*/ struct IPoint * * Position,
        /*[out]*/ double * Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint (
        long Index,
        struct IVector3 * Position,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyWaypoint2 (
        long Index,
        struct IPoint * Position,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint (
        long Index,
        struct IVector3 * Position,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertWaypoint2 (
        long Index,
        struct IPoint * Position,
        double Speed,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall get_AutoRepeat (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRepeat (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CrsWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CrsWKT (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Index (
        long pVal ) = 0;
      virtual HRESULT __stdcall get_WaypointsNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_TurnSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TurnSpeed (
        double pVal ) = 0;
      virtual HRESULT __stdcall get_MotionStyle (
        /*[out,retval]*/ enum gviDynamicMotionStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_MotionStyle (
        enum gviDynamicMotionStyle pVal ) = 0;
};

struct __declspec(uuid("3459a93b-f618-47fc-96fa-a0fbf51f1a26"))
ITerrainModifier : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetElevationBehavior,put=PutElevationBehavior))
    enum gviElevationBehaviorMode ElevationBehavior;
    __declspec(property(get=GetDrawOrder,put=PutDrawOrder))
    long DrawOrder;

    //
    // Wrapper methods for error-handling
    //

    IPolygonPtr GetPolygon ( );
    HRESULT SetPolygon (
        struct IPolygon * newVal );
    enum gviElevationBehaviorMode GetElevationBehavior ( );
    void PutElevationBehavior (
        enum gviElevationBehaviorMode pVal );
    long GetDrawOrder ( );
    void PutDrawOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPolygon (
        /*[out,retval]*/ struct IPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPolygon (
        struct IPolygon * newVal ) = 0;
      virtual HRESULT __stdcall get_ElevationBehavior (
        /*[out,retval]*/ enum gviElevationBehaviorMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ElevationBehavior (
        /*[in]*/ enum gviElevationBehaviorMode pVal ) = 0;
      virtual HRESULT __stdcall get_DrawOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("c445ce10-b773-4c8f-93c3-ddd2224d1f22"))
IRenderPOI : IRenderGeometry
{};

struct __declspec(uuid("3abd2631-5dd2-4dd9-a846-c47b03bf5363"))
IWalkGround : IRObject
{};

struct __declspec(uuid("f54f74a1-13df-4f77-a237-edfa613b6d0c"))
IPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetHeading,put=PutHeading))
    double Heading;
    __declspec(property(get=GetTilt,put=PutTilt))
    double Tilt;
    __declspec(property(get=GetRoll,put=PutRoll))
    double Roll;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetCartesian,put=PutCartesian))
    VARIANT_BOOL Cartesian;
    __declspec(property(get=GetAltitudeType,put=PutAltitudeType))
    enum gviAltitudeType AltitudeType;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetHeading ( );
    void PutHeading (
        double pVal );
    double GetTilt ( );
    void PutTilt (
        double pVal );
    double GetRoll ( );
    void PutRoll (
        double pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    VARIANT_BOOL GetCartesian ( );
    void PutCartesian (
        VARIANT_BOOL pVal );
    enum gviAltitudeType GetAltitudeType ( );
    void PutAltitudeType (
        enum gviAltitudeType pVal );
    HRESULT Init (
        double X,
        double Y,
        double Altitude,
        double Heading,
        double Tilt,
        double Roll,
        enum gviAltitudeType AltitudeType );
    double GetDistance ( );
    void PutDistance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Heading (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Heading (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Tilt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Tilt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Cartesian (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Cartesian (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeType (
        /*[out,retval]*/ enum gviAltitudeType * pVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeType (
        /*[in]*/ enum gviAltitudeType pVal ) = 0;
      virtual HRESULT __stdcall raw_Init (
        double X,
        double Y,
        double Altitude,
        double Heading,
        double Tilt,
        double Roll,
        enum gviAltitudeType AltitudeType ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a56dd753-c828-4b5a-adda-e8f37cd39da9"))
IObjectTexture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRotateAngle,put=PutRotateAngle))
    double RotateAngle;
    __declspec(property(get=GetScaleX,put=PutScaleX))
    double ScaleX;
    __declspec(property(get=GetScaleY,put=PutScaleY))
    double ScaleY;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;

    //
    // Wrapper methods for error-handling
    //

    double GetRotateAngle ( );
    void PutRotateAngle (
        double pVal );
    double GetScaleX ( );
    void PutScaleX (
        double pVal );
    double GetScaleY ( );
    void PutScaleY (
        double pVal );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RotateAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotateAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("d5c81bfa-a7fc-4521-9615-3097428cede4"))
IFillStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTexture,put=PutTexture))
    IObjectTexturePtr Texture;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    IObjectTexturePtr GetTexture ( );
    void PutTexture (
        struct IObjectTexture * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IObjectTexture * * pVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IObjectTexture * pVal ) = 0;
};

struct __declspec(uuid("e546e5e6-b5b6-491e-b7ed-5a445671a438"))
ILineStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPattern,put=PutPattern))
    enum gviDashStyle Pattern;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum gviDashStyle GetPattern ( );
    void PutPattern (
        enum gviDashStyle pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum gviDashStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum gviDashStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ab7f099f-7786-4eee-929a-e6f9d9779814"))
ITerrainRegularPolygon : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfSegments,put=PutNumberOfSegments))
    long NumberOfSegments;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    IFillStylePtr FillStyle;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    ILineStylePtr LineStyle;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfSegments ( );
    void PutNumberOfSegments (
        long pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    IFillStylePtr GetFillStyle ( );
    void PutFillStyle (
        struct IFillStyle * pVal );
    ILineStylePtr GetLineStyle ( );
    void PutLineStyle (
        struct ILineStyle * pVal );
    IPositionPtr GetPosition ( );
    void PutPosition (
        struct IPosition * pVal );
    IGeometryCollectionPtr GetFdeGeometry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfSegments (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSegments (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ struct IFillStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ struct IFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ struct ILineStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ struct ILineStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPosition * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPosition * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFdeGeometry (
        /*[out,retval]*/ struct IGeometryCollection * * pVal ) = 0;
};

struct __declspec(uuid("3421f46a-e5d8-4a1c-b96e-e2e24308f9cf"))
ITerrain3DRegBase : ITerrainRegularPolygon
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7d808925-4271-4ce5-ad51-11bc5876255e"))
ITerrainArrow : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetHeadX,put=PutHeadX))
    double HeadX;
    __declspec(property(get=GetHeadY,put=PutHeadY))
    double HeadY;
    __declspec(property(get=GetTailX,put=PutTailX))
    double TailX;
    __declspec(property(get=GetTailY,put=PutTailY))
    double TailY;
    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    IFillStylePtr FillStyle;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    ILineStylePtr LineStyle;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPositionPtr Position;
    __declspec(property(get=GetStyle,put=PutStyle))
    unsigned char Style;

    //
    // Wrapper methods for error-handling
    //

    double GetHeadX ( );
    void PutHeadX (
        double pVal );
    double GetHeadY ( );
    void PutHeadY (
        double pVal );
    double GetTailX ( );
    void PutTailX (
        double pVal );
    double GetTailY ( );
    void PutTailY (
        double pVal );
    IFillStylePtr GetFillStyle ( );
    void PutFillStyle (
        struct IFillStyle * pVal );
    ILineStylePtr GetLineStyle ( );
    void PutLineStyle (
        struct ILineStyle * pVal );
    IPositionPtr GetPosition ( );
    void PutPosition (
        struct IPosition * pVal );
    unsigned char GetStyle ( );
    void PutStyle (
        unsigned char pVal );
    IGeometryCollectionPtr GetFdeGeometry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HeadX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeadX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeadY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeadY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TailX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TailX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TailY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TailY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ struct IFillStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ struct IFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ struct ILineStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ struct ILineStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPosition * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPosition * pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ unsigned char pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFdeGeometry (
        /*[out,retval]*/ struct IGeometryCollection * * pVal ) = 0;
};

struct __declspec(uuid("4e65a284-7b30-47af-847b-9b070069f3a1"))
ITerrain3DArrow : ITerrainArrow
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("bbe0254c-fab1-4f93-8a93-44c0a0e32160"))
ITerrainRectangle : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetRight,put=PutRight))
    double Right;
    __declspec(property(get=GetBottom,put=PutBottom))
    double Bottom;
    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    IFillStylePtr FillStyle;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    ILineStylePtr LineStyle;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetDepth ( );
    void PutDepth (
        double pVal );
    double GetLeft ( );
    void PutLeft (
        double pVal );
    double GetTop ( );
    void PutTop (
        double pVal );
    double GetRight ( );
    void PutRight (
        double pVal );
    double GetBottom ( );
    void PutBottom (
        double pVal );
    IFillStylePtr GetFillStyle ( );
    void PutFillStyle (
        struct IFillStyle * pVal );
    ILineStylePtr GetLineStyle ( );
    void PutLineStyle (
        struct ILineStyle * pVal );
    IPositionPtr GetPosition ( );
    void PutPosition (
        struct IPosition * pVal );
    IGeometryCollectionPtr GetFdeGeometry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Right (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bottom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ struct IFillStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ struct IFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ struct ILineStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ struct ILineStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPosition * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPosition * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFdeGeometry (
        /*[out,retval]*/ struct IGeometryCollection * * pVal ) = 0;
};

struct __declspec(uuid("25c009e1-1b7f-4785-a54b-3bcd076411f5"))
ITerrain3DRectBase : ITerrainRectangle
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f3bfeebd-9f85-40ed-a42e-9a60bded6bf9"))
ITerrainEllipse : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    IFillStylePtr FillStyle;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    ILineStylePtr LineStyle;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPositionPtr Position;
    __declspec(property(get=GetNumberOfSegments,put=PutNumberOfSegments))
    long NumberOfSegments;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;

    //
    // Wrapper methods for error-handling
    //

    IFillStylePtr GetFillStyle ( );
    void PutFillStyle (
        struct IFillStyle * pVal );
    ILineStylePtr GetLineStyle ( );
    void PutLineStyle (
        struct ILineStyle * pVal );
    IPositionPtr GetPosition ( );
    void PutPosition (
        struct IPosition * pVal );
    long GetNumberOfSegments ( );
    void PutNumberOfSegments (
        long pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pVal );
    IGeometryCollectionPtr GetFdeGeometry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ struct IFillStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ struct IFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ struct ILineStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ struct ILineStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPosition * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPosition * pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSegments (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSegments (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFdeGeometry (
        /*[out,retval]*/ struct IGeometryCollection * * pVal ) = 0;
};

struct __declspec(uuid("94fe777f-56b0-4d01-8f5c-caf4332219bf"))
ITerrainArc : ITerrainEllipse
{
    //
    // Property data
    //

    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    double EndAngle;

    //
    // Wrapper methods for error-handling
    //

    double GetStartAngle ( );
    void PutStartAngle (
        double pVal );
    double GetEndAngle ( );
    void PutEndAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndAngle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ddf5c2d6-033e-4ba3-bba8-3611fe411382"))
ITerrainSphere : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    IFillStylePtr FillStyle;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    ILineStylePtr LineStyle;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPositionPtr Position;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetSegmentDensity,put=PutSegmentDensity))
    long SegmentDensity;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;

    //
    // Wrapper methods for error-handling
    //

    IFillStylePtr GetFillStyle ( );
    void PutFillStyle (
        struct IFillStyle * pVal );
    ILineStylePtr GetLineStyle ( );
    void PutLineStyle (
        struct ILineStyle * pVal );
    IPositionPtr GetPosition ( );
    void PutPosition (
        struct IPosition * pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    long GetSegmentDensity ( );
    void PutSegmentDensity (
        long pVal );
    long GetStyle ( );
    void PutStyle (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ struct IFillStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ struct IFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ struct ILineStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ struct ILineStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPosition * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPosition * pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SegmentDensity (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SegmentDensity (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("639aeaa9-012c-46cb-a005-7d0b18e9184a"))
ITerrainLocation : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    IPositionPtr Position;
    __declspec(property(get=GetSlideImageName,put=PutSlideImageName))
    _bstr_t SlideImageName;

    //
    // Wrapper methods for error-handling
    //

    IPositionPtr GetPosition ( );
    void PutPosition (
        struct IPosition * pVal );
    _bstr_t GetSlideImageName ( );
    void PutSlideImageName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPosition * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPosition * pVal ) = 0;
      virtual HRESULT __stdcall get_SlideImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlideImageName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("0bce95b3-fa78-43c7-976f-97f174f48732"))
ILabelStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLineToGround,put=PutLineToGround))
    enum gviLineToGroundType LineToGround;
    __declspec(property(get=GetPivotAlignment,put=PutPivotAlignment))
    enum gviPivotAlignment PivotAlignment;
    __declspec(property(get=GetLineLength,put=PutLineLength))
    double LineLength;
    __declspec(property(get=GetLineColor,put=PutLineColor))
    OLE_COLOR LineColor;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    OLE_COLOR TextColor;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    long FontSize;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetMultilineJustification,put=PutMultilineJustification))
    enum gviMultilineJustification MultilineJustification;
    __declspec(property(get=GetTextOnImage,put=PutTextOnImage))
    VARIANT_BOOL TextOnImage;
    __declspec(property(get=GetTextAlignment,put=PutTextAlignment))
    _bstr_t TextAlignment;
    __declspec(property(get=GetShowTextBehavior,put=PutShowTextBehavior))
    enum gviShowTextOptions ShowTextBehavior;
    __declspec(property(get=GetIconColor,put=PutIconColor))
    OLE_COLOR IconColor;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    OLE_COLOR BackgroundColor;
    __declspec(property(get=GetMaxImageSize,put=PutMaxImageSize))
    long MaxImageSize;
    __declspec(property(get=GetFrameFileName,put=PutFrameFileName))
    _bstr_t FrameFileName;
    __declspec(property(get=GetLockMode,put=PutLockMode))
    enum gviLockMode LockMode;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetLimitScreenSize,put=PutLimitScreenSize))
    VARIANT_BOOL LimitScreenSize;
    __declspec(property(get=GetMinViewingHeight,put=PutMinViewingHeight))
    double MinViewingHeight;
    __declspec(property(get=GetMaxViewingHeight,put=PutMaxViewingHeight))
    double MaxViewingHeight;

    //
    // Wrapper methods for error-handling
    //

    enum gviLineToGroundType GetLineToGround ( );
    void PutLineToGround (
        enum gviLineToGroundType pVal );
    double GetLineLength ( );
    void PutLineLength (
        double pVal );
    OLE_COLOR GetLineColor ( );
    void PutLineColor (
        OLE_COLOR pVal );
    OLE_COLOR GetTextColor ( );
    void PutTextColor (
        OLE_COLOR pVal );
    long GetFontSize ( );
    void PutFontSize (
        long pVal );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t pVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL pVal );
    enum gviMultilineJustification GetMultilineJustification ( );
    void PutMultilineJustification (
        enum gviMultilineJustification pVal );
    VARIANT_BOOL GetTextOnImage ( );
    void PutTextOnImage (
        VARIANT_BOOL pVal );
    _bstr_t GetTextAlignment ( );
    void PutTextAlignment (
        _bstr_t pVal );
    enum gviShowTextOptions GetShowTextBehavior ( );
    void PutShowTextBehavior (
        enum gviShowTextOptions pVal );
    OLE_COLOR GetIconColor ( );
    void PutIconColor (
        OLE_COLOR pVal );
    OLE_COLOR GetBackgroundColor ( );
    void PutBackgroundColor (
        OLE_COLOR pVal );
    long GetMaxImageSize ( );
    void PutMaxImageSize (
        long pVal );
    _bstr_t GetFrameFileName ( );
    void PutFrameFileName (
        _bstr_t pVal );
    enum gviLockMode GetLockMode ( );
    void PutLockMode (
        enum gviLockMode pVal );
    double GetScale ( );
    void PutScale (
        double pVal );
    VARIANT_BOOL GetLimitScreenSize ( );
    void PutLimitScreenSize (
        VARIANT_BOOL pVal );
    double GetMinViewingHeight ( );
    void PutMinViewingHeight (
        double pVal );
    double GetMaxViewingHeight ( );
    void PutMaxViewingHeight (
        double pVal );
    enum gviPivotAlignment GetPivotAlignment ( );
    void PutPivotAlignment (
        enum gviPivotAlignment pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LineToGround (
        /*[out,retval]*/ enum gviLineToGroundType * pVal ) = 0;
      virtual HRESULT __stdcall put_LineToGround (
        /*[in]*/ enum gviLineToGroundType pVal ) = 0;
      virtual HRESULT __stdcall get_LineLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MultilineJustification (
        /*[out,retval]*/ enum gviMultilineJustification * pVal ) = 0;
      virtual HRESULT __stdcall put_MultilineJustification (
        /*[in]*/ enum gviMultilineJustification pVal ) = 0;
      virtual HRESULT __stdcall get_TextOnImage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOnImage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextAlignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAlignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ShowTextBehavior (
        /*[out,retval]*/ enum gviShowTextOptions * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowTextBehavior (
        /*[in]*/ enum gviShowTextOptions pVal ) = 0;
      virtual HRESULT __stdcall get_IconColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_IconColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MaxImageSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxImageSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FrameFileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FrameFileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LockMode (
        /*[out,retval]*/ enum gviLockMode * pVal ) = 0;
      virtual HRESULT __stdcall put_LockMode (
        /*[in]*/ enum gviLockMode pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LimitScreenSize (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LimitScreenSize (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinViewingHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinViewingHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxViewingHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxViewingHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PivotAlignment (
        /*[out,retval]*/ enum gviPivotAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_PivotAlignment (
        /*[in]*/ enum gviPivotAlignment pVal ) = 0;
};

struct __declspec(uuid("df1b7ab3-4cd0-480a-9d75-cf2ffa40e7b1"))
ITerrainImageLabel : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    ILabelStylePtr Style;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPositionPtr Position;
    __declspec(property(get=GetImageFileName,put=PutImageFileName))
    _bstr_t ImageFileName;

    //
    // Wrapper methods for error-handling
    //

    ILabelStylePtr GetStyle ( );
    void PutStyle (
        struct ILabelStyle * pVal );
    IPositionPtr GetPosition ( );
    void PutPosition (
        struct IPosition * pVal );
    _bstr_t GetImageFileName ( );
    void PutImageFileName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct ILabelStyle * * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct ILabelStyle * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPosition * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPosition * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageFileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageFileName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("0ebdbbb0-faf3-4dc8-b63a-33db679a2cba"))
IPresentationStep : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaptionText,put=PutCaptionText))
    _bstr_t CaptionText;
    __declspec(property(get=GetCaptionTimeout,put=PutCaptionTimeout))
    long CaptionTimeout;
    __declspec(property(get=GetContinue,put=PutContinue))
    enum gviPresentationStepContinue Continue;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetFlightSpeedFactor,put=PutFlightSpeedFactor))
    enum gviPresentationStepFlightSpeed FlightSpeedFactor;
    __declspec(property(get=GetId))
    GUID Id;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetKeyStep,put=PutKeyStep))
    VARIANT_BOOL KeyStep;
    __declspec(property(get=GetLocationSplineSpeed,put=PutLocationSplineSpeed))
    double LocationSplineSpeed;
    __declspec(property(get=GetLocationSplineSpeedBehavior,put=PutLocationSplineSpeedBehavior))
    enum gviPresentationSplineSpeedBehavior LocationSplineSpeedBehavior;
    __declspec(property(get=GetType,put=PutType))
    enum gviPresentationStepType Type;
    __declspec(property(get=GetWaitTime,put=PutWaitTime))
    long WaitTime;
    __declspec(property(get=GetShowHideValue,put=PutShowHideValue))
    VARIANT_BOOL ShowHideValue;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCaptionText ( );
    void PutCaptionText (
        _bstr_t pVal );
    long GetCaptionTimeout ( );
    void PutCaptionTimeout (
        long pVal );
    enum gviPresentationStepContinue GetContinue ( );
    void PutContinue (
        enum gviPresentationStepContinue pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    enum gviPresentationStepFlightSpeed GetFlightSpeedFactor ( );
    void PutFlightSpeedFactor (
        enum gviPresentationStepFlightSpeed pVal );
    GUID GetId ( );
    long GetIndex ( );
    void PutIndex (
        long pVal );
    VARIANT_BOOL GetKeyStep ( );
    void PutKeyStep (
        VARIANT_BOOL pVal );
    double GetLocationSplineSpeed ( );
    void PutLocationSplineSpeed (
        double pVal );
    enum gviPresentationSplineSpeedBehavior GetLocationSplineSpeedBehavior ( );
    void PutLocationSplineSpeedBehavior (
        enum gviPresentationSplineSpeedBehavior pVal );
    enum gviPresentationStepType GetType ( );
    void PutType (
        enum gviPresentationStepType pVal );
    long GetWaitTime ( );
    void PutWaitTime (
        long pVal );
    VARIANT_BOOL GetShowHideValue ( );
    void PutShowHideValue (
        VARIANT_BOOL pVal );
    VARIANT_BOOL ContainsOperation (
        _bstr_t OperationName );
    _bstr_t GetOperationValue (
        _bstr_t OperationName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CaptionText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CaptionTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Continue (
        /*[out,retval]*/ enum gviPresentationStepContinue * pVal ) = 0;
      virtual HRESULT __stdcall put_Continue (
        /*[in]*/ enum gviPresentationStepContinue pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FlightSpeedFactor (
        /*[out,retval]*/ enum gviPresentationStepFlightSpeed * pVal ) = 0;
      virtual HRESULT __stdcall put_FlightSpeedFactor (
        /*[in]*/ enum gviPresentationStepFlightSpeed pVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_KeyStep (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_KeyStep (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LocationSplineSpeed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LocationSplineSpeed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LocationSplineSpeedBehavior (
        /*[out,retval]*/ enum gviPresentationSplineSpeedBehavior * pVal ) = 0;
      virtual HRESULT __stdcall put_LocationSplineSpeedBehavior (
        /*[in]*/ enum gviPresentationSplineSpeedBehavior pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviPresentationStepType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum gviPresentationStepType pVal ) = 0;
      virtual HRESULT __stdcall get_WaitTime (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WaitTime (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShowHideValue (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowHideValue (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ContainsOperation (
        BSTR OperationName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperationValue (
        BSTR OperationName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b91c3dc1-de90-4cb7-9e01-7528194e30de"))
IPresentationSteps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCurrent))
    long Current;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    long GetCurrent ( );
    IPresentationStepPtr GetStep (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        long Index,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
};

struct __declspec(uuid("184ea148-5929-4247-8252-4d66aca669c0"))
IPresentation : IRObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCaptionHeight,put=PutCaptionHeight))
    long CaptionHeight;
    __declspec(property(get=GetCaptionPosition,put=PutCaptionPosition))
    enum gviPresentationCaptionPosition CaptionPosition;
    __declspec(property(get=GetCaptionSizeType,put=PutCaptionSizeType))
    enum gviPresentationCaptionSizeType CaptionSizeType;
    __declspec(property(get=GetCaptionWidth,put=PutCaptionWidth))
    long CaptionWidth;
    __declspec(property(get=GetLoopRoute,put=PutLoopRoute))
    VARIANT_BOOL LoopRoute;
    __declspec(property(get=GetSlideImageName,put=PutSlideImageName))
    _bstr_t SlideImageName;
    __declspec(property(get=GetPlayAlgorithm,put=PutPlayAlgorithm))
    enum gviPresentationPlayAlgorithm PlayAlgorithm;
    __declspec(property(get=GetPlayMode,put=PutPlayMode))
    enum gviPresentationPlayMode PlayMode;
    __declspec(property(get=GetPlaySpeedFactor,put=PutPlaySpeedFactor))
    enum gviPresentationPlaySpeed PlaySpeedFactor;
    __declspec(property(get=GetPresentationStatus))
    enum gviPresentationStatus PresentationStatus;
    __declspec(property(get=GetSteps))
    IPresentationStepsPtr Steps;

    //
    // Wrapper methods for error-handling
    //

    long GetCaptionHeight ( );
    void PutCaptionHeight (
        long pVal );
    enum gviPresentationCaptionPosition GetCaptionPosition ( );
    void PutCaptionPosition (
        enum gviPresentationCaptionPosition pVal );
    enum gviPresentationCaptionSizeType GetCaptionSizeType ( );
    void PutCaptionSizeType (
        enum gviPresentationCaptionSizeType pVal );
    long GetCaptionWidth ( );
    void PutCaptionWidth (
        long pVal );
    VARIANT_BOOL GetLoopRoute ( );
    void PutLoopRoute (
        VARIANT_BOOL pVal );
    enum gviPresentationPlayAlgorithm GetPlayAlgorithm ( );
    void PutPlayAlgorithm (
        enum gviPresentationPlayAlgorithm pVal );
    enum gviPresentationPlayMode GetPlayMode ( );
    void PutPlayMode (
        enum gviPresentationPlayMode pVal );
    enum gviPresentationPlaySpeed GetPlaySpeedFactor ( );
    void PutPlaySpeedFactor (
        enum gviPresentationPlaySpeed pVal );
    enum gviPresentationStatus GetPresentationStatus ( );
    IPresentationStepsPtr GetSteps ( );
    HRESULT Continue ( );
    IPresentationStepPtr CreateCaptionStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        _bstr_t CaptionText,
        long CaptionTimeout,
        long InsertIndex );
    IPresentationStepPtr CreateClearCaptionStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        long InsertIndex );
    IPresentationStepPtr CreateFlightSpeedFactorStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        enum gviPresentationStepFlightSpeed FlightSpeedFactor,
        long InsertIndex );
    IPresentationStepPtr CreateFollowDynamicObjectStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        GUID ObjectId,
        long InsertIndex );
    IPresentationStepPtr CreateLocationStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        struct IPosition * Position,
        long InsertIndex );
    IPresentationStepPtr CreateRestartDynamicObjectStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        GUID ObjectId,
        long InsertIndex );
    IPresentationStepPtr CreateShowGroupStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        GUID GroupId,
        VARIANT_BOOL Show,
        long InsertIndex );
    IPresentationStepPtr CreateShowObjectStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        GUID ObjectId,
        VARIANT_BOOL Show,
        long InsertIndex );
    IPresentationStepPtr CreateShowUndergroundModeStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        _bstr_t Description,
        VARIANT_BOOL Show,
        long InsertIndex );
    HRESULT DeleteStep (
        long Index );
    HRESULT MoveStepTo (
        long FromIndex,
        long ToIndex );
    HRESULT NextStep ( );
    HRESULT Pause ( );
    HRESULT Play (
        long StartIndex );
    HRESULT PlayStep (
        long Index );
    HRESULT PreviousStep ( );
    HRESULT ResetPresentation ( );
    HRESULT Resume ( );
    HRESULT StartRecord ( );
    HRESULT Stop ( );
    HRESULT StopRecord ( );
    HRESULT ShowEditor ( );
    _bstr_t GetSlideImageName ( );
    void PutSlideImageName (
        _bstr_t pVal );
    VARIANT_BOOL CreateMovie (
        _bstr_t Name,
        long Width,
        long Height,
        double FPS );
    HRESULT CancelExport ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CaptionHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CaptionPosition (
        /*[out,retval]*/ enum gviPresentationCaptionPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionPosition (
        /*[in]*/ enum gviPresentationCaptionPosition pVal ) = 0;
      virtual HRESULT __stdcall get_CaptionSizeType (
        /*[out,retval]*/ enum gviPresentationCaptionSizeType * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionSizeType (
        /*[in]*/ enum gviPresentationCaptionSizeType pVal ) = 0;
      virtual HRESULT __stdcall get_CaptionWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptionWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LoopRoute (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LoopRoute (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PlayAlgorithm (
        /*[out,retval]*/ enum gviPresentationPlayAlgorithm * pVal ) = 0;
      virtual HRESULT __stdcall put_PlayAlgorithm (
        /*[in]*/ enum gviPresentationPlayAlgorithm pVal ) = 0;
      virtual HRESULT __stdcall get_PlayMode (
        /*[out,retval]*/ enum gviPresentationPlayMode * pVal ) = 0;
      virtual HRESULT __stdcall put_PlayMode (
        /*[in]*/ enum gviPresentationPlayMode pVal ) = 0;
      virtual HRESULT __stdcall get_PlaySpeedFactor (
        /*[out,retval]*/ enum gviPresentationPlaySpeed * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaySpeedFactor (
        /*[in]*/ enum gviPresentationPlaySpeed pVal ) = 0;
      virtual HRESULT __stdcall get_PresentationStatus (
        /*[out,retval]*/ enum gviPresentationStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_Steps (
        /*[out,retval]*/ struct IPresentationSteps * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Continue ( ) = 0;
      virtual HRESULT __stdcall raw_CreateCaptionStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        BSTR CaptionText,
        long CaptionTimeout,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateClearCaptionStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFlightSpeedFactorStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        enum gviPresentationStepFlightSpeed FlightSpeedFactor,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFollowDynamicObjectStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        GUID ObjectId,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLocationStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        struct IPosition * Position,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRestartDynamicObjectStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        GUID ObjectId,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateShowGroupStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        GUID GroupId,
        VARIANT_BOOL Show,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateShowObjectStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        GUID ObjectId,
        VARIANT_BOOL Show,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateShowUndergroundModeStep (
        enum gviPresentationStepContinue AdvancedType,
        long WaitTime,
        BSTR Description,
        VARIANT_BOOL Show,
        long InsertIndex,
        /*[out,retval]*/ struct IPresentationStep * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteStep (
        long Index ) = 0;
      virtual HRESULT __stdcall raw_MoveStepTo (
        long FromIndex,
        long ToIndex ) = 0;
      virtual HRESULT __stdcall raw_NextStep ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Play (
        long StartIndex ) = 0;
      virtual HRESULT __stdcall raw_PlayStep (
        long Index ) = 0;
      virtual HRESULT __stdcall raw_PreviousStep ( ) = 0;
      virtual HRESULT __stdcall raw_ResetPresentation ( ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall raw_StartRecord ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_StopRecord ( ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall get_SlideImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SlideImageName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateMovie (
        BSTR Name,
        long Width,
        long Height,
        double FPS,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CancelExport ( ) = 0;
};

struct __declspec(uuid("bf86e07f-b91c-429b-970d-4e0ec5adfad1"))
IComplexParticleEffect : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetRotateAngle,put=PutRotateAngle))
    IEulerAnglePtr RotateAngle;
    __declspec(property(get=GetScalingFactor,put=PutScalingFactor))
    double ScalingFactor;
    __declspec(property(get=GetEmissionRate,put=PutEmissionRate))
    double EmissionRate;
    __declspec(property(get=GetWindDirection,put=PutWindDirection))
    double WindDirection;
    __declspec(property(get=GetWindAcceleration,put=PutWindAcceleration))
    double WindAcceleration;
    __declspec(property(get=GetIsAlive))
    VARIANT_BOOL IsAlive;
    __declspec(property(get=GetDuration))
    double Duration;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Play ( );
    HRESULT Stop ( );
    IPointPtr GetPosition ( );
    void PutPosition (
        struct IPoint * pVal );
    IEulerAnglePtr GetRotateAngle ( );
    void PutRotateAngle (
        struct IEulerAngle * pVal );
    double GetScalingFactor ( );
    void PutScalingFactor (
        double pVal );
    double GetEmissionRate ( );
    void PutEmissionRate (
        double pVal );
    double GetWindDirection ( );
    void PutWindDirection (
        double pVal );
    double GetWindAcceleration ( );
    void PutWindAcceleration (
        double pVal );
    enum gviComplexParticleEffectType GetComplexParticleEffectType ( );
    VARIANT_BOOL GetIsAlive ( );
    double GetDuration ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        struct IPoint * pVal ) = 0;
      virtual HRESULT __stdcall get_RotateAngle (
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall put_RotateAngle (
        /*[in]*/ struct IEulerAngle * pVal ) = 0;
      virtual HRESULT __stdcall get_ScalingFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScalingFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EmissionRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EmissionRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WindDirection (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WindDirection (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WindAcceleration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WindAcceleration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetComplexParticleEffectType (
        /*[out,retval]*/ enum gviComplexParticleEffectType * pVal ) = 0;
      virtual HRESULT __stdcall get_IsAlive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("776a4017-62a9-4423-bdcb-33d7d93bda92"))
IKmlGroup : IRObject
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetVisibleMask (
        enum gviViewportMask Mask );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetVisibleMask (
        enum gviViewportMask Mask ) = 0;
};

struct __declspec(uuid("f9c2c491-ac98-49a9-a74e-7b5dabe7d870"))
IHeatMap : IRenderable
{
    //
    // Property data
    //

    __declspec(property(get=GetAttenRadius,put=PutAttenRadius))
    double AttenRadius;
    __declspec(property(get=GetMaxHeatValue,put=PutMaxHeatValue))
    double MaxHeatValue;
    __declspec(property(get=GetMinHeatValue,put=PutMinHeatValue))
    double MinHeatValue;

    //
    // Wrapper methods for error-handling
    //

    double GetAttenRadius ( );
    void PutAttenRadius (
        double pVal );
    double GetMaxHeatValue ( );
    void PutMaxHeatValue (
        double pVal );
    double GetMinHeatValue ( );
    void PutMinHeatValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttenRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AttenRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxHeatValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxHeatValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinHeatValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinHeatValue (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("60a922db-b266-4b89-a21d-944351b850e1"))
IOperation : IRObject
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Execute ( );
    HRESULT Cancel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Execute ( ) = 0;
      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
};

struct __declspec(uuid("396ac826-06f0-4dd8-8989-1bdb354a7071"))
IClipPlaneOperation : IOperation
{
    //
    // Property data
    //

    __declspec(property(get=GetClipPlaneOperationType))
    enum gviClipPlaneOperation ClipPlaneOperationType;

    //
    // Wrapper methods for error-handling
    //

    enum gviClipPlaneOperation GetClipPlaneOperationType ( );
    HRESULT SetSingleClip (
        struct IVector3 * Position,
        struct IEulerAngle * Angle );
    HRESULT GetSingleClip (
        struct IVector3 * * Position,
        struct IEulerAngle * * Angle );
    HRESULT SetBoxClip (
        struct IVector3 * BoxCenter,
        struct IVector3 * BoxSize,
        struct IEulerAngle * Angle );
    HRESULT GetBoxClip (
        struct IVector3 * * BoxCenter,
        struct IVector3 * * BoxSize,
        struct IEulerAngle * * Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ClipPlaneOperationType (
        /*[out,retval]*/ enum gviClipPlaneOperation * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSingleClip (
        struct IVector3 * Position,
        struct IEulerAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetSingleClip (
        /*[out]*/ struct IVector3 * * Position,
        /*[out]*/ struct IEulerAngle * * Angle ) = 0;
      virtual HRESULT __stdcall raw_SetBoxClip (
        struct IVector3 * BoxCenter,
        struct IVector3 * BoxSize,
        struct IEulerAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetBoxClip (
        /*[out]*/ struct IVector3 * * BoxCenter,
        /*[out]*/ struct IVector3 * * BoxSize,
        /*[out]*/ struct IEulerAngle * * Angle ) = 0;
};

struct __declspec(uuid("445f62b4-a639-4523-b182-4331ac2f4e33"))
IObjectManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IFeatureLayerPtr CreateFeatureLayer (
        struct IFeatureClass * FeatureClass,
        _bstr_t GeoField,
        struct ITextRender * TextRender,
        struct IGeometryRender * GeoRender,
        GUID GroupId );
    IFeatureLayerPtr GetFeatureLayer (
        GUID FeatureLayerGuid );
    ITerrainRoutePtr CreateTerrainRoute (
        GUID GroupId );
    IRenderModelPointPtr CreateRenderModelPoint (
        struct IModelPoint * ModelPoint,
        struct IModelPointSymbol * Symbol,
        GUID GroupId );
    IRenderPolylinePtr CreateRenderPolyline (
        struct IPolyline * Polyline,
        struct ICurveSymbol * Symbol,
        GUID GroupId );
    IRenderPolygonPtr CreateRenderPolygon (
        struct IPolygon * Polygon,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId );
    IRenderTriMeshPtr CreateRenderTriMesh (
        struct ITriMesh * TriMesh,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId );
    IRenderMultiTriMeshPtr CreateRenderMultiTriMesh (
        struct IMultiTriMesh * MultiTriMesh,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId );
    IRenderMultiPointPtr CreateRenderMultiPoint (
        struct IMultiPoint * MultiPoint,
        struct IPointSymbol * Symbol,
        GUID GroupId );
    ICameraTourPtr CreateCameraTour (
        GUID GroupId );
    IRenderPointPtr CreateRenderPoint (
        struct IPoint * Point,
        struct IPointSymbol * Symbol,
        GUID GroupId );
    IMotionPathPtr CreateMotionPath (
        GUID GroupId );
    IParticleEffectPtr CreateParticleEffect (
        GUID GroupId );
    ILabelPtr CreateLabel (
        GUID GroupId );
    IParticleEffectPtr CreateParticleEffectFromFDB (
        struct IFeatureDataSet * FeatureDataSet,
        GUID GroupId );
    ITableLabelPtr CreateTableLabel (
        long RowCount,
        long ColumnCount,
        GUID GroupId );
    ISkinnedMeshPtr CreateSkinnedMesh (
        struct IModelPoint * ModelPoint,
        GUID GroupId );
    IRenderMultiPolylinePtr CreateRenderMultiPolyline (
        struct IMultiPolyline * MultiPolyline,
        struct ICurveSymbol * Symbol,
        GUID GroupId );
    IRenderMultiPolygonPtr CreateRenderMultiPolygon (
        struct IMultiPolygon * MultiPolygon,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId );
    IRObjectPtr GetObjectById (
        GUID Id );
    VARIANT_BOOL DeleteObject (
        GUID Id );
    ISkyBoxPtr GetSkyBox (
        long ViewIndex );
    IReferencePlanePtr GetReferencePlane ( );
    IProjectTreePtr GetProjectTree ( );
    _bstr_t OpenRasterSourceDialog (
        enum gviRasterSourceType DataSourceType );
    IImageryLayerPtr CreateImageryLayer (
        _bstr_t ConnectionString,
        GUID GroupId );
    VARIANT_BOOL DelayDelete (
        GUID Id,
        long DelayTime );
    ITerrainHolePtr CreateTerrainHole (
        struct IPolygon * Polygon,
        GUID GroupId );
    I3DTileHolePtr Create3DTileHole (
        struct IPolygon * Polygon,
        GUID GroupId );
    I3DTileLayerPtr Create3DTileLayer (
        _bstr_t LayerInfo,
        _bstr_t Password,
        GUID GroupId );
    IOverlayLabelPtr CreateOverlayLabel (
        GUID GroupId );
    ITerrainVideoPtr CreateTerrainVideo (
        struct IPoint * Position,
        GUID GroupId );
    IViewshedPtr CreateViewshed (
        struct IPoint * Position,
        GUID GroupId );
    IRenderArrowPtr CreateRenderArrow (
        GUID GroupId );
    HRESULT AddModel (
        _bstr_t ModelName,
        struct IModel * newVal );
    HRESULT DeleteModel (
        _bstr_t ModelName );
    HRESULT AddImage (
        _bstr_t ImageName,
        struct IImage * newVal );
    HRESULT DeleteImage (
        _bstr_t ImageName );
    IDynamicObjectPtr CreateDynamicObject (
        GUID GroupId );
    ITerrainModifierPtr CreateTerrainModifier (
        struct IPolygon * Polygon,
        GUID GroupId );
    IRenderPOIPtr CreateRenderPOI (
        struct IPOI * POI );
    IRenderPOIPtr CreateRenderPOIFromFDB (
        struct IPOI * POI,
        struct IFeatureDataSet * FeatureDataSet );
    IWalkGroundPtr CreateWalkGround (
        struct IModelPoint * ModelPoint );
    IWalkGroundPtr CreateWalkGroundFromFDB (
        struct IFeatureClass * FeatureClass,
        _bstr_t GeoField );
    IGeometryRenderPtr CreateGeometryRenderFromXML (
        _bstr_t XmlStringValue );
    ITextRenderPtr CreateTextRenderFromXML (
        _bstr_t XmlStringValue );
    IGeometrySymbolPtr CreateGeometrySymbolFromXML (
        _bstr_t XmlStringValue );
    ITextSymbolPtr CreateTextSymbolFromXML (
        _bstr_t XmlStringValue );
    ITerrainRegularPolygonPtr CreateCircle (
        struct IPosition * Position,
        double Radius,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId );
    ITerrainRegularPolygonPtr CreateRegularPolygon (
        struct IPosition * Position,
        double Radius,
        long NumOfSegments,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId );
    ITerrain3DRegBasePtr CreateCylinder (
        struct IPosition * Position,
        double Radius,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId );
    ITerrain3DRegBasePtr CreateCone (
        struct IPosition * Position,
        double Radius,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId );
    ITerrainArrowPtr CreateArrow (
        struct IPosition * Position,
        double Length,
        long Style,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId );
    ITerrain3DArrowPtr Create3DArrow (
        struct IPosition * Position,
        double Length,
        long Style,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId );
    ITerrainRectanglePtr CreateRectangle (
        struct IPosition * Position,
        double ObjectWidth,
        double ObjectDepth,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId );
    ITerrain3DRectBasePtr CreateBox (
        struct IPosition * Position,
        double ObjectWidth,
        double ObjectDepth,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId );
    ITerrain3DRectBasePtr CreatePyramid (
        struct IPosition * Position,
        double ObjectWidth,
        double ObjectDepth,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId );
    ITerrainEllipsePtr CreateEllipse (
        struct IPosition * Position,
        double RadiusX,
        double RadiusY,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId );
    ITerrainArcPtr CreateArc (
        struct IPosition * Position,
        double RadiusX,
        double RadiusY,
        double StartAngle,
        double EndAngle,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId );
    ITerrainSpherePtr CreateSphere (
        struct IPosition * Position,
        double Radius,
        long Style,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long SegmentDensity,
        GUID GroupId );
    ITerrainLocationPtr CreateLocation (
        struct IPosition * Position,
        GUID GroupId );
    ITerrainImageLabelPtr CreateImageLabel (
        struct IPosition * Position,
        _bstr_t ImageFileName,
        struct ILabelStyle * Style,
        GUID GroupId );
    IPresentationPtr CreatePresentation (
        GUID GroupId );
    IComplexParticleEffectPtr CreateComplexParticleEffect (
        enum gviComplexParticleEffectType Type,
        GUID GroupId );
    IKmlGroupPtr CreateKmlGroup (
        _bstr_t File );
    IHeatMapPtr CreateHeatMap (
        struct IFeatureClass * FeatureClass,
        _bstr_t GeoFieldName,
        _bstr_t HeatValueFieldName,
        GUID GroupId );
    IClipPlaneOperationPtr CreateClipPlaneOperation (
        GUID GroupId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFeatureLayer (
        struct IFeatureClass * FeatureClass,
        BSTR GeoField,
        struct ITextRender * TextRender,
        struct IGeometryRender * GeoRender,
        GUID GroupId,
        /*[out,retval]*/ struct IFeatureLayer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFeatureLayer (
        GUID FeatureLayerGuid,
        /*[out,retval]*/ struct IFeatureLayer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTerrainRoute (
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainRoute * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderModelPoint (
        struct IModelPoint * ModelPoint,
        struct IModelPointSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderModelPoint * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderPolyline (
        struct IPolyline * Polyline,
        struct ICurveSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderPolyline * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderPolygon (
        struct IPolygon * Polygon,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderTriMesh (
        struct ITriMesh * TriMesh,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderTriMesh * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderMultiTriMesh (
        struct IMultiTriMesh * MultiTriMesh,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderMultiTriMesh * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderMultiPoint (
        struct IMultiPoint * MultiPoint,
        struct IPointSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderMultiPoint * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCameraTour (
        GUID GroupId,
        /*[out,retval]*/ struct ICameraTour * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderPoint (
        struct IPoint * Point,
        struct IPointSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderPoint * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateMotionPath (
        GUID GroupId,
        /*[out,retval]*/ struct IMotionPath * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParticleEffect (
        GUID GroupId,
        /*[out,retval]*/ struct IParticleEffect * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLabel (
        GUID GroupId,
        /*[out,retval]*/ struct ILabel * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParticleEffectFromFDB (
        struct IFeatureDataSet * FeatureDataSet,
        GUID GroupId,
        /*[out,retval]*/ struct IParticleEffect * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTableLabel (
        long RowCount,
        long ColumnCount,
        GUID GroupId,
        /*[out,retval]*/ struct ITableLabel * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSkinnedMesh (
        struct IModelPoint * ModelPoint,
        GUID GroupId,
        /*[out,retval]*/ struct ISkinnedMesh * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderMultiPolyline (
        struct IMultiPolyline * MultiPolyline,
        struct ICurveSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderMultiPolyline * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderMultiPolygon (
        struct IMultiPolygon * MultiPolygon,
        struct ISurfaceSymbol * Symbol,
        GUID GroupId,
        /*[out,retval]*/ struct IRenderMultiPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetObjectById (
        GUID Id,
        /*[out,retval]*/ struct IRObject * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteObject (
        GUID Id,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSkyBox (
        long ViewIndex,
        /*[out,retval]*/ struct ISkyBox * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetReferencePlane (
        /*[out,retval]*/ struct IReferencePlane * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetProjectTree (
        /*[out,retval]*/ struct IProjectTree * * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenRasterSourceDialog (
        enum gviRasterSourceType DataSourceType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateImageryLayer (
        BSTR ConnectionString,
        GUID GroupId,
        /*[out,retval]*/ struct IImageryLayer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DelayDelete (
        GUID Id,
        long DelayTime,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTerrainHole (
        struct IPolygon * Polygon,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainHole * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Create3DTileHole (
        struct IPolygon * Polygon,
        GUID GroupId,
        /*[out,retval]*/ struct I3DTileHole * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Create3DTileLayer (
        BSTR LayerInfo,
        BSTR Password,
        GUID GroupId,
        /*[out,retval]*/ struct I3DTileLayer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOverlayLabel (
        GUID GroupId,
        /*[out,retval]*/ struct IOverlayLabel * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTerrainVideo (
        struct IPoint * Position,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainVideo * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateViewshed (
        struct IPoint * Position,
        GUID GroupId,
        /*[out,retval]*/ struct IViewshed * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderArrow (
        GUID GroupId,
        /*[out,retval]*/ struct IRenderArrow * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddModel (
        BSTR ModelName,
        struct IModel * newVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteModel (
        BSTR ModelName ) = 0;
      virtual HRESULT __stdcall raw_AddImage (
        BSTR ImageName,
        struct IImage * newVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteImage (
        BSTR ImageName ) = 0;
      virtual HRESULT __stdcall raw_CreateDynamicObject (
        GUID GroupId,
        /*[out,retval]*/ struct IDynamicObject * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTerrainModifier (
        struct IPolygon * Polygon,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainModifier * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderPOI (
        struct IPOI * POI,
        /*[out,retval]*/ struct IRenderPOI * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRenderPOIFromFDB (
        struct IPOI * POI,
        struct IFeatureDataSet * FeatureDataSet,
        /*[out,retval]*/ struct IRenderPOI * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateWalkGround (
        struct IModelPoint * ModelPoint,
        /*[out,retval]*/ struct IWalkGround * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateWalkGroundFromFDB (
        struct IFeatureClass * FeatureClass,
        BSTR GeoField,
        /*[out,retval]*/ struct IWalkGround * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateGeometryRenderFromXML (
        BSTR XmlStringValue,
        /*[out,retval]*/ struct IGeometryRender * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTextRenderFromXML (
        BSTR XmlStringValue,
        /*[out,retval]*/ struct ITextRender * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateGeometrySymbolFromXML (
        BSTR XmlStringValue,
        /*[out,retval]*/ struct IGeometrySymbol * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTextSymbolFromXML (
        BSTR XmlStringValue,
        /*[out,retval]*/ struct ITextSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCircle (
        struct IPosition * Position,
        double Radius,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainRegularPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRegularPolygon (
        struct IPosition * Position,
        double Radius,
        long NumOfSegments,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainRegularPolygon * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCylinder (
        struct IPosition * Position,
        double Radius,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrain3DRegBase * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCone (
        struct IPosition * Position,
        double Radius,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrain3DRegBase * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrow (
        struct IPosition * Position,
        double Length,
        long Style,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainArrow * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Create3DArrow (
        struct IPosition * Position,
        double Length,
        long Style,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrain3DArrow * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRectangle (
        struct IPosition * Position,
        double ObjectWidth,
        double ObjectDepth,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainRectangle * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBox (
        struct IPosition * Position,
        double ObjectWidth,
        double ObjectDepth,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrain3DRectBase * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePyramid (
        struct IPosition * Position,
        double ObjectWidth,
        double ObjectDepth,
        double ObjectHeight,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrain3DRectBase * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEllipse (
        struct IPosition * Position,
        double RadiusX,
        double RadiusY,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainEllipse * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArc (
        struct IPosition * Position,
        double RadiusX,
        double RadiusY,
        double StartAngle,
        double EndAngle,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long NumOfSegments,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainArc * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSphere (
        struct IPosition * Position,
        double Radius,
        long Style,
        OLE_COLOR LineColor,
        OLE_COLOR FillColor,
        long SegmentDensity,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainSphere * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLocation (
        struct IPosition * Position,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainLocation * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateImageLabel (
        struct IPosition * Position,
        BSTR ImageFileName,
        struct ILabelStyle * Style,
        GUID GroupId,
        /*[out,retval]*/ struct ITerrainImageLabel * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePresentation (
        GUID GroupId,
        /*[out,retval]*/ struct IPresentation * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateComplexParticleEffect (
        enum gviComplexParticleEffectType Type,
        GUID GroupId,
        /*[out,retval]*/ struct IComplexParticleEffect * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateKmlGroup (
        BSTR File,
        /*[out,retval]*/ struct IKmlGroup * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateHeatMap (
        struct IFeatureClass * FeatureClass,
        BSTR GeoFieldName,
        BSTR HeatValueFieldName,
        GUID GroupId,
        /*[out,retval]*/ struct IHeatMap * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateClipPlaneOperation (
        GUID GroupId,
        /*[out,retval]*/ struct IClipPlaneOperation * * pVal ) = 0;
};

struct __declspec(uuid("36e556e5-5911-4007-9020-a3ff20bf1ba7"))
ICacheManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileCacheEnabled,put=PutFileCacheEnabled))
    VARIANT_BOOL FileCacheEnabled;
    __declspec(property(get=GetFileCachePath,put=PutFileCachePath))
    _bstr_t FileCachePath;
    __declspec(property(get=GetFileCacheSize,put=PutFileCacheSize))
    long FileCacheSize;
    __declspec(property(get=GetMemoryCacheEnabled,put=PutMemoryCacheEnabled))
    VARIANT_BOOL MemoryCacheEnabled;
    __declspec(property(get=GetMemoryCacheSize,put=PutMemoryCacheSize))
    long MemoryCacheSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFileCacheEnabled ( );
    void PutFileCacheEnabled (
        VARIANT_BOOL pVal );
    _bstr_t GetFileCachePath ( );
    void PutFileCachePath (
        _bstr_t pVal );
    long GetFileCacheSize ( );
    void PutFileCacheSize (
        long pVal );
    VARIANT_BOOL GetMemoryCacheEnabled ( );
    void PutMemoryCacheEnabled (
        VARIANT_BOOL pVal );
    long GetMemoryCacheSize ( );
    void PutMemoryCacheSize (
        long pVal );
    _bstr_t GetTileCacheFileName (
        _bstr_t LayerInfo );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileCacheEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FileCacheEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileCachePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileCachePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FileCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FileCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MemoryCacheEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MemoryCacheEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MemoryCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MemoryCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTileCacheFileName (
        BSTR LayerInfo,
        /*[out,retval]*/ BSTR * Path ) = 0;
};

struct __declspec(uuid("faa9cc20-2be0-4758-a823-8225debd275c"))
IRenderRule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLookUpField,put=PutLookUpField))
    _bstr_t LookUpField;
    __declspec(property(get=GetOtherwise,put=PutOtherwise))
    VARIANT_BOOL Otherwise;
    __declspec(property(get=GetRuleType))
    enum gviRenderRuleType RuleType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLookUpField ( );
    void PutLookUpField (
        _bstr_t pVal );
    VARIANT_BOOL GetOtherwise ( );
    void PutOtherwise (
        VARIANT_BOOL pVal );
    enum gviRenderRuleType GetRuleType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LookUpField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LookUpField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Otherwise (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Otherwise (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RuleType (
        /*[out,retval]*/ enum gviRenderRuleType * pVal ) = 0;
};

struct __declspec(uuid("1375557c-4fa1-4d81-8539-83d8a79bc504"))
ITextRenderScheme : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    ITextSymbolPtr Symbol;
    __declspec(property(get=GetRuleCount))
    long RuleCount;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddRule (
        struct IRenderRule * Rule );
    HRESULT ClearRules ( );
    ITextSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ITextSymbol * pVal );
    IRenderRulePtr GetRule (
        long Index );
    long GetRuleCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddRule (
        struct IRenderRule * Rule ) = 0;
      virtual HRESULT __stdcall raw_ClearRules ( ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ITextSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ITextSymbol * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRule (
        long Index,
        /*[out,retval]*/ struct IRenderRule * * pVal ) = 0;
      virtual HRESULT __stdcall get_RuleCount (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("0b4ae2ae-415d-4d6a-b743-af576ae451ba"))
IGeometryRenderScheme : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    IGeometrySymbolPtr Symbol;
    __declspec(property(get=GetVisibleMask,put=PutVisibleMask))
    unsigned char VisibleMask;
    __declspec(property(get=GetRuleCount))
    long RuleCount;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddRule (
        struct IRenderRule * Rule );
    HRESULT ClearRules ( );
    IGeometrySymbolPtr GetSymbol ( );
    void PutSymbol (
        struct IGeometrySymbol * pVal );
    unsigned char GetVisibleMask ( );
    void PutVisibleMask (
        unsigned char pVal );
    IRenderRulePtr GetRule (
        long Index );
    long GetRuleCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddRule (
        struct IRenderRule * Rule ) = 0;
      virtual HRESULT __stdcall raw_ClearRules ( ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct IGeometrySymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct IGeometrySymbol * pVal ) = 0;
      virtual HRESULT __stdcall get_VisibleMask (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibleMask (
        /*[in]*/ unsigned char pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRule (
        long Index,
        /*[out,retval]*/ struct IRenderRule * * pVal ) = 0;
      virtual HRESULT __stdcall get_RuleCount (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("da8aec8e-d300-4003-8156-e20ee7cd80c2"))
IObjectEditor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsEditing))
    VARIANT_BOOL IsEditing;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL StartEditFeatureGeometry (
        struct IRowBuffer * RowBuffer,
        struct IFeatureLayer * FeatureLayer,
        enum gviGeoEditType EditType );
    VARIANT_BOOL StartEditRenderGeometry (
        struct IRenderGeometry * RenderGeometry,
        enum gviGeoEditType EditType );
    HRESULT FinishEdit ( );
    HRESULT CancelEdit ( );
    VARIANT_BOOL GetIsEditing ( );
    HRESULT Move (
        struct IVector3 * Move );
    HRESULT Rotate (
        struct IVector3 * Axis,
        struct IVector3 * Center,
        double Angle );
    HRESULT Scale (
        struct IVector3 * Scale,
        struct IVector3 * Center );
    VARIANT_BOOL AddMovingFeatures (
        struct IFeatureLayer * Layer,
        struct IRowBufferCollection * RowBuffers );
    VARIANT_BOOL StartMoveFeatures (
        _bstr_t CRS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartEditFeatureGeometry (
        struct IRowBuffer * RowBuffer,
        struct IFeatureLayer * FeatureLayer,
        enum gviGeoEditType EditType,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartEditRenderGeometry (
        struct IRenderGeometry * RenderGeometry,
        enum gviGeoEditType EditType,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FinishEdit ( ) = 0;
      virtual HRESULT __stdcall raw_CancelEdit ( ) = 0;
      virtual HRESULT __stdcall get_IsEditing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        struct IVector3 * Move ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        struct IVector3 * Axis,
        struct IVector3 * Center,
        double Angle ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        struct IVector3 * Scale,
        struct IVector3 * Center ) = 0;
      virtual HRESULT __stdcall raw_AddMovingFeatures (
        struct IFeatureLayer * Layer,
        struct IRowBufferCollection * RowBuffers,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartMoveFeatures (
        BSTR CRS,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("a9b78073-b0de-4182-aa0c-1351d80de463"))
IViewport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetViewportMode,put=PutViewportMode))
    enum gviViewportMode ViewportMode;
    __declspec(property(get=GetActiveView,put=PutActiveView))
    long ActiveView;
    __declspec(property(get=GetCameraViewBindMask,put=PutCameraViewBindMask))
    enum gviViewportMask CameraViewBindMask;
    __declspec(property(get=GetCompassVisibleMask,put=PutCompassVisibleMask))
    enum gviViewportMask CompassVisibleMask;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLogoVisible ( );
    void PutLogoVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCameraInfoVisible ( );
    void PutCameraInfoVisible (
        VARIANT_BOOL pVal );
    enum gviViewportMode GetViewportMode ( );
    void PutViewportMode (
        enum gviViewportMode pVal );
    long GetActiveView ( );
    void PutActiveView (
        long pVal );
    enum gviViewportMask GetCameraViewBindMask ( );
    void PutCameraViewBindMask (
        enum gviViewportMask pVal );
    enum gviViewportMask GetCompassVisibleMask ( );
    void PutCompassVisibleMask (
        enum gviViewportMask pVal );
    double GetSplitRatioH ( );
    void PutSplitRatioH (
        double pVal );
    double GetSplitRatioV ( );
    void PutSplitRatioV (
        double pVal );
    VARIANT_BOOL GetShowBorderLine ( );
    void PutShowBorderLine (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LogoVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LogoVisible (
        VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CameraInfoVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CameraInfoVisible (
        VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ViewportMode (
        /*[out,retval]*/ enum gviViewportMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewportMode (
        /*[in]*/ enum gviViewportMode pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveView (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ActiveView (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CameraViewBindMask (
        /*[out,retval]*/ enum gviViewportMask * pVal ) = 0;
      virtual HRESULT __stdcall put_CameraViewBindMask (
        /*[in]*/ enum gviViewportMask pVal ) = 0;
      virtual HRESULT __stdcall get_CompassVisibleMask (
        /*[out,retval]*/ enum gviViewportMask * pVal ) = 0;
      virtual HRESULT __stdcall put_CompassVisibleMask (
        /*[in]*/ enum gviViewportMask pVal ) = 0;
      virtual HRESULT __stdcall get_SplitRatioH (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SplitRatioH (
        double pVal ) = 0;
      virtual HRESULT __stdcall get_SplitRatioV (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SplitRatioV (
        double pVal ) = 0;
      virtual HRESULT __stdcall get_ShowBorderLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowBorderLine (
        VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b285ecec-17b1-4857-aaef-c4a835f5090a"))
IVisualAnalysis : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StartShadowAnalyse ( );
    HRESULT StartViewshedAnalyse (
        struct IPoint * Start,
        struct IPoint * End,
        double HorizontalAngle );
    HRESULT StopAnalyse ( );
    HRESULT AddOccluder (
        struct IFeatureLayer * FL,
        struct IGeometry * Geo );
    HRESULT ClearOccluders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartShadowAnalyse ( ) = 0;
      virtual HRESULT __stdcall raw_StartViewshedAnalyse (
        struct IPoint * Start,
        struct IPoint * End,
        double HorizontalAngle ) = 0;
      virtual HRESULT __stdcall raw_StopAnalyse ( ) = 0;
      virtual HRESULT __stdcall raw_AddOccluder (
        struct IFeatureLayer * FL,
        struct IGeometry * Geo ) = 0;
      virtual HRESULT __stdcall raw_ClearOccluders ( ) = 0;
};

struct __declspec(uuid("d23aefa3-2600-40d9-8b75-c4760e15c619"))
IHighlightHelper : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleMask,put=PutVisibleMask))
    unsigned char VisibleMask;
    __declspec(property(get=GetMinZ,put=PutMinZ))
    double MinZ;
    __declspec(property(get=GetMaxZ,put=PutMaxZ))
    double MaxZ;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetCircleRegion (
        struct IPoint * Center,
        double Radius );
    HRESULT SetSectorRegion (
        struct IPoint * Start,
        struct IPoint * End,
        double HorizontalAngle );
    IGeometryPtr GetRegion ( );
    unsigned char GetVisibleMask ( );
    void PutVisibleMask (
        unsigned char pVal );
    double GetMinZ ( );
    void PutMinZ (
        double pVal );
    double GetMaxZ ( );
    void PutMaxZ (
        double pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    HRESULT SetRegion (
        struct IGeometry * Geometry );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCircleRegion (
        struct IPoint * Center,
        double Radius ) = 0;
      virtual HRESULT __stdcall raw_SetSectorRegion (
        struct IPoint * Start,
        struct IPoint * End,
        double HorizontalAngle ) = 0;
      virtual HRESULT __stdcall raw_GetRegion (
        /*[out,retval]*/ struct IGeometry * * pVal ) = 0;
      virtual HRESULT __stdcall get_VisibleMask (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibleMask (
        /*[in]*/ unsigned char pVal ) = 0;
      virtual HRESULT __stdcall get_MinZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRegion (
        struct IGeometry * Geometry ) = 0;
};

struct __declspec(uuid("bd509912-45e6-4178-aab2-38d6d5537a51"))
ISunConfig : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSunCalculateMode,put=PutSunCalculateMode))
    enum gviSunCalculateMode SunCalculateMode;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;

    //
    // Wrapper methods for error-handling
    //

    IEulerAnglePtr GetSunEuler (
        struct IPoint * Pos );
    HRESULT SetSunEuler (
        struct IEulerAngle * newVal );
    enum gviSunCalculateMode GetSunCalculateMode ( );
    void PutSunCalculateMode (
        enum gviSunCalculateMode pVal );
    HRESULT SetGMT (
        DATE Time );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR pVal );
    HRESULT EnableShadow (
        long ViewID,
        VARIANT_BOOL IsEnable );
    VARIANT_BOOL IsShadowEnabled (
        long ViewID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetSunEuler (
        struct IPoint * Pos,
        /*[out,retval]*/ struct IEulerAngle * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSunEuler (
        /*[in]*/ struct IEulerAngle * newVal ) = 0;
      virtual HRESULT __stdcall get_SunCalculateMode (
        /*[out,retval]*/ enum gviSunCalculateMode * pVal ) = 0;
      virtual HRESULT __stdcall put_SunCalculateMode (
        /*[in]*/ enum gviSunCalculateMode pVal ) = 0;
      virtual HRESULT __stdcall raw_SetGMT (
        DATE Time ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_EnableShadow (
        long ViewID,
        VARIANT_BOOL IsEnable ) = 0;
      virtual HRESULT __stdcall raw_IsShadowEnabled (
        long ViewID,
        /*[out,retval]*/ VARIANT_BOOL * IsEnable ) = 0;
};

struct __declspec(uuid("16499e36-8eff-422b-94b6-ac877f6cb6f7"))
IPointCloudSymbol : IGeometrySymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetEnableColor,put=PutEnableColor))
    VARIANT_BOOL EnableColor;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetEnableColor ( );
    void PutEnableColor (
        VARIANT_BOOL pVal );
    long GetSize ( );
    void PutSize (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_EnableColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("3ce54ddc-fbeb-45fa-88ec-51b418589258"))
IRenderPOIPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetPOI))
    IRenderPOIPtr POI;

    //
    // Wrapper methods for error-handling
    //

    IRenderPOIPtr GetPOI ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_POI (
        /*[out,retval]*/ struct IRenderPOI * * pVal ) = 0;
};

struct __declspec(uuid("b1e8e5a4-224c-4e6c-8975-243c13e20048"))
IUtility : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT CreateFixedBillboard (
        _bstr_t Text,
        struct ITextAttribute * TextAttribute,
        float Height,
        float Width,
        VARIANT_BOOL DoubleFace,
        struct IModel * * Model,
        struct IImage * * Image,
        BSTR * ImageName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateFixedBillboard (
        BSTR Text,
        struct ITextAttribute * TextAttribute,
        float Height,
        float Width,
        VARIANT_BOOL DoubleFace,
        /*[out]*/ struct IModel * * Model,
        /*[out]*/ struct IImage * * Image,
        /*[out]*/ BSTR * ImageName ) = 0;
};

struct __declspec(uuid("f9e2bc5e-6750-4ad7-b009-4951ce9b0893"))
ITerrainVideoConfig : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxRealtimeTVNum,put=PutMaxRealtimeTVNum))
    long MaxRealtimeTVNum;
    __declspec(property(get=GetMaxVisualFieldTVNum,put=PutMaxVisualFieldTVNum))
    long MaxVisualFieldTVNum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPriorityDisplay (
        struct ITerrainVideo * Video );
    long GetMaxRealtimeTVNum ( );
    void PutMaxRealtimeTVNum (
        long pVal );
    long GetMaxVisualFieldTVNum ( );
    void PutMaxVisualFieldTVNum (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPriorityDisplay (
        struct ITerrainVideo * Video ) = 0;
      virtual HRESULT __stdcall get_MaxRealtimeTVNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRealtimeTVNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxVisualFieldTVNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxVisualFieldTVNum (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("7b4880b2-c619-4eb1-987a-8b0a46bbb3b8"))
IProject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNeedSave))
    VARIANT_BOOL NeedSave;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    HRESULT Open (
        _bstr_t ProjectPath,
        VARIANT_BOOL Asynchronous,
        _bstr_t Password );
    HRESULT Save ( );
    _bstr_t SaveAs (
        _bstr_t ProjectFileName );
    VARIANT_BOOL Close ( );
    HRESULT PackReplaceConnectionString (
        _bstr_t OldString,
        _bstr_t NewString );
    VARIANT_BOOL PackGetInfo (
        _bstr_t Path,
        VARIANT_BOOL IgnoreBigDataFile,
        unsigned __int64 * DiskFreeSize,
        unsigned __int64 * ResTotalSize,
        unsigned long * ResFileNumber );
    VARIANT_BOOL PackResFile ( );
    VARIANT_BOOL GetNeedSave ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Open (
        BSTR ProjectPath,
        VARIANT_BOOL Asynchronous,
        BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        BSTR ProjectFileName,
        /*[out,retval]*/ BSTR * CepFullPath ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[out,retval]*/ VARIANT_BOOL * IsClosed ) = 0;
      virtual HRESULT __stdcall raw_PackReplaceConnectionString (
        BSTR OldString,
        BSTR NewString ) = 0;
      virtual HRESULT __stdcall raw_PackGetInfo (
        BSTR Path,
        VARIANT_BOOL IgnoreBigDataFile,
        /*[out]*/ unsigned __int64 * DiskFreeSize,
        /*[out]*/ unsigned __int64 * ResTotalSize,
        /*[out]*/ unsigned long * ResFileNumber,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_PackResFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_NeedSave (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("9cefc9d0-8d2f-48cf-8f29-734a6e1e4614"))
IHeatMapPlayer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlpha,put=PutAlpha))
    double Alpha;

    //
    // Wrapper methods for error-handling
    //

    double GetAlpha ( );
    void PutAlpha (
        double pVal );
    VARIANT_BOOL StartPlay (
        DATE StartTime,
        DATE EndTime,
        double Duration );
    VARIANT_BOOL SetTime (
        DATE CurTime );
    HRESULT Pause ( );
    HRESULT Continue ( );
    HRESULT Stop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Alpha (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alpha (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_StartPlay (
        DATE StartTime,
        DATE EndTime,
        double Duration,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTime (
        DATE CurTime,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Continue ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
};

struct __declspec(uuid("2ab7a26d-d45c-4cc1-b2b5-76bc7295e0c3"))
IUIRect : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        double LeftScale,
        double LeftOffset,
        double TopScale,
        double TopOffset,
        double RightScale,
        double RightOffset,
        double BottomScale,
        double BottomOffset );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        double LeftScale,
        double LeftOffset,
        double TopScale,
        double TopOffset,
        double RightScale,
        double RightOffset,
        double BottomScale,
        double BottomOffset ) = 0;
};

struct __declspec(uuid("1d7d71b2-6b70-47d6-b891-4a290c68544e"))
IUIWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsDisabled,put=PutIsDisabled))
    VARIANT_BOOL IsDisabled;
    __declspec(property(get=GetType))
    enum gviUIWindowType Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsDisabled ( );
    void PutIsDisabled (
        VARIANT_BOOL pVal );
    enum gviUIWindowType GetType ( );
    HRESULT SetArea (
        struct IUIRect * newVal );
    HRESULT SubscribeEvent (
        enum gviUIEventType eventType );
    HRESULT UnsubscribeEvent (
        enum gviUIEventType eventType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsDisabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDisabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviUIWindowType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetArea (
        struct IUIRect * newVal ) = 0;
      virtual HRESULT __stdcall raw_SubscribeEvent (
        enum gviUIEventType eventType ) = 0;
      virtual HRESULT __stdcall raw_UnsubscribeEvent (
        enum gviUIEventType eventType ) = 0;
};

struct __declspec(uuid("62589dd9-b3ee-4b0c-96d5-fa70f3430b58"))
IUIImageButton : IUIWindow
{
    //
    // Property data
    //

    __declspec(property(put=PutNormalImage))
    _bstr_t NormalImage;
    __declspec(property(put=PutHoverImage))
    _bstr_t HoverImage;
    __declspec(property(put=PutPushedImage))
    _bstr_t PushedImage;
    __declspec(property(put=PutDisabledImage))
    _bstr_t DisabledImage;

    //
    // Wrapper methods for error-handling
    //

    void PutNormalImage (
        _bstr_t _arg1 );
    void PutHoverImage (
        _bstr_t _arg1 );
    void PutPushedImage (
        _bstr_t _arg1 );
    void PutDisabledImage (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_NormalImage (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_HoverImage (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_PushedImage (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_DisabledImage (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("b60bcd84-37da-411e-93ce-84a44d081966"))
IUIWindowManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IUIImageButtonPtr CreateImageButton ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateImageButton (
        /*[out,retval]*/ struct IUIImageButton * * pVal ) = 0;
};

struct __declspec(uuid("094bf4d4-ac3d-4e31-a36d-fda09ca19a3a"))
IUIEventArgs : IDispatch
{};

struct __declspec(uuid("82aeb9ba-96f6-4dcf-9f67-82e29e0df371"))
_IRenderControlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL RcLButtonDown (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcLButtonUp (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcLButtonDblClk (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcMButtonDown (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcMButtonUp (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcMButtonDblClk (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcRButtonDown (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcRButtonUp (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcRButtonDblClk (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcMouseMove (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcMouseHover (
        unsigned long Flags,
        long X,
        long Y );
    VARIANT_BOOL RcMouseWheel (
        unsigned long Flags,
        short Delta,
        long X,
        long Y );
    VARIANT_BOOL RcChar (
        unsigned long Flags,
        unsigned long Char );
    VARIANT_BOOL RcKeyDown (
        unsigned long Flags,
        unsigned long Char );
    VARIANT_BOOL RcKeyUp (
        unsigned long Flags,
        unsigned long Char );
    HRESULT RcDragEnter (
        IUnknown * DataObject,
        unsigned long KeyState,
        long X,
        long Y,
        unsigned long * Effect );
    HRESULT RcDragOver (
        unsigned long KeyState,
        long X,
        long Y,
        unsigned long Effect );
    HRESULT RcDragLeave ( );
    HRESULT RcDrop (
        IUnknown * DataObject,
        unsigned long KeyState,
        long X,
        long Y,
        unsigned long * Effect );
    HRESULT RcMouseClickSelect (
        struct IPickResult * PickResult,
        struct IPoint * IntersectPoint,
        enum gviModKeyMask Mask,
        enum gviMouseSelectMode EventSender );
    HRESULT RcMouseDragSelect (
        struct IPickResultCollection * PickResults,
        enum gviModKeyMask Mask );
    HRESULT RcPictureExportBegin (
        long NumberOfWidth,
        long NumberOfHeight );
    HRESULT RcPictureExporting (
        long Index,
        float Percentage );
    HRESULT RcPictureExportEnd (
        double Time,
        VARIANT_BOOL IsAborted );
    HRESULT RcCameraFlyFinished (
        unsigned char Type );
    HRESULT RcCameraTourWaypointChanged (
        long Index );
    HRESULT RcVideoExportBegin (
        double TotalTime );
    HRESULT RcVideoExporting (
        float Percentage );
    HRESULT RcVideoExportEnd (
        double Time,
        VARIANT_BOOL IsAborted );
    HRESULT RcDataSourceDisconnected (
        _bstr_t DataSourceGuid,
        _bstr_t ConnectionInfo );
    HRESULT RcObjectEditing (
        struct IGeometry * Geometry );
    HRESULT RcObjectEditFinish ( );
    HRESULT RcTransformHelperBegin ( );
    HRESULT RcTransformHelperEnd ( );
    HRESULT RcTransformHelperMoving (
        struct IVector3 * Position );
    HRESULT RcTransformHelperRotating (
        struct IVector3 * Axis,
        double Angle );
    HRESULT RcTransformHelperScaling (
        struct IVector3 * Scale );
    HRESULT RcTransformHelperBoxScaling (
        struct IVector3 * Center,
        struct IVector3 * Scale );
    HRESULT RcFeaturesMoving (
        struct IVector3 * Translate );
    HRESULT RcCameraUndoRedoStatusChanged ( );
    VARIANT_BOOL RcResPacking (
        long TotalResNo,
        long CurResIndex );
    HRESULT RcBeforePresentationItemActivation (
        _bstr_t PresentationID,
        struct IPresentationStep * Step );
    HRESULT RcPresentationFlyToReachedDestination (
        _bstr_t PresentationID,
        struct IPresentationStep * Step );
    HRESULT RcPresentationStatusChanged (
        _bstr_t PresentationID,
        enum gviPresentationStatus Status );
    HRESULT RcUIWindowEvent (
        struct IUIEventArgs * EventArgs,
        enum gviUIEventType eventType );
    HRESULT RcProjectChanged ( );
};

struct __declspec(uuid("a8493829-38bf-4bce-8d1a-45d96b38095e"))
IExportManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL ExportImage (
        _bstr_t FilePath,
        unsigned long Width,
        unsigned long Height,
        VARIANT_BOOL HighQuality );
    VARIANT_BOOL ExportOrthoImage (
        _bstr_t FilePath,
        unsigned long Width,
        struct IPoint * Center,
        struct IEulerAngle * Angle,
        struct IEnvelope * OrthoBox,
        VARIANT_BOOL HighQuality,
        OLE_COLOR BackgroundColor );
    HRESULT CancelExport ( );
    VARIANT_BOOL ExportDOM (
        _bstr_t FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel );
    VARIANT_BOOL ExportDEM (
        _bstr_t FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel );
    VARIANT_BOOL Export25D (
        _bstr_t FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel,
        struct IEulerAngle * Angle );
    VARIANT_BOOL Export25DEx (
        _bstr_t FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel,
        struct IEulerAngle * Angle,
        SAFEARRAY * FeatureClassIds,
        VARIANT_BOOL ExportShpOnly );
    VARIANT_BOOL ExportPanorama (
        _bstr_t FilePath,
        unsigned long Width,
        struct IPoint * Center,
        struct IEulerAngle * Angle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExportImage (
        BSTR FilePath,
        unsigned long Width,
        unsigned long Height,
        VARIANT_BOOL HighQuality,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportOrthoImage (
        BSTR FilePath,
        unsigned long Width,
        struct IPoint * Center,
        struct IEulerAngle * Angle,
        struct IEnvelope * OrthoBox,
        VARIANT_BOOL HighQuality,
        OLE_COLOR BackgroundColor,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CancelExport ( ) = 0;
      virtual HRESULT __stdcall raw_ExportDOM (
        BSTR FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportDEM (
        BSTR FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Export25D (
        BSTR FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel,
        struct IEulerAngle * Angle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Export25DEx (
        BSTR FilePath,
        struct IEnvelope * Box,
        float MeterPerPixel,
        struct IEulerAngle * Angle,
        SAFEARRAY * FeatureClassIds,
        VARIANT_BOOL ExportShpOnly,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportPanorama (
        BSTR FilePath,
        unsigned long Width,
        struct IPoint * Center,
        struct IEulerAngle * Angle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b97a7ec9-bf13-45d8-8c76-9f7a41542aff"))
IRenderControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUtility))
    IUtilityPtr Utility;
    __declspec(property(get=GetInteractMode,put=PutInteractMode))
    enum gviInteractMode InteractMode;
    __declspec(property(get=GetTerrainVideoConfig))
    ITerrainVideoConfigPtr TerrainVideoConfig;
    __declspec(property(get=GetMouseSelectMode,put=PutMouseSelectMode))
    enum gviMouseSelectMode MouseSelectMode;
    __declspec(property(get=GetProject))
    IProjectPtr Project;
    __declspec(property(get=GetMouseSelectObjectMask,put=PutMouseSelectObjectMask))
    enum gviMouseSelectObjectMask MouseSelectObjectMask;
    __declspec(property(get=GetProjectTree))
    IProjectTreePtr ProjectTree;
    __declspec(property(get=GetFullScreen,put=PutFullScreen))
    VARIANT_BOOL FullScreen;
    __declspec(property(get=GetHeatMapPlayer))
    IHeatMapPlayerPtr HeatMapPlayer;
    __declspec(property(get=GetTransformHelper))
    ITransformHelperPtr TransformHelper;
    __declspec(property(get=GetObjectEditor))
    IObjectEditorPtr ObjectEditor;
    __declspec(property(get=GetCamera))
    ICameraPtr Camera;
    __declspec(property(get=GetTerrain))
    ITerrainPtr Terrain;
    __declspec(property(get=GetFeatureManager))
    IFeatureManagerPtr FeatureManager;
    __declspec(property(get=GetObjectManager))
    IObjectManagerPtr ObjectManager;
    __declspec(property(get=GetCacheManager))
    ICacheManagerPtr CacheManager;
    __declspec(property(get=GetExportManager))
    IExportManagerPtr ExportManager;
    __declspec(property(get=GetUIWindowManager))
    IUIWindowManagerPtr UIWindowManager;
    __declspec(property(get=GetViewport))
    IViewportPtr Viewport;
    __declspec(property(get=GetMouseCursor,put=PutMouseCursor))
    _bstr_t MouseCursor;
    __declspec(property(get=GetMeasurementMode,put=PutMeasurementMode))
    enum gviMeasurementMode MeasurementMode;
    __declspec(property(get=GetClipMode,put=PutClipMode))
    enum gviClipMode ClipMode;
    __declspec(property(get=GetVisualAnalysis))
    IVisualAnalysisPtr VisualAnalysis;
    __declspec(property(get=GetHighlightHelper))
    IHighlightHelperPtr HighlightHelper;
    __declspec(property(get=GetIsFocus))
    VARIANT_BOOL IsFocus;
    __declspec(property(get=GetSunConfig))
    ISunConfigPtr SunConfig;
    __declspec(property(get=GetMouseSnapMode,put=PutMouseSnapMode))
    enum gviMouseSnapMode MouseSnapMode;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Initialize (
        VARIANT_BOOL IsPlanarTerrain,
        struct IPropertySet * Params );
    HRESULT RefreshModel (
        struct IFeatureDataSet * DataSet,
        _bstr_t ModelName );
    HRESULT RefreshImage (
        struct IFeatureDataSet * DataSet,
        _bstr_t ImageName );
    void PutOnFrameInvoke (
        IDispatch * _arg1 );
    enum gviInteractMode GetInteractMode ( );
    void PutInteractMode (
        enum gviInteractMode pVal );
    enum gviMouseSelectMode GetMouseSelectMode ( );
    void PutMouseSelectMode (
        enum gviMouseSelectMode pVal );
    enum gviMouseSelectObjectMask GetMouseSelectObjectMask ( );
    void PutMouseSelectObjectMask (
        enum gviMouseSelectObjectMask pVal );
    VARIANT_BOOL GetFullScreen ( );
    void PutFullScreen (
        VARIANT_BOOL pVal );
    ITransformHelperPtr GetTransformHelper ( );
    IObjectEditorPtr GetObjectEditor ( );
    ICameraPtr GetCamera ( );
    ITerrainPtr GetTerrain ( );
    IFeatureManagerPtr GetFeatureManager ( );
    IObjectManagerPtr GetObjectManager ( );
    ICacheManagerPtr GetCacheManager ( );
    IExportManagerPtr GetExportManager ( );
    HRESULT Reconnect ( );
    IViewportPtr GetViewport ( );
    HRESULT Reset (
        VARIANT_BOOL IsPlanarTerrain );
    _bstr_t GetMouseCursor ( );
    void PutMouseCursor (
        _bstr_t pVal );
    enum gviMeasurementMode GetMeasurementMode ( );
    void PutMeasurementMode (
        enum gviMeasurementMode pVal );
    enum gviClipMode GetClipMode ( );
    void PutClipMode (
        enum gviClipMode pVal );
    IVisualAnalysisPtr GetVisualAnalysis ( );
    IHighlightHelperPtr GetHighlightHelper ( );
    HRESULT PauseRendering (
        VARIANT_BOOL DumpMemory );
    HRESULT ResumeRendering ( );
    long GetLastError ( );
    VARIANT_BOOL GetIsFocus ( );
    _bstr_t GetTerrainCrsWKT (
        _bstr_t LayerInfo,
        _bstr_t Password );
    VARIANT_BOOL Initialize2 (
        _bstr_t CrsWKT,
        struct IPropertySet * Params );
    HRESULT Reset2 (
        _bstr_t CrsWKT );
    _bstr_t GetCurrentCrsWKT ( );
    ISunConfigPtr GetSunConfig ( );
    enum gviMouseSnapMode GetMouseSnapMode ( );
    void PutMouseSnapMode (
        enum gviMouseSnapMode pVal );
    HRESULT SetRenderParam (
        enum gviRenderControlParameters Param,
        const _variant_t & newVal );
    _variant_t GetRenderParam (
        enum gviRenderControlParameters Param );
    enum gviManipulatorMode GetUseEarthOrbitManipulator ( );
    void PutUseEarthOrbitManipulator (
        enum gviManipulatorMode pVal );
    IUtilityPtr GetUtility ( );
    ITerrainVideoConfigPtr GetTerrainVideoConfig ( );
    IProjectPtr GetProject ( );
    IProjectTreePtr GetProjectTree ( );
    IHeatMapPlayerPtr GetHeatMapPlayer ( );
    IUIWindowManagerPtr GetUIWindowManager ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        VARIANT_BOOL IsPlanarTerrain,
        struct IPropertySet * Params,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RefreshModel (
        struct IFeatureDataSet * DataSet,
        BSTR ModelName ) = 0;
      virtual HRESULT __stdcall raw_RefreshImage (
        struct IFeatureDataSet * DataSet,
        BSTR ImageName ) = 0;
      virtual HRESULT __stdcall put_OnFrameInvoke (
        IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall get_InteractMode (
        /*[out,retval]*/ enum gviInteractMode * pVal ) = 0;
      virtual HRESULT __stdcall put_InteractMode (
        /*[in]*/ enum gviInteractMode pVal ) = 0;
      virtual HRESULT __stdcall get_MouseSelectMode (
        /*[out,retval]*/ enum gviMouseSelectMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MouseSelectMode (
        /*[in]*/ enum gviMouseSelectMode pVal ) = 0;
      virtual HRESULT __stdcall get_MouseSelectObjectMask (
        /*[out,retval]*/ enum gviMouseSelectObjectMask * pVal ) = 0;
      virtual HRESULT __stdcall put_MouseSelectObjectMask (
        /*[in]*/ enum gviMouseSelectObjectMask pVal ) = 0;
      virtual HRESULT __stdcall get_FullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FullScreen (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TransformHelper (
        /*[out,retval]*/ struct ITransformHelper * * pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectEditor (
        /*[out,retval]*/ struct IObjectEditor * * pVal ) = 0;
      virtual HRESULT __stdcall get_Camera (
        /*[out,retval]*/ struct ICamera * * pVal ) = 0;
      virtual HRESULT __stdcall get_Terrain (
        /*[out,retval]*/ struct ITerrain * * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureManager (
        /*[out,retval]*/ struct IFeatureManager * * pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectManager (
        /*[out,retval]*/ struct IObjectManager * * pVal ) = 0;
      virtual HRESULT __stdcall get_CacheManager (
        /*[out,retval]*/ struct ICacheManager * * pVal ) = 0;
      virtual HRESULT __stdcall get_ExportManager (
        /*[out,retval]*/ struct IExportManager * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reconnect ( ) = 0;
      virtual HRESULT __stdcall get_Viewport (
        /*[out,retval]*/ struct IViewport * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reset (
        VARIANT_BOOL IsPlanarTerrain ) = 0;
      virtual HRESULT __stdcall get_MouseCursor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MouseCursor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MeasurementMode (
        /*[out,retval]*/ enum gviMeasurementMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MeasurementMode (
        /*[in]*/ enum gviMeasurementMode pVal ) = 0;
      virtual HRESULT __stdcall get_ClipMode (
        /*[out,retval]*/ enum gviClipMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ClipMode (
        /*[in]*/ enum gviClipMode pVal ) = 0;
      virtual HRESULT __stdcall get_VisualAnalysis (
        /*[out,retval]*/ struct IVisualAnalysis * * pVal ) = 0;
      virtual HRESULT __stdcall get_HighlightHelper (
        /*[out,retval]*/ struct IHighlightHelper * * pVal ) = 0;
      virtual HRESULT __stdcall raw_PauseRendering (
        VARIANT_BOOL DumpMemory ) = 0;
      virtual HRESULT __stdcall raw_ResumeRendering ( ) = 0;
      virtual HRESULT __stdcall raw_GetLastError (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFocus (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTerrainCrsWKT (
        BSTR LayerInfo,
        BSTR Password,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Initialize2 (
        BSTR CrsWKT,
        struct IPropertySet * Params,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reset2 (
        BSTR CrsWKT ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentCrsWKT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SunConfig (
        /*[out,retval]*/ struct ISunConfig * * pVal ) = 0;
      virtual HRESULT __stdcall get_MouseSnapMode (
        /*[out,retval]*/ enum gviMouseSnapMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MouseSnapMode (
        /*[in]*/ enum gviMouseSnapMode pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRenderParam (
        enum gviRenderControlParameters Param,
        VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_GetRenderParam (
        enum gviRenderControlParameters Param,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_UseEarthOrbitManipulator (
        /*[out,retval]*/ enum gviManipulatorMode * pVal ) = 0;
      virtual HRESULT __stdcall put_UseEarthOrbitManipulator (
        enum gviManipulatorMode pVal ) = 0;
      virtual HRESULT __stdcall get_Utility (
        /*[out,retval]*/ struct IUtility * * pVal ) = 0;
      virtual HRESULT __stdcall get_TerrainVideoConfig (
        /*[out,retval]*/ struct ITerrainVideoConfig * * pVal ) = 0;
      virtual HRESULT __stdcall get_Project (
        /*[out,retval]*/ struct IProject * * pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectTree (
        /*[out,retval]*/ struct IProjectTree * * pVal ) = 0;
      virtual HRESULT __stdcall get_HeatMapPlayer (
        /*[out,retval]*/ struct IHeatMapPlayer * * pVal ) = 0;
      virtual HRESULT __stdcall get_UIWindowManager (
        /*[out,retval]*/ struct IUIWindowManager * * pVal ) = 0;
};

struct __declspec(uuid("41b4b543-232c-444d-8677-e1844d1c6ceb"))
IFeatureLayerPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetFeatureLayer))
    IFeatureLayerPtr FeatureLayer;
    __declspec(property(get=GetFeatureId))
    long FeatureId;

    //
    // Wrapper methods for error-handling
    //

    IFeatureLayerPtr GetFeatureLayer ( );
    long GetFeatureId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FeatureLayer (
        /*[out,retval]*/ struct IFeatureLayer * * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureId (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("eb134a20-1321-4f0b-9ddf-c371a6c6fb1b"))
I3DTileLayerPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTileLayer))
    I3DTileLayerPtr TileLayer;
    __declspec(property(get=GetTileId))
    __int64 TileId;

    //
    // Wrapper methods for error-handling
    //

    I3DTileLayerPtr GetTileLayer ( );
    __int64 GetTileId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TileLayer (
        /*[out,retval]*/ struct I3DTileLayer * * pVal ) = 0;
      virtual HRESULT __stdcall get_TileId (
        /*[out,retval]*/ __int64 * pVal ) = 0;
};

struct __declspec(uuid("c7997773-e33a-472b-9334-ab90b0952a3b"))
IReferencePlanePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetReferencePlane))
    IReferencePlanePtr ReferencePlane;

    //
    // Wrapper methods for error-handling
    //

    IReferencePlanePtr GetReferencePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IReferencePlane * * pVal ) = 0;
};

struct __declspec(uuid("9d8fab54-4430-4e02-b81a-e8d33eb2d4d6"))
ITerrainPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrain))
    ITerrainPtr Terrain;

    //
    // Wrapper methods for error-handling
    //

    ITerrainPtr GetTerrain ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Terrain (
        /*[out,retval]*/ struct ITerrain * * pVal ) = 0;
};

struct __declspec(uuid("07395ef5-6533-4cc4-932b-551fb4ba552d"))
IRenderModelPointPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetModelPoint))
    IRenderModelPointPtr ModelPoint;
    __declspec(property(get=GetDrawGroupIndex))
    long DrawGroupIndex;
    __declspec(property(get=GetPrimitiveIndex))
    long PrimitiveIndex;

    //
    // Wrapper methods for error-handling
    //

    IRenderModelPointPtr GetModelPoint ( );
    long GetDrawGroupIndex ( );
    long GetPrimitiveIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelPoint (
        /*[out,retval]*/ struct IRenderModelPoint * * pVal ) = 0;
      virtual HRESULT __stdcall get_DrawGroupIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PrimitiveIndex (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("4b7951fc-2464-41e9-a4dc-2f7a111be133"))
IRenderPolylinePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetPolyline))
    IRenderPolylinePtr Polyline;

    //
    // Wrapper methods for error-handling
    //

    IRenderPolylinePtr GetPolyline ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Polyline (
        /*[out,retval]*/ struct IRenderPolyline * * pVal ) = 0;
};

struct __declspec(uuid("5e56d641-42a9-42ab-971a-c2e4af20198c"))
IRenderPolygonPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetPolygon))
    IRenderPolygonPtr Polygon;

    //
    // Wrapper methods for error-handling
    //

    IRenderPolygonPtr GetPolygon ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Polygon (
        /*[out,retval]*/ struct IRenderPolygon * * pVal ) = 0;
};

struct __declspec(uuid("6acfad1e-1c58-45a3-aa9b-048b10138928"))
IRenderTriMeshPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTriMesh))
    IRenderTriMeshPtr TriMesh;

    //
    // Wrapper methods for error-handling
    //

    IRenderTriMeshPtr GetTriMesh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TriMesh (
        /*[out,retval]*/ struct IRenderTriMesh * * pVal ) = 0;
};

struct __declspec(uuid("3e0bcecb-0922-4d2c-b092-756aa96a60de"))
IRenderMultiTriMeshPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiTriMesh))
    IRenderMultiTriMeshPtr MultiTriMesh;

    //
    // Wrapper methods for error-handling
    //

    IRenderMultiTriMeshPtr GetMultiTriMesh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiTriMesh (
        /*[out,retval]*/ struct IRenderMultiTriMesh * * pVal ) = 0;
};

struct __declspec(uuid("ed1312b7-1c0f-49a7-9856-c5d46dde1a57"))
IRenderMultiPointPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiPoint))
    IRenderMultiPointPtr MultiPoint;

    //
    // Wrapper methods for error-handling
    //

    IRenderMultiPointPtr GetMultiPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiPoint (
        /*[out,retval]*/ struct IRenderMultiPoint * * pVal ) = 0;
};

struct __declspec(uuid("abb28afc-b056-4675-87b9-9ee55354720d"))
IRenderMultiPolylinePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiPolyline))
    IRenderMultiPolylinePtr MultiPolyline;

    //
    // Wrapper methods for error-handling
    //

    IRenderMultiPolylinePtr GetMultiPolyline ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiPolyline (
        /*[out,retval]*/ struct IRenderMultiPolyline * * pVal ) = 0;
};

struct __declspec(uuid("9a9b2c07-a12f-4114-8003-6bcea95099a4"))
IRenderMultiPolygonPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiPolygon))
    IRenderMultiPolygonPtr MultiPolygon;

    //
    // Wrapper methods for error-handling
    //

    IRenderMultiPolygonPtr GetMultiPolygon ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiPolygon (
        /*[out,retval]*/ struct IRenderMultiPolygon * * pVal ) = 0;
};

struct __declspec(uuid("0806226b-2599-4cdb-bcca-42476780ddf9"))
IRenderPointPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint))
    IRenderPointPtr Point;

    //
    // Wrapper methods for error-handling
    //

    IRenderPointPtr GetPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IRenderPoint * * pVal ) = 0;
};

struct __declspec(uuid("66c817c4-ec9b-4ad3-8cbc-54a18c590484"))
ILabelPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetLabel))
    ILabelPtr Label;

    //
    // Wrapper methods for error-handling
    //

    ILabelPtr GetLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ struct ILabel * * pVal ) = 0;
};

struct __declspec(uuid("c0bc55d7-d30c-43c9-ac4c-bcfc64fc9c28"))
ITableLabelPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTableLabel))
    ITableLabelPtr TableLabel;

    //
    // Wrapper methods for error-handling
    //

    ITableLabelPtr GetTableLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TableLabel (
        /*[out,retval]*/ struct ITableLabel * * pVal ) = 0;
};

struct __declspec(uuid("91c7e95c-ab4f-42bb-b742-9b69695c7e9a"))
IOverlayLabelPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetOverlayLabel))
    IOverlayLabelPtr OverlayLabel;

    //
    // Wrapper methods for error-handling
    //

    IOverlayLabelPtr GetOverlayLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OverlayLabel (
        /*[out,retval]*/ struct IOverlayLabel * * pVal ) = 0;
};

struct __declspec(uuid("bc2c5186-f04e-488f-97b4-ba341773fef9"))
IParticleEffectPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetParticleEffect))
    IParticleEffectPtr ParticleEffect;

    //
    // Wrapper methods for error-handling
    //

    IParticleEffectPtr GetParticleEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParticleEffect (
        /*[out,retval]*/ struct IParticleEffect * * pVal ) = 0;
};

struct __declspec(uuid("33efdbb7-e396-42b0-8974-4c9bad19d9ad"))
ISkinnedMeshPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetSkinnedMesh))
    ISkinnedMeshPtr SkinnedMesh;

    //
    // Wrapper methods for error-handling
    //

    ISkinnedMeshPtr GetSkinnedMesh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SkinnedMesh (
        /*[out,retval]*/ struct ISkinnedMesh * * pVal ) = 0;
};

struct __declspec(uuid("60d59fd6-f89b-4abd-a04c-31786ffa5d05"))
IValueMapTextRender : ITextRender
{
    //
    // Property data
    //

    __declspec(property(get=GetSchemeCount))
    long SchemeCount;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddScheme (
        struct ITextRenderScheme * Scheme );
    HRESULT ClearSchemes ( );
    ITextRenderSchemePtr GetScheme (
        long Index );
    long GetSchemeCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddScheme (
        struct ITextRenderScheme * Scheme ) = 0;
      virtual HRESULT __stdcall raw_ClearSchemes ( ) = 0;
      virtual HRESULT __stdcall raw_GetScheme (
        long Index,
        /*[out,retval]*/ struct ITextRenderScheme * * pVal ) = 0;
      virtual HRESULT __stdcall get_SchemeCount (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("2aabf879-1d58-472e-a782-ecb61d307e2b"))
IToolTipTextRender : ITextRender
{};

struct __declspec(uuid("e10f9f83-849d-404a-9611-532953634f11"))
IValueMapGeometryRender : IGeometryRender
{
    //
    // Property data
    //

    __declspec(property(get=GetSchemeCount))
    long SchemeCount;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddScheme (
        struct IGeometryRenderScheme * Scheme );
    HRESULT ClearSchemes ( );
    IGeometryRenderSchemePtr GetScheme (
        long Index );
    long GetSchemeCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddScheme (
        struct IGeometryRenderScheme * Scheme ) = 0;
      virtual HRESULT __stdcall raw_ClearSchemes ( ) = 0;
      virtual HRESULT __stdcall raw_GetScheme (
        long Index,
        /*[out,retval]*/ struct IGeometryRenderScheme * * pVal ) = 0;
      virtual HRESULT __stdcall get_SchemeCount (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("bc231a67-1b97-44ce-a93b-7343878d4f14"))
ISimpleTextRender : ITextRender
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    ITextSymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    ITextSymbolPtr GetSymbol ( );
    void PutSymbol (
        struct ITextSymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ITextSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct ITextSymbol * pVal ) = 0;
};

struct __declspec(uuid("ec2abc22-3133-4419-96d1-e41cb15c7ddb"))
ISimpleGeometryRender : IGeometryRender
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol,put=PutSymbol))
    IGeometrySymbolPtr Symbol;

    //
    // Wrapper methods for error-handling
    //

    IGeometrySymbolPtr GetSymbol ( );
    void PutSymbol (
        struct IGeometrySymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct IGeometrySymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ struct IGeometrySymbol * pVal ) = 0;
};

struct __declspec(uuid("8dc69217-fb6f-4eac-a2cc-c66e417832a2"))
ISolidSymbol : IGeometrySymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetBoundarySymbol,put=PutBoundarySymbol))
    ICurveSymbolPtr BoundarySymbol;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    ICurveSymbolPtr GetBoundarySymbol ( );
    void PutBoundarySymbol (
        struct ICurveSymbol * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BoundarySymbol (
        /*[out,retval]*/ struct ICurveSymbol * * pVal ) = 0;
      virtual HRESULT __stdcall put_BoundarySymbol (
        /*[in]*/ struct ICurveSymbol * pVal ) = 0;
};

struct __declspec(uuid("180ea143-af76-4137-90dd-623ef2f97ef8"))
ISimplePointSymbol : IPointSymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetFillColor,put=PutFillColor))
    OLE_COLOR FillColor;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    OLE_COLOR OutlineColor;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum gviSimplePointStyle Style;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetFillColor ( );
    void PutFillColor (
        OLE_COLOR pVal );
    OLE_COLOR GetOutlineColor ( );
    void PutOutlineColor (
        OLE_COLOR pVal );
    enum gviSimplePointStyle GetStyle ( );
    void PutStyle (
        enum gviSimplePointStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum gviSimplePointStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum gviSimplePointStyle pVal ) = 0;
};

struct __declspec(uuid("e8eb7e98-7da9-4124-bba6-55dbd781b477"))
IImagePointSymbol : IPointSymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetImageName,put=PutImageName))
    _bstr_t ImageName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetImageName ( );
    void PutImageName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImageName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("11c3ed45-4671-4e74-907d-488537eaf66b"))
IRangeRenderRule : IRenderRule
{
    //
    // Property data
    //

    __declspec(property(get=GetMinValue,put=PutMinValue))
    double MinValue;
    __declspec(property(get=GetMaxValue,put=PutMaxValue))
    double MaxValue;
    __declspec(property(get=GetIncludeMin,put=PutIncludeMin))
    VARIANT_BOOL IncludeMin;
    __declspec(property(get=GetIncludeMax,put=PutIncludeMax))
    VARIANT_BOOL IncludeMax;

    //
    // Wrapper methods for error-handling
    //

    double GetMinValue ( );
    void PutMinValue (
        double pVal );
    double GetMaxValue ( );
    void PutMaxValue (
        double pVal );
    VARIANT_BOOL GetIncludeMin ( );
    void PutIncludeMin (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIncludeMax ( );
    void PutIncludeMax (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeMin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeMax (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("2f0ecf14-822d-4423-80b0-f3fbf4dcd3b5"))
IUniqueValuesRenderRule : IRenderRule
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddValue (
        _bstr_t newValue );
    HRESULT Clear ( );
    _bstr_t GetValue (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddValue (
        BSTR newValue ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        long Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("de5ad8bb-31c1-4045-a8e1-38539604b94f"))
IMotionable : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Bind (
        struct IMotionPath * Path,
        struct IVector3 * PosOffset,
        double HeadingOffset,
        double PitchOffset,
        double RollOffset );
    HRESULT Unbind ( );
    GUID GetMotionPathId ( );
    HRESULT Bind2 (
        struct IDynamicObject * Path,
        struct IVector3 * PosOffset,
        double HeadingOffset,
        double PitchOffset,
        double RollOffset );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Bind (
        struct IMotionPath * Path,
        struct IVector3 * PosOffset,
        double HeadingOffset,
        double PitchOffset,
        double RollOffset ) = 0;
      virtual HRESULT __stdcall raw_Unbind ( ) = 0;
      virtual HRESULT __stdcall raw_GetMotionPathId (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall raw_Bind2 (
        struct IDynamicObject * Path,
        struct IVector3 * PosOffset,
        double HeadingOffset,
        double PitchOffset,
        double RollOffset ) = 0;
};

struct __declspec(uuid("fde4c59c-6c66-404f-8d81-548c86d8d296"))
ITerrainHolePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainHole))
    ITerrainHolePtr TerrainHole;

    //
    // Wrapper methods for error-handling
    //

    ITerrainHolePtr GetTerrainHole ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainHole (
        /*[out,retval]*/ struct ITerrainHole * * pVal ) = 0;
};

struct __declspec(uuid("69381f9d-e213-4547-8dcb-7196311f80cb"))
ITileHolePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTileHole))
    I3DTileHolePtr TileHole;

    //
    // Wrapper methods for error-handling
    //

    I3DTileHolePtr GetTileHole ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TileHole (
        /*[out,retval]*/ struct I3DTileHole * * pVal ) = 0;
};

struct __declspec(uuid("f0002efd-7dd3-4046-a9c6-1209cb588cb0"))
IRenderArrowPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetRenderArrow))
    IRenderArrowPtr RenderArrow;

    //
    // Wrapper methods for error-handling
    //

    IRenderArrowPtr GetRenderArrow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RenderArrow (
        /*[out,retval]*/ struct IRenderArrow * * pVal ) = 0;
};

struct __declspec(uuid("7986f8e3-8570-4726-ad32-0d7afa30d5a1"))
IWindowParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilePath,put=PutFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum gviHTMLWindowPosition Position;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    long OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    long OffsetY;
    __declspec(property(get=GetSizeX,put=PutSizeX))
    long SizeX;
    __declspec(property(get=GetSizeY,put=PutSizeY))
    long SizeY;
    __declspec(property(get=GetShowWindow,put=PutShowWindow))
    VARIANT_BOOL ShowWindow;
    __declspec(property(get=GetHastitle,put=PutHastitle))
    VARIANT_BOOL Hastitle;
    __declspec(property(get=GetHideOnClick,put=PutHideOnClick))
    VARIANT_BOOL HideOnClick;
    __declspec(property(get=GetResetOnHide,put=PutResetOnHide))
    _bstr_t ResetOnHide;
    __declspec(property(get=GetWinId,put=PutWinId))
    long WinId;
    __declspec(property(get=GetRound,put=PutRound))
    long Round;
    __declspec(property(get=GetTransparence,put=PutTransparence))
    unsigned char Transparence;
    __declspec(property(get=GetRgnTemplateFile,put=PutRgnTemplateFile))
    _bstr_t RgnTemplateFile;
    __declspec(property(get=GetRgnTransparentColor,put=PutRgnTransparentColor))
    unsigned long RgnTransparentColor;
    __declspec(property(get=GetCloseButtonEnabled,put=PutCloseButtonEnabled))
    VARIANT_BOOL CloseButtonEnabled;
    __declspec(property(get=GetMinButtonVisible,put=PutMinButtonVisible))
    VARIANT_BOOL MinButtonVisible;
    __declspec(property(get=GetIsPopupWindow,put=PutIsPopupWindow))
    VARIANT_BOOL IsPopupWindow;
    __declspec(property(get=GetResizable,put=PutResizable))
    VARIANT_BOOL Resizable;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilePath ( );
    void PutFilePath (
        _bstr_t pVal );
    enum gviHTMLWindowPosition GetPosition ( );
    void PutPosition (
        enum gviHTMLWindowPosition pVal );
    long GetOffsetX ( );
    void PutOffsetX (
        long pVal );
    long GetOffsetY ( );
    void PutOffsetY (
        long pVal );
    long GetSizeX ( );
    void PutSizeX (
        long pVal );
    long GetSizeY ( );
    void PutSizeY (
        long pVal );
    VARIANT_BOOL GetShowWindow ( );
    void PutShowWindow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHastitle ( );
    void PutHastitle (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHideOnClick ( );
    void PutHideOnClick (
        VARIANT_BOOL pVal );
    _bstr_t GetResetOnHide ( );
    void PutResetOnHide (
        _bstr_t pVal );
    long GetWinId ( );
    void PutWinId (
        long pVal );
    long GetRound ( );
    void PutRound (
        long pVal );
    unsigned char GetTransparence ( );
    void PutTransparence (
        unsigned char pVal );
    _bstr_t GetRgnTemplateFile ( );
    void PutRgnTemplateFile (
        _bstr_t pVal );
    unsigned long GetRgnTransparentColor ( );
    void PutRgnTransparentColor (
        unsigned long pVal );
    VARIANT_BOOL GetCloseButtonEnabled ( );
    void PutCloseButtonEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMinButtonVisible ( );
    void PutMinButtonVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPopupWindow ( );
    void PutIsPopupWindow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetResizable ( );
    void PutResizable (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FilePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum gviHTMLWindowPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum gviHTMLWindowPosition pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SizeX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SizeY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ShowWindow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowWindow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Hastitle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Hastitle (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HideOnClick (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HideOnClick (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ResetOnHide (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ResetOnHide (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_WinId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WinId (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Round (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Round (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Transparence (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparence (
        /*[in]*/ unsigned char pVal ) = 0;
      virtual HRESULT __stdcall get_RgnTemplateFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RgnTemplateFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RgnTransparentColor (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall put_RgnTransparentColor (
        /*[in]*/ unsigned long pVal ) = 0;
      virtual HRESULT __stdcall get_CloseButtonEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CloseButtonEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinButtonVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MinButtonVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPopupWindow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPopupWindow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Resizable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Resizable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("4b1ca4eb-3488-48d9-baea-a6cdfe331afe"))
IHTMLWindow : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ShowPopupWindow (
        _bstr_t URL,
        long SizeX,
        long SizeY,
        VARIANT_BOOL Hastitle,
        enum gviHTMLWindowPosition Position,
        long Round );
    HRESULT ShowPopupWindowEx (
        struct IPoint * Position,
        struct IWindowParam * Param,
        VARIANT_BOOL AutoComputePos );
    HRESULT DeletePopupWindow (
        long WinId );
    HRESULT SetWindowSize (
        long Width,
        long Height,
        long WinId );
    HRESULT HideWindow (
        long WinId );
    IWindowParamPtr CreateWindowParam ( );
    HRESULT SetWindowParam (
        struct IWindowParam * Param );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ShowPopupWindow (
        BSTR URL,
        long SizeX,
        long SizeY,
        VARIANT_BOOL Hastitle,
        enum gviHTMLWindowPosition Position,
        long Round ) = 0;
      virtual HRESULT __stdcall raw_ShowPopupWindowEx (
        struct IPoint * Position,
        struct IWindowParam * Param,
        VARIANT_BOOL AutoComputePos ) = 0;
      virtual HRESULT __stdcall raw_DeletePopupWindow (
        long WinId ) = 0;
      virtual HRESULT __stdcall raw_SetWindowSize (
        long Width,
        long Height,
        long WinId ) = 0;
      virtual HRESULT __stdcall raw_HideWindow (
        long WinId ) = 0;
      virtual HRESULT __stdcall raw_CreateWindowParam (
        /*[out,retval]*/ struct IWindowParam * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetWindowParam (
        struct IWindowParam * Param ) = 0;
};

struct __declspec(uuid("e9c7b499-f8e9-4978-aef0-65f960043315"))
IPolygon3DSymbol : ISurfaceSymbol
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f3453782-b1f5-41c7-9dfa-2dd2b63e9c1c"))
ITerrainModifierPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainModifier))
    ITerrainModifierPtr TerrainModifier;

    //
    // Wrapper methods for error-handling
    //

    ITerrainModifierPtr GetTerrainModifier ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainModifier (
        /*[out,retval]*/ struct ITerrainModifier * * pVal ) = 0;
};

struct __declspec(uuid("80e020ec-c884-41b2-bbd4-991becda1b76"))
ITerrainArrowPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainArrow))
    ITerrainArrowPtr TerrainArrow;

    //
    // Wrapper methods for error-handling
    //

    ITerrainArrowPtr GetTerrainArrow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainArrow (
        /*[out,retval]*/ struct ITerrainArrow * * pVal ) = 0;
};

struct __declspec(uuid("8e37c322-3450-4e63-807d-992fcc53161d"))
ITerrain3DArrowPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrain3DArrow))
    ITerrain3DArrowPtr Terrain3DArrow;

    //
    // Wrapper methods for error-handling
    //

    ITerrain3DArrowPtr GetTerrain3DArrow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Terrain3DArrow (
        /*[out,retval]*/ struct ITerrain3DArrow * * pVal ) = 0;
};

struct __declspec(uuid("b5f89670-2116-4589-89af-6b03489da821"))
ITerrainRegularPolygonPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainRegularPolygon))
    ITerrainRegularPolygonPtr TerrainRegularPolygon;

    //
    // Wrapper methods for error-handling
    //

    ITerrainRegularPolygonPtr GetTerrainRegularPolygon ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainRegularPolygon (
        /*[out,retval]*/ struct ITerrainRegularPolygon * * pVal ) = 0;
};

struct __declspec(uuid("693f9472-595f-47dd-809b-75b1c027eafd"))
ITerrainCylinderPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainCylinder))
    ITerrain3DRegBasePtr TerrainCylinder;

    //
    // Wrapper methods for error-handling
    //

    ITerrain3DRegBasePtr GetTerrainCylinder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainCylinder (
        /*[out,retval]*/ struct ITerrain3DRegBase * * pVal ) = 0;
};

struct __declspec(uuid("e01c38e6-9552-4380-a122-c94352cb3d1b"))
ITerrainConePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainCone))
    ITerrain3DRegBasePtr TerrainCone;

    //
    // Wrapper methods for error-handling
    //

    ITerrain3DRegBasePtr GetTerrainCone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainCone (
        /*[out,retval]*/ struct ITerrain3DRegBase * * pVal ) = 0;
};

struct __declspec(uuid("725f9e08-9de7-4a5e-b844-a05f619dacb0"))
ITerrainRectanglePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainRectangle))
    ITerrainRectanglePtr TerrainRectangle;

    //
    // Wrapper methods for error-handling
    //

    ITerrainRectanglePtr GetTerrainRectangle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainRectangle (
        /*[out,retval]*/ struct ITerrainRectangle * * pVal ) = 0;
};

struct __declspec(uuid("0712d6ec-82d7-4d7c-a23e-f2788891be04"))
ITerrainBoxPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainBox))
    ITerrain3DRectBasePtr TerrainBox;

    //
    // Wrapper methods for error-handling
    //

    ITerrain3DRectBasePtr GetTerrainBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainBox (
        /*[out,retval]*/ struct ITerrain3DRectBase * * pVal ) = 0;
};

struct __declspec(uuid("c012ba11-9e97-46e4-963d-6be80d78512c"))
ITerrainPyramidPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainPyramid))
    ITerrain3DRectBasePtr TerrainPyramid;

    //
    // Wrapper methods for error-handling
    //

    ITerrain3DRectBasePtr GetTerrainPyramid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainPyramid (
        /*[out,retval]*/ struct ITerrain3DRectBase * * pVal ) = 0;
};

struct __declspec(uuid("3e22d6df-d210-4519-97c9-15aa1d1d8286"))
ITerrainEllipsePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainEllipse))
    ITerrainEllipsePtr TerrainEllipse;

    //
    // Wrapper methods for error-handling
    //

    ITerrainEllipsePtr GetTerrainEllipse ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainEllipse (
        /*[out,retval]*/ struct ITerrainEllipse * * pVal ) = 0;
};

struct __declspec(uuid("04828d2a-36d8-4714-a3a8-ab531733b521"))
ITerrainArcPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainArc))
    ITerrainArcPtr TerrainArc;

    //
    // Wrapper methods for error-handling
    //

    ITerrainArcPtr GetTerrainArc ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainArc (
        /*[out,retval]*/ struct ITerrainArc * * pVal ) = 0;
};

struct __declspec(uuid("976ce744-daf7-4610-bc60-dd72120b8046"))
ITerrainSpherePickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainSphere))
    ITerrainSpherePtr TerrainSphere;

    //
    // Wrapper methods for error-handling
    //

    ITerrainSpherePtr GetTerrainSphere ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainSphere (
        /*[out,retval]*/ struct ITerrainSphere * * pVal ) = 0;
};

struct __declspec(uuid("9e5e4991-e881-4e56-86bd-91259c1e6976"))
ITerrainImageLabelPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetTerrainImageLabel))
    ITerrainImageLabelPtr TerrainImageLabel;

    //
    // Wrapper methods for error-handling
    //

    ITerrainImageLabelPtr GetTerrainImageLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TerrainImageLabel (
        /*[out,retval]*/ struct ITerrainImageLabel * * pVal ) = 0;
};

struct __declspec(uuid("54e30068-2ae5-4622-8152-01d5bdf64c07"))
IComplexParticleEffectPickResult : IPickResult
{
    //
    // Property data
    //

    __declspec(property(get=GetComplexParticleEffect))
    IComplexParticleEffectPtr ComplexParticleEffect;

    //
    // Wrapper methods for error-handling
    //

    IComplexParticleEffectPtr GetComplexParticleEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComplexParticleEffect (
        /*[out,retval]*/ struct IComplexParticleEffect * * pVal ) = 0;
};

struct __declspec(uuid("fc6f3282-cd4b-4fa6-878f-3f22187e1c60"))
IUIWindowEventArgs : IUIEventArgs
{
    //
    // Property data
    //

    __declspec(property(get=GetUIWindow))
    IUIWindowPtr UIWindow;

    //
    // Wrapper methods for error-handling
    //

    IUIWindowPtr GetUIWindow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UIWindow (
        /*[out,retval]*/ struct IUIWindow * * pVal ) = 0;
};

struct __declspec(uuid("38a69005-0d09-442f-af8c-1bf6650bd25f"))
IUIMouseEventArgs : IUIWindowEventArgs
{
    //
    // Property data
    //

    __declspec(property(get=GetClickCount))
    long ClickCount;
    __declspec(property(get=GetSysKeys))
    long SysKeys;
    __declspec(property(get=GetWheelChange))
    float WheelChange;
    __declspec(property(get=GetButton))
    enum gviUIMouseButtonType Button;
    __declspec(property(get=GetMoveDelta))
    SAFEARRAY * MoveDelta;
    __declspec(property(get=GetPosition))
    SAFEARRAY * Position;

    //
    // Wrapper methods for error-handling
    //

    long GetClickCount ( );
    long GetSysKeys ( );
    float GetWheelChange ( );
    enum gviUIMouseButtonType GetButton ( );
    SAFEARRAY * GetMoveDelta ( );
    SAFEARRAY * GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ClickCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SysKeys (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_WheelChange (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall get_Button (
        /*[out,retval]*/ enum gviUIMouseButtonType * pVal ) = 0;
      virtual HRESULT __stdcall get_MoveDelta (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

struct __declspec(uuid("b8e9dce1-35be-4b01-8dcc-40df1de2cce7"))
IInternalTool : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMsgChainFlags,put=PutMsgChainFlags))
    long MsgChainFlags;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetCursorPos (
        long X,
        long Y );
    HRESULT DoMouseEvent (
        unsigned char MouseButton,
        long X,
        long Y );
    VARIANT_BOOL CaptureWindow (
        _bstr_t ImagePath );
    HRESULT CoordClientToScreen (
        long X,
        long Y,
        long * OutX,
        long * OutY );
    float CompareImage (
        long Id,
        _bstr_t Image1,
        _bstr_t Image2 );
    _bstr_t GetRuntimeTempPath ( );
    HRESULT IsFirefox (
        VARIANT_BOOL newVal );
    long GetMsgChainFlags ( );
    void PutMsgChainFlags (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCursorPos (
        long X,
        long Y ) = 0;
      virtual HRESULT __stdcall raw_DoMouseEvent (
        unsigned char MouseButton,
        long X,
        long Y ) = 0;
      virtual HRESULT __stdcall raw_CaptureWindow (
        BSTR ImagePath,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CoordClientToScreen (
        long X,
        long Y,
        /*[out]*/ long * OutX,
        /*[out]*/ long * OutY ) = 0;
      virtual HRESULT __stdcall raw_CompareImage (
        long Id,
        BSTR Image1,
        BSTR Image2,
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRuntimeTempPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsFirefox (
        VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall get_MsgChainFlags (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MsgChainFlags (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("afaeaf51-f4be-4cdc-8ad1-de792646c0b2"))
IInternalLicenseKey : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long SetLicenseKey (
        _bstr_t newVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetLicenseKey (
        BSTR newVal,
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("56c08a7c-1ecd-40a1-89f0-5b919e12ad0f"))
RenderControl;
    // interface IInternalLicenseKey
    // interface IHTMLWindow
    // interface IInternalTool
    // [ default ] interface IRenderControl
    // [ default, source ] dispinterface _IRenderControlEvents

struct __declspec(uuid("8e3976e8-fd1f-4206-8668-7df6e06b3acf"))
ValueMapTextRender;
    // [ default ] interface IDispatch
    // interface IValueMapTextRender

struct __declspec(uuid("18491a4d-f5bd-4ecb-b406-071d90754dac"))
ValueMapGeometryRender;
    // [ default ] interface IDispatch
    // interface IValueMapGeometryRender

struct __declspec(uuid("a5f26b69-0e33-4e97-ade2-d2415549eb9c"))
TextSymbol;
    // [ default ] interface IDispatch
    // interface ITextSymbol

struct __declspec(uuid("378fc90e-a630-4a19-a17c-6eaa5930c2d2"))
TextRenderScheme;
    // [ default ] interface IDispatch
    // interface ITextRenderScheme

struct __declspec(uuid("4231a35c-f1ae-428e-a301-7ac9a8e7d003"))
RenderRule;
    // [ default ] interface IDispatch
    // interface IRenderRule

struct __declspec(uuid("2d6d9091-f2d2-433b-9ffb-1038f84414e0"))
RangeRenderRule;
    // [ default ] interface IDispatch
    // interface IRangeRenderRule

struct __declspec(uuid("c5285931-1954-4971-bc5d-9a84e8930b18"))
UniqueValuesRenderRule;
    // [ default ] interface IDispatch
    // interface IUniqueValuesRenderRule

struct __declspec(uuid("2ef5c1a8-09c0-4850-b9a3-c1fd46343921"))
GeometryRenderScheme;
    // [ default ] interface IDispatch
    // interface IGeometryRenderScheme

struct __declspec(uuid("e02c69c4-828d-40d5-869d-daeb189b7f6f"))
CurveSymbol;
    // [ default ] interface IDispatch
    // interface ICurveSymbol

struct __declspec(uuid("4d5f0624-50a1-43e2-a0ec-a9713cb25608"))
SurfaceSymbol;
    // [ default ] interface IDispatch
    // interface ISurfaceSymbol

struct __declspec(uuid("d7a14a22-a1eb-4c17-b435-a2d374b0ee63"))
SolidSymbol;
    // [ default ] interface IDispatch
    // interface ISolidSymbol

struct __declspec(uuid("6bcf8c9b-e506-43ae-ad6e-44a41d748431"))
ModelPointSymbol;
    // [ default ] interface IDispatch
    // interface IModelPointSymbol

struct __declspec(uuid("6669a2d9-ba75-4b24-bf75-d1120b790ae9"))
SimplePointSymbol;
    // [ default ] interface IDispatch
    // interface ISimplePointSymbol

struct __declspec(uuid("1259ea77-ad6e-4096-9018-b68e401d0bc8"))
ImagePointSymbol;
    // [ default ] interface IDispatch
    // interface IImagePointSymbol

struct __declspec(uuid("6346576d-6fec-46b1-bea9-9cbe87b91e7e"))
RenderGeometry;
    // interface IRenderGeometry
    // interface IMotionable
    // [ default ] interface IDispatch

struct __declspec(uuid("a7a340e6-f14a-4ef4-8117-9b30dd6382b4"))
SimpleTextRender;
    // [ default ] interface ISimpleTextRender

struct __declspec(uuid("99a8f9d6-87af-4613-b52d-8958e9783b25"))
SimpleGeometryRender;
    // [ default ] interface ISimpleGeometryRender

struct __declspec(uuid("e766350c-4ee2-4c4a-96b2-bfe175a6724c"))
TextAttribute;
    // [ default ] interface ITextAttribute

struct __declspec(uuid("e8135b91-787b-4468-9c4a-0bbf590c760c"))
IReferenceHelper : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataInterop))
    IDataInteropPtr DataInterop;
    __declspec(property(get=GetCommandManager))
    ICommandManagerPtr CommandManager;

    //
    // Wrapper methods for error-handling
    //

    IDataInteropPtr GetDataInterop ( );
    ICommandManagerPtr GetCommandManager ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataInterop (
        /*[out,retval]*/ struct IDataInterop * * pVal ) = 0;
      virtual HRESULT __stdcall get_CommandManager (
        /*[out,retval]*/ struct ICommandManager * * pVal ) = 0;
};

struct __declspec(uuid("49450aa4-1405-476f-b0ad-329f2c57d9bb"))
ReferenceHelper;
    // [ default ] interface IReferenceHelper

struct __declspec(uuid("3810c873-a111-4fd8-b46e-3e5006cee24c"))
RasterSymbol;
    // [ default ] interface IDispatch
    // interface IRasterSymbol

struct __declspec(uuid("4d366f90-76ee-4792-89d8-9cd7104b5827"))
WindowParam;
    // [ default ] interface IWindowParam

struct __declspec(uuid("a9a32e46-0a80-45bd-b416-736b9afc2e1e"))
Polygon3DSymbol;
    // [ default ] interface IPolygon3DSymbol

struct __declspec(uuid("eae67ef8-efd2-4b4f-a57e-76afe564be1d"))
PointCloudSymbol;
    // [ default ] interface IPointCloudSymbol

struct __declspec(uuid("1ce9f150-0e51-4ec3-879a-7d551336dbe7"))
LineStyle;
    // [ default ] interface IDispatch
    // interface ILineStyle

struct __declspec(uuid("d02be655-bdc4-4cfd-9b2a-e1b6dab822da"))
FillStyle;
    // [ default ] interface IDispatch
    // interface IFillStyle

struct __declspec(uuid("be1685b6-06ac-40c0-9ec0-f02776f152c6"))
ObjectTexture;
    // [ default ] interface IDispatch
    // interface IObjectTexture

struct __declspec(uuid("dde69f72-ba06-4727-a402-a50e8882226a"))
Position;
    // [ default ] interface IDispatch
    // interface IPosition

struct __declspec(uuid("0716d0e7-d269-4f23-a010-88c5cab3db7a"))
LabelStyle;
    // [ default ] interface IDispatch
    // interface ILabelStyle

struct __declspec(uuid("07818b22-d636-4aab-ac40-13325f7f6a2c"))
UIRect;
    // [ default ] interface IDispatch
    // interface IUIRect

struct __declspec(uuid("e5e8405e-d964-4952-b795-ecbe174da7e8"))
ToolTipTextRender;
    // [ default ] interface IToolTipTextRender

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_GcmRenderControl =
    {0x2b31d54f,0x48c9,0x445b,{0x8b,0xdc,0x32,0xa0,0x6b,0xac,0x38,0xff}};
extern "C" const GUID __declspec(selectany) IID_IRObject =
    {0x682ac2c1,0x490e,0x4820,{0xa7,0xfe,0x7a,0xb4,0x60,0xda,0x00,0x2d}};
extern "C" const GUID __declspec(selectany) IID_IRenderable =
    {0xd2527ea6,0x02ff,0x4bab,{0x81,0xbc,0x37,0x2f,0x3f,0x32,0x43,0xf6}};
extern "C" const GUID __declspec(selectany) IID_IRenderGeometry =
    {0x7c70c1e4,0x9a28,0x48c2,{0xba,0x45,0x30,0x5b,0x4d,0xdf,0x58,0x37}};
extern "C" const GUID __declspec(selectany) IID_IReferencePlane =
    {0x39fff071,0xef9e,0x4002,{0x9f,0x57,0xc1,0xa7,0x9b,0x4e,0xf5,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IFeatureManager =
    {0xd0b1e4c5,0x5fc6,0x4a03,{0x94,0xdb,0x9b,0xe8,0x9f,0x28,0x85,0x50}};
extern "C" const GUID __declspec(selectany) IID_IPickResult =
    {0xcfaff3e3,0x4b1e,0x4346,{0xbe,0xb5,0xb3,0x1a,0xa9,0x02,0x32,0x1d}};
extern "C" const GUID __declspec(selectany) IID_IPickResultCollection =
    {0x504a18f2,0xc761,0x4961,{0xa7,0xa0,0x0e,0xaa,0x21,0xbd,0xd6,0x98}};
extern "C" const GUID __declspec(selectany) IID_ITransformHelper =
    {0x23f94bbf,0xafb7,0x47f5,{0x86,0xb7,0x7a,0x95,0xbe,0xb1,0x8e,0x2a}};
extern "C" const GUID __declspec(selectany) IID_ICamera =
    {0x509994d1,0x8ff9,0x4b91,{0xa6,0xf3,0x13,0xa5,0x4d,0x10,0x66,0x8c}};
extern "C" const GUID __declspec(selectany) IID_ITerrain =
    {0x33e4cca8,0x412a,0x4701,{0x8e,0x62,0x1f,0x08,0x14,0xa8,0xf9,0x69}};
extern "C" const GUID __declspec(selectany) IID_ISkyBox =
    {0x48fd05c2,0xd6ef,0x4fb8,{0xa3,0x26,0x9e,0x2c,0x07,0xfc,0x17,0x54}};
extern "C" const GUID __declspec(selectany) IID_ITextRender =
    {0xc4100782,0xdedc,0x435c,{0xa2,0x81,0x2b,0x00,0x00,0xec,0xe5,0xef}};
extern "C" const GUID __declspec(selectany) IID_IGeometryRender =
    {0x8ff7cc48,0x1dc6,0x4d19,{0xa8,0xbb,0x88,0x49,0xa6,0x07,0x99,0xad}};
extern "C" const GUID __declspec(selectany) IID_IFeatureClassInfo =
    {0x9b39e213,0xe55f,0x4041,{0xac,0xe8,0x07,0x48,0xde,0x40,0x9e,0xd5}};
extern "C" const GUID __declspec(selectany) IID_IFeatureLayer =
    {0x39b320a8,0xbee1,0x4397,{0x94,0x69,0xe7,0xe6,0xfb,0x05,0x55,0x58}};
extern "C" const GUID __declspec(selectany) IID_ITerrainRoute =
    {0x290f9680,0x65a6,0x426f,{0x9f,0x89,0x29,0x66,0x12,0x27,0x60,0x0d}};
extern "C" const GUID __declspec(selectany) IID_IGeometrySymbol =
    {0xce9e73a0,0x0cdc,0x4620,{0xa2,0x2c,0x66,0xd6,0x2c,0xc4,0x0a,0xb2}};
extern "C" const GUID __declspec(selectany) IID_IModelPointSymbol =
    {0xf0e8f6ed,0x0acc,0x4c1f,{0xae,0x93,0x12,0x52,0xa1,0x38,0x1e,0x30}};
extern "C" const GUID __declspec(selectany) IID_IRenderModelPoint =
    {0x397b609d,0xfdb7,0x43f9,{0x8e,0x6f,0x83,0xf3,0xe1,0x09,0x2a,0x45}};
extern "C" const GUID __declspec(selectany) IID_ICurveSymbol =
    {0xb71725a5,0xdadd,0x4507,{0xab,0x69,0x26,0xf9,0xc1,0x59,0xd9,0x58}};
extern "C" const GUID __declspec(selectany) IID_IRenderPolyline =
    {0x402a94f8,0xf287,0x44be,{0x98,0x52,0x28,0x3b,0x61,0xba,0x11,0x41}};
extern "C" const GUID __declspec(selectany) IID_ISurfaceSymbol =
    {0x76b9d240,0x3e22,0x4cdd,{0x8d,0xf3,0xa8,0x82,0x35,0xf5,0xaa,0x2d}};
extern "C" const GUID __declspec(selectany) IID_IRenderPolygon =
    {0x20879432,0xba26,0x4f04,{0x98,0x4f,0xff,0xfd,0x82,0xfe,0x16,0x0c}};
extern "C" const GUID __declspec(selectany) IID_IRenderTriMesh =
    {0x1a8a249f,0x70df,0x4165,{0xbc,0xb2,0x14,0x6b,0x77,0xcc,0x58,0x8a}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiTriMesh =
    {0xb0e7782a,0xff51,0x4406,{0x93,0xfb,0xa4,0x85,0x7b,0xb8,0x7a,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IPointSymbol =
    {0x58fd4415,0xce35,0x4229,{0xaa,0x64,0xb5,0xc8,0x04,0xdb,0x9d,0x23}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiPoint =
    {0x20c91390,0x58f8,0x4b40,{0xa3,0x93,0xde,0x68,0x81,0x2b,0x45,0xe6}};
extern "C" const GUID __declspec(selectany) IID_ICameraTour =
    {0x82301967,0xe47e,0x4f84,{0x94,0xf5,0xbc,0xdd,0x9f,0x09,0x4b,0xb9}};
extern "C" const GUID __declspec(selectany) IID_IRenderPoint =
    {0x973d963d,0x16b3,0x49c0,{0x95,0x06,0x5b,0xce,0x4e,0x4b,0x40,0xa2}};
extern "C" const GUID __declspec(selectany) IID_IMotionPath =
    {0x62cbef52,0x6bde,0x498d,{0x8f,0x14,0xd9,0xdf,0xaa,0x40,0x67,0xbe}};
extern "C" const GUID __declspec(selectany) IID_IParticleEffect =
    {0x61d7b480,0x85be,0x41d1,{0xa4,0xd7,0x4f,0xc8,0x1f,0xe7,0x64,0x22}};
extern "C" const GUID __declspec(selectany) IID_ITextAttribute =
    {0x04ed9c7e,0xf8a6,0x47ef,{0xa3,0x63,0xa0,0x83,0x23,0x33,0xff,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ITextSymbol =
    {0xb6943399,0xa824,0x4303,{0x9f,0xe6,0xfe,0x3a,0x8c,0xae,0xa8,0x12}};
extern "C" const GUID __declspec(selectany) IID_ILabel =
    {0x60044f43,0xab72,0x4c89,{0xaf,0x93,0x35,0x04,0xe0,0x43,0xcc,0xfd}};
extern "C" const GUID __declspec(selectany) IID_ITableLabel =
    {0x5a733f77,0x4ecb,0x4eb4,{0x94,0x5d,0xd0,0x3f,0x2f,0x8c,0x48,0x43}};
extern "C" const GUID __declspec(selectany) IID_ISkinnedMesh =
    {0xb85304e7,0xfba1,0x46cb,{0x83,0xf6,0x14,0x23,0xd7,0x43,0xfe,0x28}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiPolyline =
    {0xf5a91bc9,0xbf64,0x494f,{0x9a,0xf1,0x83,0x1f,0xfd,0xcb,0x7e,0xcd}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiPolygon =
    {0x137a6c4b,0x8234,0x496f,{0xae,0x2b,0xde,0xb4,0x31,0xd0,0xa8,0x59}};
extern "C" const GUID __declspec(selectany) IID_IProjectTree =
    {0xa4639595,0xafed,0x4bee,{0x88,0x33,0x28,0x87,0x57,0xad,0x76,0x20}};
extern "C" const GUID __declspec(selectany) IID_IRasterSymbol =
    {0x3fb878f8,0x1cfa,0x4b5b,{0xb0,0x2b,0x24,0x59,0x24,0x80,0xd3,0x1a}};
extern "C" const GUID __declspec(selectany) IID_IImageryLayer =
    {0xca6cb811,0x34ae,0x427a,{0xb3,0xa8,0xe4,0x63,0xdd,0x4d,0x2c,0x77}};
extern "C" const GUID __declspec(selectany) IID_ITerrainHole =
    {0x061d4af5,0x7aa4,0x4c53,{0xa7,0x8e,0x3c,0x2c,0x45,0xaf,0x4a,0x03}};
extern "C" const GUID __declspec(selectany) IID_I3DTileHole =
    {0x6094fcc3,0x7826,0x49e6,{0xb8,0x42,0x3f,0xe4,0x47,0x2c,0xf4,0xa2}};
extern "C" const GUID __declspec(selectany) IID_I3DTileLayer =
    {0x2b0b25fe,0x622f,0x4e36,{0x8f,0xbb,0x77,0xad,0x24,0x82,0xb1,0xa1}};
extern "C" const GUID __declspec(selectany) IID_IOverlayLabel =
    {0x8eabfadf,0xbecc,0x431e,{0xbf,0xe0,0x9b,0x27,0x71,0xd6,0x53,0x83}};
extern "C" const GUID __declspec(selectany) IID_ITerrainVideo =
    {0xa9283339,0x0bc9,0x4fae,{0x8b,0x1a,0x87,0x60,0x47,0x41,0xcb,0x68}};
extern "C" const GUID __declspec(selectany) IID_IViewshed =
    {0xff77b913,0x3b1d,0x47f5,{0x9f,0xfe,0x1f,0x4a,0xcf,0x0c,0x91,0x8b}};
extern "C" const GUID __declspec(selectany) IID_IRenderArrow =
    {0x0801bc9f,0xee2d,0x4894,{0x80,0xc1,0x74,0xf8,0xee,0x6d,0xbc,0x50}};
extern "C" const GUID __declspec(selectany) IID_IDynamicObject =
    {0x398b390c,0x53e0,0x482c,{0xb7,0xf7,0x0e,0xd7,0x5e,0xd8,0x93,0x4c}};
extern "C" const GUID __declspec(selectany) IID_ITerrainModifier =
    {0x3459a93b,0xf618,0x47fc,{0x96,0xfa,0xa0,0xfb,0xf5,0x1f,0x1a,0x26}};
extern "C" const GUID __declspec(selectany) IID_IRenderPOI =
    {0xc445ce10,0xb773,0x4c8f,{0x93,0xc3,0xdd,0xd2,0x22,0x4d,0x1f,0x22}};
extern "C" const GUID __declspec(selectany) IID_IWalkGround =
    {0x3abd2631,0x5dd2,0x4dd9,{0xa8,0x46,0xc4,0x7b,0x03,0xbf,0x53,0x63}};
extern "C" const GUID __declspec(selectany) IID_IPosition =
    {0xf54f74a1,0x13df,0x4f77,{0xa2,0x37,0xed,0xfa,0x61,0x3b,0x6d,0x0c}};
extern "C" const GUID __declspec(selectany) IID_IObjectTexture =
    {0xa56dd753,0xc828,0x4b5a,{0xad,0xda,0xe8,0xf3,0x7c,0xd3,0x9d,0xa9}};
extern "C" const GUID __declspec(selectany) IID_IFillStyle =
    {0xd5c81bfa,0xa7fc,0x4521,{0x96,0x15,0x30,0x97,0x42,0x8c,0xed,0xe4}};
extern "C" const GUID __declspec(selectany) IID_ILineStyle =
    {0xe546e5e6,0xb5b6,0x491e,{0xb7,0xed,0x5a,0x44,0x56,0x71,0xa4,0x38}};
extern "C" const GUID __declspec(selectany) IID_ITerrainRegularPolygon =
    {0xab7f099f,0x7786,0x4eee,{0x92,0x9a,0xe6,0xf9,0xd9,0x77,0x98,0x14}};
extern "C" const GUID __declspec(selectany) IID_ITerrain3DRegBase =
    {0x3421f46a,0xe5d8,0x4a1c,{0xb9,0x6e,0xe2,0xe2,0x43,0x08,0xf9,0xcf}};
extern "C" const GUID __declspec(selectany) IID_ITerrainArrow =
    {0x7d808925,0x4271,0x4ce5,{0xad,0x51,0x11,0xbc,0x58,0x76,0x25,0x5e}};
extern "C" const GUID __declspec(selectany) IID_ITerrain3DArrow =
    {0x4e65a284,0x7b30,0x47af,{0x84,0x7b,0x9b,0x07,0x00,0x69,0xf3,0xa1}};
extern "C" const GUID __declspec(selectany) IID_ITerrainRectangle =
    {0xbbe0254c,0xfab1,0x4f93,{0x8a,0x93,0x44,0xc0,0xa0,0xe3,0x21,0x60}};
extern "C" const GUID __declspec(selectany) IID_ITerrain3DRectBase =
    {0x25c009e1,0x1b7f,0x4785,{0xa5,0x4b,0x3b,0xcd,0x07,0x64,0x11,0xf5}};
extern "C" const GUID __declspec(selectany) IID_ITerrainEllipse =
    {0xf3bfeebd,0x9f85,0x40ed,{0xa4,0x2e,0x9a,0x60,0xbd,0xed,0x6b,0xf9}};
extern "C" const GUID __declspec(selectany) IID_ITerrainArc =
    {0x94fe777f,0x56b0,0x4d01,{0x8f,0x5c,0xca,0xf4,0x33,0x22,0x19,0xbf}};
extern "C" const GUID __declspec(selectany) IID_ITerrainSphere =
    {0xddf5c2d6,0x033e,0x4ba3,{0xbb,0xa8,0x36,0x11,0xfe,0x41,0x13,0x82}};
extern "C" const GUID __declspec(selectany) IID_ITerrainLocation =
    {0x639aeaa9,0x012c,0x46cb,{0xa0,0x05,0x7d,0x0b,0x18,0xe9,0x18,0x4a}};
extern "C" const GUID __declspec(selectany) IID_ILabelStyle =
    {0x0bce95b3,0xfa78,0x43c7,{0x97,0x6f,0x97,0xf1,0x74,0xf4,0x87,0x32}};
extern "C" const GUID __declspec(selectany) IID_ITerrainImageLabel =
    {0xdf1b7ab3,0x4cd0,0x480a,{0x9d,0x75,0xcf,0x2f,0xfa,0x40,0xe7,0xb1}};
extern "C" const GUID __declspec(selectany) IID_IPresentationStep =
    {0x0ebdbbb0,0xfaf3,0x4dc8,{0xb6,0x3a,0x33,0xdb,0x67,0x9a,0x2c,0xba}};
extern "C" const GUID __declspec(selectany) IID_IPresentationSteps =
    {0xb91c3dc1,0xde90,0x4cb7,{0x9e,0x01,0x75,0x28,0x19,0x4e,0x30,0xde}};
extern "C" const GUID __declspec(selectany) IID_IPresentation =
    {0x184ea148,0x5929,0x4247,{0x82,0x52,0x4d,0x66,0xac,0xa6,0x69,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IComplexParticleEffect =
    {0xbf86e07f,0xb91c,0x429b,{0x97,0x0d,0x4e,0x0e,0xc5,0xad,0xfa,0xd1}};
extern "C" const GUID __declspec(selectany) IID_IKmlGroup =
    {0x776a4017,0x62a9,0x4423,{0xbd,0xcb,0x33,0xd7,0xd9,0x3b,0xda,0x92}};
extern "C" const GUID __declspec(selectany) IID_IHeatMap =
    {0xf9c2c491,0xac98,0x49a9,{0xa7,0x4e,0x7b,0x5d,0xab,0xe7,0xd8,0x70}};
extern "C" const GUID __declspec(selectany) IID_IOperation =
    {0x60a922db,0xb266,0x4b89,{0xa2,0x1d,0x94,0x43,0x51,0xb8,0x50,0xe1}};
extern "C" const GUID __declspec(selectany) IID_IClipPlaneOperation =
    {0x396ac826,0x06f0,0x4dd8,{0x89,0x89,0x1b,0xdb,0x35,0x4a,0x70,0x71}};
extern "C" const GUID __declspec(selectany) IID_IObjectManager =
    {0x445f62b4,0xa639,0x4523,{0xb1,0x82,0x43,0x31,0xac,0x2f,0x4e,0x33}};
extern "C" const GUID __declspec(selectany) IID_ICacheManager =
    {0x36e556e5,0x5911,0x4007,{0x90,0x20,0xa3,0xff,0x20,0xbf,0x1b,0xa7}};
extern "C" const GUID __declspec(selectany) IID_IRenderRule =
    {0xfaa9cc20,0x2be0,0x4758,{0xa8,0x23,0x82,0x25,0xde,0xbd,0x27,0x5c}};
extern "C" const GUID __declspec(selectany) IID_ITextRenderScheme =
    {0x1375557c,0x4fa1,0x4d81,{0x85,0x39,0x83,0xd8,0xa7,0x9b,0xc5,0x04}};
extern "C" const GUID __declspec(selectany) IID_IGeometryRenderScheme =
    {0x0b4ae2ae,0x415d,0x4d6a,{0xb7,0x43,0xaf,0x57,0x6a,0xe4,0x51,0xba}};
extern "C" const GUID __declspec(selectany) IID_IObjectEditor =
    {0xda8aec8e,0xd300,0x4003,{0x81,0x56,0xe2,0x0e,0xe7,0xcd,0x80,0xc2}};
extern "C" const GUID __declspec(selectany) IID_IViewport =
    {0xa9b78073,0xb0de,0x4182,{0xaa,0x0c,0x13,0x51,0xd8,0x0d,0xe4,0x63}};
extern "C" const GUID __declspec(selectany) IID_IVisualAnalysis =
    {0xb285ecec,0x17b1,0x4857,{0xaa,0xef,0xc4,0xa8,0x35,0xf5,0x09,0x0a}};
extern "C" const GUID __declspec(selectany) IID_IHighlightHelper =
    {0xd23aefa3,0x2600,0x40d9,{0x8b,0x75,0xc4,0x76,0x0e,0x15,0xc6,0x19}};
extern "C" const GUID __declspec(selectany) IID_ISunConfig =
    {0xbd509912,0x45e6,0x4178,{0xaa,0xb2,0x38,0xd6,0xd5,0x53,0x7a,0x51}};
extern "C" const GUID __declspec(selectany) IID_IPointCloudSymbol =
    {0x16499e36,0x8eff,0x422b,{0x94,0xb6,0xac,0x87,0x7f,0x6c,0xb6,0xf7}};
extern "C" const GUID __declspec(selectany) IID_IRenderPOIPickResult =
    {0x3ce54ddc,0xfbeb,0x45fa,{0x88,0xec,0x51,0xb4,0x18,0x58,0x92,0x58}};
extern "C" const GUID __declspec(selectany) IID_IUtility =
    {0xb1e8e5a4,0x224c,0x4e6c,{0x89,0x75,0x24,0x3c,0x13,0xe2,0x00,0x48}};
extern "C" const GUID __declspec(selectany) IID_ITerrainVideoConfig =
    {0xf9e2bc5e,0x6750,0x4ad7,{0xb0,0x09,0x49,0x51,0xce,0x9b,0x08,0x93}};
extern "C" const GUID __declspec(selectany) IID_IProject =
    {0x7b4880b2,0xc619,0x4eb1,{0x98,0x7a,0x8b,0x0a,0x46,0xbb,0xb3,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IHeatMapPlayer =
    {0x9cefc9d0,0x8d2f,0x48cf,{0x8f,0x29,0x73,0x4a,0x6e,0x1e,0x46,0x14}};
extern "C" const GUID __declspec(selectany) IID_IUIRect =
    {0x2ab7a26d,0xd45c,0x4cc1,{0xb2,0xb5,0x76,0xbc,0x72,0x95,0xe0,0xc3}};
extern "C" const GUID __declspec(selectany) IID_IUIWindow =
    {0x1d7d71b2,0x6b70,0x47d6,{0xb8,0x91,0x4a,0x29,0x0c,0x68,0x54,0x4e}};
extern "C" const GUID __declspec(selectany) IID_IUIImageButton =
    {0x62589dd9,0xb3ee,0x4b0c,{0x96,0xd5,0xfa,0x70,0xf3,0x43,0x0b,0x58}};
extern "C" const GUID __declspec(selectany) IID_IUIWindowManager =
    {0xb60bcd84,0x37da,0x411e,{0x93,0xce,0x84,0xa4,0x4d,0x08,0x19,0x66}};
extern "C" const GUID __declspec(selectany) IID_IUIEventArgs =
    {0x094bf4d4,0xac3d,0x4e31,{0xa3,0x6d,0xfd,0xa0,0x9c,0xa1,0x9a,0x3a}};
extern "C" const GUID __declspec(selectany) DIID__IRenderControlEvents =
    {0x82aeb9ba,0x96f6,0x4dcf,{0x9f,0x67,0x82,0xe2,0x9e,0x0d,0xf3,0x71}};
extern "C" const GUID __declspec(selectany) IID_IExportManager =
    {0xa8493829,0x38bf,0x4bce,{0x8d,0x1a,0x45,0xd9,0x6b,0x38,0x09,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IRenderControl =
    {0xb97a7ec9,0xbf13,0x45d8,{0x8c,0x76,0x9f,0x7a,0x41,0x54,0x2a,0xff}};
extern "C" const GUID __declspec(selectany) IID_IFeatureLayerPickResult =
    {0x41b4b543,0x232c,0x444d,{0x86,0x77,0xe1,0x84,0x4d,0x1c,0x6c,0xeb}};
extern "C" const GUID __declspec(selectany) IID_I3DTileLayerPickResult =
    {0xeb134a20,0x1321,0x4f0b,{0x9d,0xdf,0xc3,0x71,0xa6,0xc6,0xfb,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IReferencePlanePickResult =
    {0xc7997773,0xe33a,0x472b,{0x93,0x34,0xab,0x90,0xb0,0x95,0x2a,0x3b}};
extern "C" const GUID __declspec(selectany) IID_ITerrainPickResult =
    {0x9d8fab54,0x4430,0x4e02,{0xb8,0x1a,0xe8,0xd3,0x3e,0xb2,0xd4,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IRenderModelPointPickResult =
    {0x07395ef5,0x6533,0x4cc4,{0x93,0x2b,0x55,0x1f,0xb4,0xba,0x55,0x2d}};
extern "C" const GUID __declspec(selectany) IID_IRenderPolylinePickResult =
    {0x4b7951fc,0x2464,0x41e9,{0xa4,0xdc,0x2f,0x7a,0x11,0x1b,0xe1,0x33}};
extern "C" const GUID __declspec(selectany) IID_IRenderPolygonPickResult =
    {0x5e56d641,0x42a9,0x42ab,{0x97,0x1a,0xc2,0xe4,0xaf,0x20,0x19,0x8c}};
extern "C" const GUID __declspec(selectany) IID_IRenderTriMeshPickResult =
    {0x6acfad1e,0x1c58,0x45a3,{0xaa,0x9b,0x04,0x8b,0x10,0x13,0x89,0x28}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiTriMeshPickResult =
    {0x3e0bcecb,0x0922,0x4d2c,{0xb0,0x92,0x75,0x6a,0xa9,0x6a,0x60,0xde}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiPointPickResult =
    {0xed1312b7,0x1c0f,0x49a7,{0x98,0x56,0xc5,0xd4,0x6d,0xde,0x1a,0x57}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiPolylinePickResult =
    {0xabb28afc,0xb056,0x4675,{0x87,0xb9,0x9e,0xe5,0x53,0x54,0x72,0x0d}};
extern "C" const GUID __declspec(selectany) IID_IRenderMultiPolygonPickResult =
    {0x9a9b2c07,0xa12f,0x4114,{0x80,0x03,0x6b,0xce,0xa9,0x50,0x99,0xa4}};
extern "C" const GUID __declspec(selectany) IID_IRenderPointPickResult =
    {0x0806226b,0x2599,0x4cdb,{0xbc,0xca,0x42,0x47,0x67,0x80,0xdd,0xf9}};
extern "C" const GUID __declspec(selectany) IID_ILabelPickResult =
    {0x66c817c4,0xec9b,0x4ad3,{0x8c,0xbc,0x54,0xa1,0x8c,0x59,0x04,0x84}};
extern "C" const GUID __declspec(selectany) IID_ITableLabelPickResult =
    {0xc0bc55d7,0xd30c,0x43c9,{0xac,0x4c,0xbc,0xfc,0x64,0xfc,0x9c,0x28}};
extern "C" const GUID __declspec(selectany) IID_IOverlayLabelPickResult =
    {0x91c7e95c,0xab4f,0x42bb,{0xb7,0x42,0x9b,0x69,0x69,0x5c,0x7e,0x9a}};
extern "C" const GUID __declspec(selectany) IID_IParticleEffectPickResult =
    {0xbc2c5186,0xf04e,0x488f,{0x97,0xb4,0xba,0x34,0x17,0x73,0xfe,0xf9}};
extern "C" const GUID __declspec(selectany) IID_ISkinnedMeshPickResult =
    {0x33efdbb7,0xe396,0x42b0,{0x89,0x74,0x4c,0x9b,0xad,0x19,0xd9,0xad}};
extern "C" const GUID __declspec(selectany) IID_IValueMapTextRender =
    {0x60d59fd6,0xf89b,0x4abd,{0xa0,0x4c,0x31,0x78,0x6f,0xfa,0x5d,0x05}};
extern "C" const GUID __declspec(selectany) IID_IToolTipTextRender =
    {0x2aabf879,0x1d58,0x472e,{0xa7,0x82,0xec,0xb6,0x1d,0x30,0x7e,0x2b}};
extern "C" const GUID __declspec(selectany) IID_IValueMapGeometryRender =
    {0xe10f9f83,0x849d,0x404a,{0x96,0x11,0x53,0x29,0x53,0x63,0x4f,0x11}};
extern "C" const GUID __declspec(selectany) IID_ISimpleTextRender =
    {0xbc231a67,0x1b97,0x44ce,{0xa9,0x3b,0x73,0x43,0x87,0x8d,0x4f,0x14}};
extern "C" const GUID __declspec(selectany) IID_ISimpleGeometryRender =
    {0xec2abc22,0x3133,0x4419,{0x96,0xd1,0xe4,0x1c,0xb1,0x5c,0x7d,0xdb}};
extern "C" const GUID __declspec(selectany) IID_ISolidSymbol =
    {0x8dc69217,0xfb6f,0x4eac,{0xa2,0xcc,0xc6,0x6e,0x41,0x78,0x32,0xa2}};
extern "C" const GUID __declspec(selectany) IID_ISimplePointSymbol =
    {0x180ea143,0xaf76,0x4137,{0x90,0xdd,0x62,0x3e,0xf2,0xf9,0x7e,0xf8}};
extern "C" const GUID __declspec(selectany) IID_IImagePointSymbol =
    {0xe8eb7e98,0x7da9,0x4124,{0xbb,0xa6,0x55,0xdb,0xd7,0x81,0xb4,0x77}};
extern "C" const GUID __declspec(selectany) IID_IRangeRenderRule =
    {0x11c3ed45,0x4671,0x4e74,{0x90,0x7d,0x48,0x85,0x37,0xea,0xf6,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IUniqueValuesRenderRule =
    {0x2f0ecf14,0x822d,0x4423,{0x80,0xb0,0xf3,0xfb,0xf4,0xdc,0xd3,0xb5}};
extern "C" const GUID __declspec(selectany) IID_IMotionable =
    {0xde5ad8bb,0x31c1,0x4045,{0xa8,0xe1,0x38,0x53,0x96,0x04,0xb9,0x4f}};
extern "C" const GUID __declspec(selectany) IID_ITerrainHolePickResult =
    {0xfde4c59c,0x6c66,0x404f,{0x8d,0x81,0x54,0x8c,0x86,0xd8,0xd2,0x96}};
extern "C" const GUID __declspec(selectany) IID_ITileHolePickResult =
    {0x69381f9d,0xe213,0x4547,{0x8d,0xcb,0x71,0x96,0x31,0x1f,0x80,0xcb}};
extern "C" const GUID __declspec(selectany) IID_IRenderArrowPickResult =
    {0xf0002efd,0x7dd3,0x4046,{0xa9,0xc6,0x12,0x09,0xcb,0x58,0x8c,0xb0}};
extern "C" const GUID __declspec(selectany) IID_IWindowParam =
    {0x7986f8e3,0x8570,0x4726,{0xad,0x32,0x0d,0x7a,0xfa,0x30,0xd5,0xa1}};
extern "C" const GUID __declspec(selectany) IID_IHTMLWindow =
    {0x4b1ca4eb,0x3488,0x48d9,{0xba,0xea,0xa6,0xcd,0xfe,0x33,0x1a,0xfe}};
extern "C" const GUID __declspec(selectany) IID_IPolygon3DSymbol =
    {0xe9c7b499,0xf8e9,0x4978,{0xae,0xf0,0x65,0xf9,0x60,0x04,0x33,0x15}};
extern "C" const GUID __declspec(selectany) IID_ITerrainModifierPickResult =
    {0xf3453782,0xb1f5,0x41c7,{0x9d,0xfa,0x2d,0xd2,0xb6,0x3e,0x9c,0x1c}};
extern "C" const GUID __declspec(selectany) IID_ITerrainArrowPickResult =
    {0x80e020ec,0xc884,0x41b2,{0xbb,0xd4,0x99,0x1b,0xec,0xda,0x1b,0x76}};
extern "C" const GUID __declspec(selectany) IID_ITerrain3DArrowPickResult =
    {0x8e37c322,0x3450,0x4e63,{0x80,0x7d,0x99,0x2f,0xcc,0x53,0x16,0x1d}};
extern "C" const GUID __declspec(selectany) IID_ITerrainRegularPolygonPickResult =
    {0xb5f89670,0x2116,0x4589,{0x89,0xaf,0x6b,0x03,0x48,0x9d,0xa8,0x21}};
extern "C" const GUID __declspec(selectany) IID_ITerrainCylinderPickResult =
    {0x693f9472,0x595f,0x47dd,{0x80,0x9b,0x75,0xb1,0xc0,0x27,0xea,0xfd}};
extern "C" const GUID __declspec(selectany) IID_ITerrainConePickResult =
    {0xe01c38e6,0x9552,0x4380,{0xa1,0x22,0xc9,0x43,0x52,0xcb,0x3d,0x1b}};
extern "C" const GUID __declspec(selectany) IID_ITerrainRectanglePickResult =
    {0x725f9e08,0x9de7,0x4a5e,{0xb8,0x44,0xa0,0x5f,0x61,0x9d,0xac,0xb0}};
extern "C" const GUID __declspec(selectany) IID_ITerrainBoxPickResult =
    {0x0712d6ec,0x82d7,0x4d7c,{0xa2,0x3e,0xf2,0x78,0x88,0x91,0xbe,0x04}};
extern "C" const GUID __declspec(selectany) IID_ITerrainPyramidPickResult =
    {0xc012ba11,0x9e97,0x46e4,{0x96,0x3d,0x6b,0xe8,0x0d,0x78,0x51,0x2c}};
extern "C" const GUID __declspec(selectany) IID_ITerrainEllipsePickResult =
    {0x3e22d6df,0xd210,0x4519,{0x97,0xc9,0x15,0xaa,0x1d,0x1d,0x82,0x86}};
extern "C" const GUID __declspec(selectany) IID_ITerrainArcPickResult =
    {0x04828d2a,0x36d8,0x4714,{0xa3,0xa8,0xab,0x53,0x17,0x33,0xb5,0x21}};
extern "C" const GUID __declspec(selectany) IID_ITerrainSpherePickResult =
    {0x976ce744,0xdaf7,0x4610,{0xbc,0x60,0xdd,0x72,0x12,0x0b,0x80,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITerrainImageLabelPickResult =
    {0x9e5e4991,0xe881,0x4e56,{0x86,0xbd,0x91,0x25,0x9c,0x1e,0x69,0x76}};
extern "C" const GUID __declspec(selectany) IID_IComplexParticleEffectPickResult =
    {0x54e30068,0x2ae5,0x4622,{0x81,0x52,0x01,0xd5,0xbd,0xf6,0x4c,0x07}};
extern "C" const GUID __declspec(selectany) IID_IUIWindowEventArgs =
    {0xfc6f3282,0xcd4b,0x4fa6,{0x87,0x8f,0x3f,0x22,0x18,0x7e,0x1c,0x60}};
extern "C" const GUID __declspec(selectany) IID_IUIMouseEventArgs =
    {0x38a69005,0x0d09,0x442f,{0xaf,0x8c,0x1b,0xf6,0x65,0x0b,0xd2,0x5f}};
extern "C" const GUID __declspec(selectany) IID_IInternalTool =
    {0xb8e9dce1,0x35be,0x4b01,{0x8d,0xcc,0x40,0xdf,0x1d,0xe2,0xcc,0xe7}};
extern "C" const GUID __declspec(selectany) IID_IInternalLicenseKey =
    {0xafaeaf51,0xf4be,0x4cdc,{0x8a,0xd1,0xde,0x79,0x26,0x46,0xc0,0xb2}};
extern "C" const GUID __declspec(selectany) CLSID_RenderControl =
    {0x56c08a7c,0x1ecd,0x40a1,{0x89,0xf0,0x5b,0x91,0x9e,0x12,0xad,0x0f}};
extern "C" const GUID __declspec(selectany) CLSID_ValueMapTextRender =
    {0x8e3976e8,0xfd1f,0x4206,{0x86,0x68,0x7d,0xf6,0xe0,0x6b,0x3a,0xcf}};
extern "C" const GUID __declspec(selectany) CLSID_ValueMapGeometryRender =
    {0x18491a4d,0xf5bd,0x4ecb,{0xb4,0x06,0x07,0x1d,0x90,0x75,0x4d,0xac}};
extern "C" const GUID __declspec(selectany) CLSID_TextSymbol =
    {0xa5f26b69,0x0e33,0x4e97,{0xad,0xe2,0xd2,0x41,0x55,0x49,0xeb,0x9c}};
extern "C" const GUID __declspec(selectany) CLSID_TextRenderScheme =
    {0x378fc90e,0xa630,0x4a19,{0xa1,0x7c,0x6e,0xaa,0x59,0x30,0xc2,0xd2}};
extern "C" const GUID __declspec(selectany) CLSID_RenderRule =
    {0x4231a35c,0xf1ae,0x428e,{0xa3,0x01,0x7a,0xc9,0xa8,0xe7,0xd0,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_RangeRenderRule =
    {0x2d6d9091,0xf2d2,0x433b,{0x9f,0xfb,0x10,0x38,0xf8,0x44,0x14,0xe0}};
extern "C" const GUID __declspec(selectany) CLSID_UniqueValuesRenderRule =
    {0xc5285931,0x1954,0x4971,{0xbc,0x5d,0x9a,0x84,0xe8,0x93,0x0b,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_GeometryRenderScheme =
    {0x2ef5c1a8,0x09c0,0x4850,{0xb9,0xa3,0xc1,0xfd,0x46,0x34,0x39,0x21}};
extern "C" const GUID __declspec(selectany) CLSID_CurveSymbol =
    {0xe02c69c4,0x828d,0x40d5,{0x86,0x9d,0xda,0xeb,0x18,0x9b,0x7f,0x6f}};
extern "C" const GUID __declspec(selectany) CLSID_SurfaceSymbol =
    {0x4d5f0624,0x50a1,0x43e2,{0xa0,0xec,0xa9,0x71,0x3c,0xb2,0x56,0x08}};
extern "C" const GUID __declspec(selectany) CLSID_SolidSymbol =
    {0xd7a14a22,0xa1eb,0x4c17,{0xb4,0x35,0xa2,0xd3,0x74,0xb0,0xee,0x63}};
extern "C" const GUID __declspec(selectany) CLSID_ModelPointSymbol =
    {0x6bcf8c9b,0xe506,0x43ae,{0xad,0x6e,0x44,0xa4,0x1d,0x74,0x84,0x31}};
extern "C" const GUID __declspec(selectany) CLSID_SimplePointSymbol =
    {0x6669a2d9,0xba75,0x4b24,{0xbf,0x75,0xd1,0x12,0x0b,0x79,0x0a,0xe9}};
extern "C" const GUID __declspec(selectany) CLSID_ImagePointSymbol =
    {0x1259ea77,0xad6e,0x4096,{0x90,0x18,0xb6,0x8e,0x40,0x1d,0x0b,0xc8}};
extern "C" const GUID __declspec(selectany) CLSID_RenderGeometry =
    {0x6346576d,0x6fec,0x46b1,{0xbe,0xa9,0x9c,0xbe,0x87,0xb9,0x1e,0x7e}};
extern "C" const GUID __declspec(selectany) CLSID_SimpleTextRender =
    {0xa7a340e6,0xf14a,0x4ef4,{0x81,0x17,0x9b,0x30,0xdd,0x63,0x82,0xb4}};
extern "C" const GUID __declspec(selectany) CLSID_SimpleGeometryRender =
    {0x99a8f9d6,0x87af,0x4613,{0xb5,0x2d,0x89,0x58,0xe9,0x78,0x3b,0x25}};
extern "C" const GUID __declspec(selectany) CLSID_TextAttribute =
    {0xe766350c,0x4ee2,0x4c4a,{0x96,0xb2,0xbf,0xe1,0x75,0xa6,0x72,0x4c}};
extern "C" const GUID __declspec(selectany) IID_IReferenceHelper =
    {0xe8135b91,0x787b,0x4468,{0x9c,0x4a,0x0b,0xbf,0x59,0x0c,0x76,0x0c}};
extern "C" const GUID __declspec(selectany) CLSID_ReferenceHelper =
    {0x49450aa4,0x1405,0x476f,{0xb0,0xad,0x32,0x9f,0x2c,0x57,0xd9,0xbb}};
extern "C" const GUID __declspec(selectany) CLSID_RasterSymbol =
    {0x3810c873,0xa111,0x4fd8,{0xb4,0x6e,0x3e,0x50,0x06,0xce,0xe2,0x4c}};
extern "C" const GUID __declspec(selectany) CLSID_WindowParam =
    {0x4d366f90,0x76ee,0x4792,{0x89,0xd8,0x9c,0xd7,0x10,0x4b,0x58,0x27}};
extern "C" const GUID __declspec(selectany) CLSID_Polygon3DSymbol =
    {0xa9a32e46,0x0a80,0x45bd,{0xb4,0x16,0x73,0x6b,0x9a,0xfc,0x2e,0x1e}};
extern "C" const GUID __declspec(selectany) CLSID_PointCloudSymbol =
    {0xeae67ef8,0xefd2,0x4b4f,{0xa5,0x7e,0x76,0xaf,0xe5,0x64,0xbe,0x1d}};
extern "C" const GUID __declspec(selectany) CLSID_LineStyle =
    {0x1ce9f150,0x0e51,0x4ec3,{0x87,0x9a,0x7d,0x55,0x13,0x36,0xdb,0xe7}};
extern "C" const GUID __declspec(selectany) CLSID_FillStyle =
    {0xd02be655,0xbdc4,0x4cfd,{0x9b,0x2a,0xe1,0xb6,0xda,0xb8,0x22,0xda}};
extern "C" const GUID __declspec(selectany) CLSID_ObjectTexture =
    {0xbe1685b6,0x06ac,0x40c0,{0x9e,0xc0,0xf0,0x27,0x76,0xf1,0x52,0xc6}};
extern "C" const GUID __declspec(selectany) CLSID_Position =
    {0xdde69f72,0xba06,0x4727,{0xa4,0x02,0xa5,0x0e,0x88,0x82,0x22,0x6a}};
extern "C" const GUID __declspec(selectany) CLSID_LabelStyle =
    {0x0716d0e7,0xd269,0x4f23,{0xa0,0x10,0x88,0xc5,0xca,0xb3,0xdb,0x7a}};
extern "C" const GUID __declspec(selectany) CLSID_UIRect =
    {0x07818b22,0xd636,0x4aab,{0xac,0x40,0x13,0x32,0x5f,0x7f,0x6a,0x2c}};
extern "C" const GUID __declspec(selectany) CLSID_ToolTipTextRender =
    {0xe5e8405e,0xd964,0x4952,{0xb7,0x95,0xec,0xbe,0x17,0x4d,0xa7,0xe8}};

//
// Function implementation mapping
//

#pragma start_map_region("d:\program files (x86)\citymaker 7\citymaker sdk\samples\csharp\beginner\helloworldcplus\debug\GcmRenderControl.tli")
__declspec(implementation_key(1)) __int64 IRObject::GetInternalObject ( );
__declspec(implementation_key(2)) void IRObject::PutInternalObject ( __int64 pVal );
__declspec(implementation_key(3)) enum gviObjectType IRObject::GetType ( );
__declspec(implementation_key(4)) GUID IRObject::GetGuid ( );
__declspec(implementation_key(5)) enum gviAttributeMask IRObject::GetAttributeMask ( );
__declspec(implementation_key(6)) void IRObject::PutAttributeMask ( enum gviAttributeMask pVal );
__declspec(implementation_key(7)) HRESULT IRObject::SetClientData ( _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(8)) _bstr_t IRObject::GetClientData ( _bstr_t Name );
__declspec(implementation_key(9)) _bstr_t IRObject::GetName ( );
__declspec(implementation_key(10)) void IRObject::PutName ( _bstr_t pVal );
__declspec(implementation_key(11)) VARIANT_BOOL IRObject::GetSaveInCepFile ( );
__declspec(implementation_key(12)) void IRObject::PutSaveInCepFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(13)) enum gviViewportMask IRenderable::GetVisibleMask ( );
__declspec(implementation_key(14)) void IRenderable::PutVisibleMask ( enum gviViewportMask pVal );
__declspec(implementation_key(15)) enum gviViewportMask IRenderable::GetMouseSelectMask ( );
__declspec(implementation_key(16)) void IRenderable::PutMouseSelectMask ( enum gviViewportMask pVal );
__declspec(implementation_key(17)) IEnvelopePtr IRenderable::GetEnvelope ( );
__declspec(implementation_key(18)) double IRenderable::GetMaxVisibleDistance ( );
__declspec(implementation_key(19)) void IRenderable::PutMaxVisibleDistance ( double pVal );
__declspec(implementation_key(20)) double IRenderable::GetMinVisibleDistance ( );
__declspec(implementation_key(21)) void IRenderable::PutMinVisibleDistance ( double pVal );
__declspec(implementation_key(22)) float IRenderable::GetMinVisiblePixels ( );
__declspec(implementation_key(23)) void IRenderable::PutMinVisiblePixels ( float pVal );
__declspec(implementation_key(24)) HRESULT IRenderable::Highlight ( OLE_COLOR Color );
__declspec(implementation_key(25)) HRESULT IRenderable::Unhighlight ( );
__declspec(implementation_key(26)) double IRenderable::GetViewingDistance ( );
__declspec(implementation_key(27)) void IRenderable::PutViewingDistance ( double pVal );
__declspec(implementation_key(28)) enum gviDepthTestMode IRenderable::GetDepthTestMode ( );
__declspec(implementation_key(29)) void IRenderable::PutDepthTestMode ( enum gviDepthTestMode pVal );
__declspec(implementation_key(30)) IGeometryPtr IRenderGeometry::GetFdeGeometry ( );
__declspec(implementation_key(31)) HRESULT IRenderGeometry::SetFdeGeometry ( struct IGeometry * newVal );
__declspec(implementation_key(32)) void IRenderGeometry::PutForceCullMode ( VARIANT_BOOL pVal );
__declspec(implementation_key(33)) VARIANT_BOOL IRenderGeometry::GetForceCullMode ( );
__declspec(implementation_key(34)) void IRenderGeometry::PutCullMode ( enum gviCullFaceMode pVal );
__declspec(implementation_key(35)) enum gviCullFaceMode IRenderGeometry::GetCullMode ( );
__declspec(implementation_key(36)) HRESULT IRenderGeometry::Glow ( long Duration );
__declspec(implementation_key(37)) void IRenderGeometry::PutShowOutline ( VARIANT_BOOL pVal );
__declspec(implementation_key(38)) VARIANT_BOOL IRenderGeometry::GetShowOutline ( );
__declspec(implementation_key(39)) _bstr_t IRenderGeometry::GetToolTipText ( );
__declspec(implementation_key(40)) void IRenderGeometry::PutToolTipText ( _bstr_t pVal );
__declspec(implementation_key(41)) double IReferencePlane::GetPlaneHeight ( );
__declspec(implementation_key(42)) void IReferencePlane::PutPlaneHeight ( double pVal );
__declspec(implementation_key(43)) enum gviViewportMask IReferencePlane::GetVisibleMask ( );
__declspec(implementation_key(44)) void IReferencePlane::PutVisibleMask ( enum gviViewportMask pVal );
__declspec(implementation_key(45)) VARIANT_BOOL IFeatureManager::CreateFeatures ( struct IFeatureClass * FeatureClass, struct IRowBufferCollection * RowBuffers );
__declspec(implementation_key(46)) VARIANT_BOOL IFeatureManager::CreateFeature ( struct IFeatureClass * FeatureClass, struct IRowBuffer * RowBuffer );
__declspec(implementation_key(47)) VARIANT_BOOL IFeatureManager::EditFeatures ( struct IFeatureClass * FeatureClass, struct IRowBufferCollection * RowBuffers );
__declspec(implementation_key(48)) VARIANT_BOOL IFeatureManager::EditFeature ( struct IFeatureClass * FeatureClass, struct IRowBuffer * RowBuffer );
__declspec(implementation_key(49)) VARIANT_BOOL IFeatureManager::DeleteFeatures ( struct IFeatureClass * FeatureClass, SAFEARRAY * Ids );
__declspec(implementation_key(50)) VARIANT_BOOL IFeatureManager::DeleteFeature ( struct IFeatureClass * FeatureClass, long FeatureId );
__declspec(implementation_key(51)) VARIANT_BOOL IFeatureManager::HighlightFeature ( struct IFeatureClass * FeatureClass, long FeatureId, OLE_COLOR ColorValue );
__declspec(implementation_key(52)) VARIANT_BOOL IFeatureManager::UnhighlightFeature ( struct IFeatureClass * FeatureClass, long FeatureId );
__declspec(implementation_key(53)) VARIANT_BOOL IFeatureManager::UnhighlightFeatureClass ( struct IFeatureClass * FeatureClass );
__declspec(implementation_key(54)) VARIANT_BOOL IFeatureManager::UnhighlightAll ( );
__declspec(implementation_key(55)) HRESULT IFeatureManager::RefreshFeatureClass ( struct IFeatureClass * FeatureClass );
__declspec(implementation_key(56)) HRESULT IFeatureManager::RefreshAll ( );
__declspec(implementation_key(57)) VARIANT_BOOL IFeatureManager::SetFeatureVisibleMask ( struct IFeatureClass * FeatureClass, long FeatureId, enum gviViewportMask VisibleMask );
__declspec(implementation_key(58)) VARIANT_BOOL IFeatureManager::SetFeaturesVisibleMask ( struct IFeatureClass * FeatureClass, SAFEARRAY * FIDs, enum gviViewportMask VisibleMask );
__declspec(implementation_key(59)) VARIANT_BOOL IFeatureManager::ResetFeatureVisibleMask ( struct IFeatureClass * FeatureClass, long FeatureId );
__declspec(implementation_key(60)) VARIANT_BOOL IFeatureManager::ResetFeatureClassVisibleMask ( struct IFeatureClass * FeatureClass );
__declspec(implementation_key(61)) VARIANT_BOOL IFeatureManager::ResetAllVisibleMask ( );
__declspec(implementation_key(62)) VARIANT_BOOL IFeatureManager::HighlightFeatures ( struct IFeatureClass * FeatureClass, SAFEARRAY * FIDs, OLE_COLOR ColorValue );
__declspec(implementation_key(63)) enum gviObjectType IPickResult::GetType ( );
__declspec(implementation_key(64)) long IPickResultCollection::GetCount ( );
__declspec(implementation_key(65)) IPickResultPtr IPickResultCollection::GetItem ( long n );
__declspec(implementation_key(66)) enum gviEditorType ITransformHelper::GetType ( );
__declspec(implementation_key(67)) void ITransformHelper::PutType ( enum gviEditorType pVal );
__declspec(implementation_key(68)) HRESULT ITransformHelper::SetPosition ( struct IVector3 * Position );
__declspec(implementation_key(69)) _bstr_t ITransformHelper::GetCrsWKT ( );
__declspec(implementation_key(70)) void ITransformHelper::PutCrsWKT ( _bstr_t pVal );
__declspec(implementation_key(71)) HRESULT ITransformHelper::SetPosition2 ( struct IVector3 * Position, struct IEulerAngle * Angle );
__declspec(implementation_key(72)) HRESULT ITransformHelper::SetPosition3 ( struct IEnvelope * Env, struct IEulerAngle * Angle );
__declspec(implementation_key(73)) HRESULT ICamera::LookAt ( struct IVector3 * Position, double Distance, struct IEulerAngle * Angle );
__declspec(implementation_key(74)) HRESULT ICamera::LookAt2 ( struct IPoint * Position, double Distance, struct IEulerAngle * Angle );
__declspec(implementation_key(75)) HRESULT ICamera::SetCamera ( struct IVector3 * Position, struct IEulerAngle * Angle, enum gviSetCameraFlags Flags );
__declspec(implementation_key(76)) HRESULT ICamera::SetCamera2 ( struct IPoint * Position, struct IEulerAngle * Angle, enum gviSetCameraFlags Flags );
__declspec(implementation_key(77)) HRESULT ICamera::GetCamera ( struct IVector3 * * Position, struct IEulerAngle * * Angle );
__declspec(implementation_key(78)) HRESULT ICamera::GetCamera2 ( struct IPoint * * Position, struct IEulerAngle * * Angle );
__declspec(implementation_key(79)) double ICamera::GetFlyTime ( );
__declspec(implementation_key(80)) void ICamera::PutFlyTime ( double pVal );
__declspec(implementation_key(81)) IEulerAnglePtr ICamera::GetAimingAngles ( struct IVector3 * Position1, struct IVector3 * Position2 );
__declspec(implementation_key(82)) IEulerAnglePtr ICamera::GetAimingAngles2 ( struct IPoint * Position1, struct IPoint * Position2 );
__declspec(implementation_key(83)) IVector3Ptr ICamera::GetAimingPoint ( struct IVector3 * Position, struct IEulerAngle * Angle, double Range );
__declspec(implementation_key(84)) IPointPtr ICamera::GetAimingPoint2 ( struct IPoint * Position, struct IEulerAngle * Angle, double Range );
__declspec(implementation_key(85)) HRESULT ICamera::LookAtEnvelope ( struct IEnvelope * Env );
__declspec(implementation_key(86)) HRESULT ICamera::LookAtEnvelope2 ( _bstr_t CrsWKT, struct IEnvelope * Env );
__declspec(implementation_key(87)) IMatrixPtr ICamera::AsMatrix ( );
__declspec(implementation_key(88)) HRESULT ICamera::FromMatrix ( struct IMatrix * newVal );
__declspec(implementation_key(89)) float ICamera::GetVerticalFieldOfView ( );
__declspec(implementation_key(90)) void ICamera::PutVerticalFieldOfView ( float pVal );
__declspec(implementation_key(91)) float ICamera::GetWalkSpeed ( );
__declspec(implementation_key(92)) void ICamera::PutWalkSpeed ( float pVal );
__declspec(implementation_key(93)) float ICamera::GetFlySpeed ( );
__declspec(implementation_key(94)) void ICamera::PutFlySpeed ( float pVal );
__declspec(implementation_key(95)) enum gviFlyMode ICamera::GetFlyMode ( );
__declspec(implementation_key(96)) void ICamera::PutFlyMode ( enum gviFlyMode pVal );
__declspec(implementation_key(97)) float ICamera::GetNearClipPlane ( );
__declspec(implementation_key(98)) void ICamera::PutNearClipPlane ( float pVal );
__declspec(implementation_key(99)) float ICamera::GetFarClipPlane ( );
__declspec(implementation_key(100)) void ICamera::PutFarClipPlane ( float pVal );
__declspec(implementation_key(101)) VARIANT_BOOL ICamera::GetAutoClipPlane ( );
__declspec(implementation_key(102)) void ICamera::PutAutoClipPlane ( VARIANT_BOOL pVal );
__declspec(implementation_key(103)) HRESULT ICamera::FlyToObject ( GUID ObjectId, enum gviActionCode ActionCode );
__declspec(implementation_key(104)) IPickResultPtr ICamera::ScreenToWorld ( long WindowX, long WindowY, struct IPoint * * IntersectPoint );
__declspec(implementation_key(105)) enum gviCollisionDetectionMode ICamera::GetCollisionDetectionMode ( );
__declspec(implementation_key(106)) void ICamera::PutCollisionDetectionMode ( enum gviCollisionDetectionMode pVal );
__declspec(implementation_key(107)) VARIANT_BOOL ICamera::GetCanUndo ( );
__declspec(implementation_key(108)) VARIANT_BOOL ICamera::GetCanRedo ( );
__declspec(implementation_key(109)) HRESULT ICamera::Undo ( );
__declspec(implementation_key(110)) HRESULT ICamera::Redo ( );
__declspec(implementation_key(111)) HRESULT ICamera::Stop ( );
__declspec(implementation_key(112)) float ICamera::GetWalkHeight ( );
__declspec(implementation_key(113)) void ICamera::PutWalkHeight ( float pVal );
__declspec(implementation_key(114)) enum gviWalkMode ICamera::GetWalkMode ( );
__declspec(implementation_key(115)) void ICamera::PutWalkMode ( enum gviWalkMode pVal );
__declspec(implementation_key(116)) VARIANT_BOOL ICamera::WorldToScreen ( double WorldX, double WorldY, double WorldZ, double * ScreenX, double * ScreenY, int Mode, VARIANT_BOOL * BoolInScreen );
__declspec(implementation_key(117)) IEnvelopePtr ICamera::GetEnvelope ( );
__declspec(implementation_key(118)) void ICamera::PutEnvelope ( struct IEnvelope * pVal );
__declspec(implementation_key(119)) VARIANT_BOOL ICamera::GetUndergroundMode ( );
__declspec(implementation_key(120)) void ICamera::PutUndergroundMode ( VARIANT_BOOL pVal );
__declspec(implementation_key(121)) HRESULT ICamera::ZoomIn ( float Delta );
__declspec(implementation_key(122)) HRESULT ICamera::ZoomOut ( float Delta );
__declspec(implementation_key(123)) VARIANT_BOOL ITerrain::RegisterTerrain ( _bstr_t LayerInfo, _bstr_t Password );
__declspec(implementation_key(124)) VARIANT_BOOL ITerrain::GetIsPlanarTerrain ( );
__declspec(implementation_key(125)) HRESULT ITerrain::UnregisterTerrain ( );
__declspec(implementation_key(126)) _bstr_t ITerrain::GetCrsWKT ( );
__declspec(implementation_key(127)) double ITerrain::GetElevation ( double X, double Y, enum gviGetElevationType GetAltitudeType );
__declspec(implementation_key(128)) VARIANT_BOOL ITerrain::GetDemAvailable ( );
__declspec(implementation_key(129)) void ITerrain::PutDemAvailable ( VARIANT_BOOL pVal );
__declspec(implementation_key(130)) enum gviViewportMask ITerrain::GetVisibleMask ( );
__declspec(implementation_key(131)) void ITerrain::PutVisibleMask ( enum gviViewportMask pVal );
__declspec(implementation_key(132)) VARIANT_BOOL ITerrain::GetIsRegistered ( );
__declspec(implementation_key(133)) HRESULT ITerrain::FlyTo ( enum gviTerrainActionCode newVal );
__declspec(implementation_key(134)) double ITerrain::GetOpacity ( );
__declspec(implementation_key(135)) void ITerrain::PutOpacity ( double pVal );
__declspec(implementation_key(136)) IPolylinePtr ITerrain::FindBestPath ( double StartX, double StartY, double EndX, double EndY, long SampleNumber, double SearchAreaFactor, double MaxClimbSlope, double MaxDescentSlope );
__declspec(implementation_key(137)) IEulerAnglePtr ITerrain::GetSlope ( double X, double Y );
__declspec(implementation_key(138)) VARIANT_BOOL ITerrain::GetSupportAtmosphere ( );
__declspec(implementation_key(139)) VARIANT_BOOL ITerrain::GetEnableAtmosphere ( );
__declspec(implementation_key(140)) void ITerrain::PutEnableAtmosphere ( VARIANT_BOOL pVal );
__declspec(implementation_key(141)) HRESULT ITerrain::SetInvisibleRegion ( struct IMultiPolygon * Region );
__declspec(implementation_key(142)) IMultiPolygonPtr ITerrain::GetInvisibleRegion ( );
__declspec(implementation_key(143)) HRESULT ITerrain::SetOceanRegion ( struct IMultiPolygon * Region );
__declspec(implementation_key(144)) IMultiPolygonPtr ITerrain::GetOceanRegion ( );
__declspec(implementation_key(145)) VARIANT_BOOL ITerrain::GetEnableOceanEffect ( );
__declspec(implementation_key(146)) void ITerrain::PutEnableOceanEffect ( VARIANT_BOOL pVal );
__declspec(implementation_key(147)) double ITerrain::GetOceanWindSpeed ( );
__declspec(implementation_key(148)) void ITerrain::PutOceanWindSpeed ( double pVal );
__declspec(implementation_key(149)) double ITerrain::GetOceanWindDirection ( );
__declspec(implementation_key(150)) void ITerrain::PutOceanWindDirection ( double pVal );
__declspec(implementation_key(151)) _bstr_t ITerrain::GetConnectInfo ( );
__declspec(implementation_key(152)) OLE_COLOR ISkyBox::GetBackgroundColor ( );
__declspec(implementation_key(153)) void ISkyBox::PutBackgroundColor ( OLE_COLOR pVal );
__declspec(implementation_key(154)) double ISkyBox::GetHeading ( );
__declspec(implementation_key(155)) void ISkyBox::PutHeading ( double pVal );
__declspec(implementation_key(156)) HRESULT ISkyBox::SetImagePath ( enum gviSkyboxImageIndex ImageIndex, _bstr_t ImagePath );
__declspec(implementation_key(157)) _bstr_t ISkyBox::GetImagePath ( enum gviSkyboxImageIndex ImageIndex );
__declspec(implementation_key(158)) enum gviFogMode ISkyBox::GetFogMode ( );
__declspec(implementation_key(159)) void ISkyBox::PutFogMode ( enum gviFogMode pVal );
__declspec(implementation_key(160)) OLE_COLOR ISkyBox::GetFogColor ( );
__declspec(implementation_key(161)) void ISkyBox::PutFogColor ( OLE_COLOR pVal );
__declspec(implementation_key(162)) float ISkyBox::GetFogStartDistance ( );
__declspec(implementation_key(163)) void ISkyBox::PutFogStartDistance ( float pVal );
__declspec(implementation_key(164)) float ISkyBox::GetFogEndDistance ( );
__declspec(implementation_key(165)) void ISkyBox::PutFogEndDistance ( float pVal );
__declspec(implementation_key(166)) enum gviWeatherType ISkyBox::GetWeather ( );
__declspec(implementation_key(167)) void ISkyBox::PutWeather ( enum gviWeatherType pVal );
__declspec(implementation_key(168)) __int64 ITextRender::GetInternalObject ( );
__declspec(implementation_key(169)) void ITextRender::PutInternalObject ( __int64 pVal );
__declspec(implementation_key(170)) _bstr_t ITextRender::GetExpression ( );
__declspec(implementation_key(171)) void ITextRender::PutExpression ( _bstr_t pVal );
__declspec(implementation_key(172)) enum gviRenderType ITextRender::GetRenderType ( );
__declspec(implementation_key(173)) VARIANT_BOOL ITextRender::GetDynamicPlacement ( );
__declspec(implementation_key(174)) void ITextRender::PutDynamicPlacement ( VARIANT_BOOL pVal );
__declspec(implementation_key(175)) VARIANT_BOOL ITextRender::GetMinimizeOverlap ( );
__declspec(implementation_key(176)) void ITextRender::PutMinimizeOverlap ( VARIANT_BOOL pVal );
__declspec(implementation_key(177)) VARIANT_BOOL ITextRender::GetRemoveDuplicate ( );
__declspec(implementation_key(178)) void ITextRender::PutRemoveDuplicate ( VARIANT_BOOL pVal );
__declspec(implementation_key(179)) _bstr_t ITextRender::AsXml ( );
__declspec(implementation_key(180)) __int64 IGeometryRender::GetInternalObject ( );
__declspec(implementation_key(181)) void IGeometryRender::PutInternalObject ( __int64 pVal );
__declspec(implementation_key(182)) _bstr_t IGeometryRender::GetRenderGroupField ( );
__declspec(implementation_key(183)) void IGeometryRender::PutRenderGroupField ( _bstr_t pVal );
__declspec(implementation_key(184)) enum gviRenderType IGeometryRender::GetRenderType ( );
__declspec(implementation_key(185)) enum gviHeightStyle IGeometryRender::GetHeightStyle ( );
__declspec(implementation_key(186)) void IGeometryRender::PutHeightStyle ( enum gviHeightStyle pVal );
__declspec(implementation_key(187)) double IGeometryRender::GetHeightOffset ( );
__declspec(implementation_key(188)) void IGeometryRender::PutHeightOffset ( double pVal );
__declspec(implementation_key(189)) _bstr_t IGeometryRender::AsXml ( );
__declspec(implementation_key(190)) _bstr_t IFeatureClassInfo::GetDataSourceConnectionString ( );
__declspec(implementation_key(191)) _bstr_t IFeatureClassInfo::GetDataSetName ( );
__declspec(implementation_key(192)) _bstr_t IFeatureClassInfo::GetFeatureClassName ( );
__declspec(implementation_key(193)) _bstr_t IFeatureClassInfo::GetFidFieldName ( );
__declspec(implementation_key(194)) HRESULT IFeatureLayer::SetGroupVisibleMask ( long GroupId, enum gviViewportMask VisibleMask );
__declspec(implementation_key(195)) enum gviViewportMask IFeatureLayer::GetGroupVisibleMask ( long GroupId );
__declspec(implementation_key(196)) GUID IFeatureLayer::GetFeatureClassId ( );
__declspec(implementation_key(197)) _bstr_t IFeatureLayer::GetGeometryFieldName ( );
__declspec(implementation_key(198)) ITextRenderPtr IFeatureLayer::GetTextRender ( );
__declspec(implementation_key(199)) VARIANT_BOOL IFeatureLayer::SetTextRender ( struct ITextRender * newVal );
__declspec(implementation_key(200)) IGeometryRenderPtr IFeatureLayer::GetGeometryRender ( );
__declspec(implementation_key(201)) VARIANT_BOOL IFeatureLayer::SetGeometryRender ( struct IGeometryRender * newVal );
__declspec(implementation_key(202)) HRESULT IFeatureLayer::SetEnableGroupColor ( long GroupId, VARIANT_BOOL newVal );
__declspec(implementation_key(203)) VARIANT_BOOL IFeatureLayer::GetEnableGroupColor ( long GroupId );
__declspec(implementation_key(204)) HRESULT IFeatureLayer::SetGroupColor ( long GroupId, OLE_COLOR newVal );
__declspec(implementation_key(205)) OLE_COLOR IFeatureLayer::GetGroupColor ( long GroupId );
__declspec(implementation_key(206)) void IFeatureLayer::PutForceCullMode ( VARIANT_BOOL pVal );
__declspec(implementation_key(207)) VARIANT_BOOL IFeatureLayer::GetForceCullMode ( );
__declspec(implementation_key(208)) void IFeatureLayer::PutCullMode ( enum gviCullFaceMode pVal );
__declspec(implementation_key(209)) enum gviCullFaceMode IFeatureLayer::GetCullMode ( );
__declspec(implementation_key(210)) void IFeatureLayer::PutEnableTemporal ( VARIANT_BOOL pVal );
__declspec(implementation_key(211)) VARIANT_BOOL IFeatureLayer::GetEnableTemporal ( );
__declspec(implementation_key(212)) DATE IFeatureLayer::GetTime ( );
__declspec(implementation_key(213)) void IFeatureLayer::PutTime ( DATE pVal );
__declspec(implementation_key(214)) long IFeatureLayer::GetDrawOrder ( );
__declspec(implementation_key(215)) void IFeatureLayer::PutDrawOrder ( long pVal );
__declspec(implementation_key(216)) enum gviGeometryColumnType IFeatureLayer::GetGeometryType ( );
__declspec(implementation_key(217)) _bstr_t IFeatureLayer::GetWKT ( );
__declspec(implementation_key(218)) IFeatureClassInfoPtr IFeatureLayer::GetFeatureClassInfo ( );
__declspec(implementation_key(219)) SAFEARRAY * IFeatureLayer::GetHiddenFeatures ( );
__declspec(implementation_key(220)) void IFeatureLayer::PutHiddenFeatures ( SAFEARRAY * pVal );
__declspec(implementation_key(221)) VARIANT_BOOL ITerrainRoute::AddWaypoint ( struct IVector3 * Position, struct IEulerAngle * Angle, double Speed );
__declspec(implementation_key(222)) VARIANT_BOOL ITerrainRoute::AddWaypoint2 ( struct IPoint * Position, struct IEulerAngle * Angle, double Speed );
__declspec(implementation_key(223)) VARIANT_BOOL ITerrainRoute::ModifyWaypoint ( long Index, struct IVector3 * Position, struct IEulerAngle * Angle, double Speed );
__declspec(implementation_key(224)) VARIANT_BOOL ITerrainRoute::ModifyWaypoint2 ( long Index, struct IPoint * Position, struct IEulerAngle * Angle, double Speed );
__declspec(implementation_key(225)) VARIANT_BOOL ITerrainRoute::InsertWaypoint ( long Index, struct IVector3 * Position, struct IEulerAngle * Angle, double Speed );
__declspec(implementation_key(226)) VARIANT_BOOL ITerrainRoute::InsertWaypoint2 ( long Index, struct IPoint * Position, struct IEulerAngle * Angle, double Speed );
__declspec(implementation_key(227)) VARIANT_BOOL ITerrainRoute::GetWaypoint ( long Index, struct IVector3 * * Position, struct IEulerAngle * * Angle, double * Speed );
__declspec(implementation_key(228)) VARIANT_BOOL ITerrainRoute::GetWaypoint2 ( long Index, struct IPoint * * Position, struct IEulerAngle * * Angle, double * Speed );
__declspec(implementation_key(229)) VARIANT_BOOL ITerrainRoute::DeleteWaypoint ( long Index );
__declspec(implementation_key(230)) long ITerrainRoute::GetWaypointsNumber ( );
__declspec(implementation_key(231)) HRESULT ITerrainRoute::Play ( );
__declspec(implementation_key(232)) HRESULT ITerrainRoute::Stop ( );
__declspec(implementation_key(233)) HRESULT ITerrainRoute::Pause ( );
__declspec(implementation_key(234)) VARIANT_BOOL ITerrainRoute::GetAutoRepeat ( );
__declspec(implementation_key(235)) void ITerrainRoute::PutAutoRepeat ( VARIANT_BOOL pVal );
__declspec(implementation_key(236)) VARIANT_BOOL ITerrainRoute::AddWaypointByMatrix ( struct IMatrix * Mat, double Speed );
__declspec(implementation_key(237)) VARIANT_BOOL ITerrainRoute::GetWaypointByMatrix ( long Index, struct IMatrix * * Mat, double * Speed );
__declspec(implementation_key(238)) VARIANT_BOOL ITerrainRoute::ModifyWaypointByMatrix ( long Index, struct IMatrix * Mat, double Speed );
__declspec(implementation_key(239)) VARIANT_BOOL ITerrainRoute::InsertWaypointByMatrix ( long Index, struct IMatrix * Mat, double Speed );
__declspec(implementation_key(240)) HRESULT ITerrainRoute::ExportVideo ( _bstr_t FilePath, long FPS );
__declspec(implementation_key(241)) HRESULT ITerrainRoute::CancelExport ( );
__declspec(implementation_key(242)) VARIANT_BOOL ITerrainRoute::GetIsExporting ( );
__declspec(implementation_key(243)) _bstr_t ITerrainRoute::GetCrsWKT ( );
__declspec(implementation_key(244)) void ITerrainRoute::PutCrsWKT ( _bstr_t pVal );
__declspec(implementation_key(245)) _bstr_t ITerrainRoute::AsXml ( );
__declspec(implementation_key(246)) VARIANT_BOOL ITerrainRoute::FromXml ( _bstr_t XmlStringValue );
__declspec(implementation_key(247)) _bstr_t ITerrainRoute::GetSlideImageName ( );
__declspec(implementation_key(248)) void ITerrainRoute::PutSlideImageName ( _bstr_t pVal );
__declspec(implementation_key(249)) __int64 IGeometrySymbol::GetInternalObject ( );
__declspec(implementation_key(250)) void IGeometrySymbol::PutInternalObject ( __int64 pVal );
__declspec(implementation_key(251)) enum gviGeometrySymbolType IGeometrySymbol::GetSymbolType ( );
__declspec(implementation_key(252)) HRESULT IGeometrySymbol::SetResourceDataSet ( struct IFeatureDataSet * DataSet );
__declspec(implementation_key(253)) _bstr_t IGeometrySymbol::GetScript ( );
__declspec(implementation_key(254)) void IGeometrySymbol::PutScript ( _bstr_t pVal );
__declspec(implementation_key(255)) _bstr_t IGeometrySymbol::AsXml ( );
__declspec(implementation_key(256)) OLE_COLOR IModelPointSymbol::GetColor ( );
__declspec(implementation_key(257)) void IModelPointSymbol::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(258)) VARIANT_BOOL IModelPointSymbol::GetEnableTexture ( );
__declspec(implementation_key(259)) void IModelPointSymbol::PutEnableTexture ( VARIANT_BOOL pVal );
__declspec(implementation_key(260)) VARIANT_BOOL IModelPointSymbol::GetEnableColor ( );
__declspec(implementation_key(261)) void IModelPointSymbol::PutEnableColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(262)) IModelPointSymbolPtr IRenderModelPoint::GetSymbol ( );
__declspec(implementation_key(263)) void IRenderModelPoint::PutSymbol ( struct IModelPointSymbol * pVal );
__declspec(implementation_key(264)) IVector3Ptr IRenderModelPoint::GetPosition ( );
__declspec(implementation_key(265)) void IRenderModelPoint::PutPosition ( struct IVector3 * pVal );
__declspec(implementation_key(266)) SAFEARRAY * IRenderModelPoint::GetMatrix ( );
__declspec(implementation_key(267)) void IRenderModelPoint::PutMatrix ( SAFEARRAY * pVal );
__declspec(implementation_key(268)) _bstr_t IRenderModelPoint::GetModelName ( );
__declspec(implementation_key(269)) OLE_COLOR ICurveSymbol::GetColor ( );
__declspec(implementation_key(270)) void ICurveSymbol::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(271)) float ICurveSymbol::GetWidth ( );
__declspec(implementation_key(272)) void ICurveSymbol::PutWidth ( float pVal );
__declspec(implementation_key(273)) float ICurveSymbol::GetRepeatLength ( );
__declspec(implementation_key(274)) void ICurveSymbol::PutRepeatLength ( float pVal );
__declspec(implementation_key(275)) _bstr_t ICurveSymbol::GetImageName ( );
__declspec(implementation_key(276)) void ICurveSymbol::PutImageName ( _bstr_t pVal );
__declspec(implementation_key(277)) OLE_COLOR ICurveSymbol::GetBackColor ( );
__declspec(implementation_key(278)) void ICurveSymbol::PutBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(279)) enum gviDashStyle ICurveSymbol::GetPattern ( );
__declspec(implementation_key(280)) void ICurveSymbol::PutPattern ( enum gviDashStyle pVal );
__declspec(implementation_key(281)) ICurveSymbolPtr IRenderPolyline::GetSymbol ( );
__declspec(implementation_key(282)) void IRenderPolyline::PutSymbol ( struct ICurveSymbol * pVal );
__declspec(implementation_key(283)) enum gviHeightStyle IRenderPolyline::GetHeightStyle ( );
__declspec(implementation_key(284)) void IRenderPolyline::PutHeightStyle ( enum gviHeightStyle pVal );
__declspec(implementation_key(285)) OLE_COLOR ISurfaceSymbol::GetColor ( );
__declspec(implementation_key(286)) void ISurfaceSymbol::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(287)) ICurveSymbolPtr ISurfaceSymbol::GetBoundarySymbol ( );
__declspec(implementation_key(288)) void ISurfaceSymbol::PutBoundarySymbol ( struct ICurveSymbol * pVal );
__declspec(implementation_key(289)) VARIANT_BOOL ISurfaceSymbol::GetEnableLight ( );
__declspec(implementation_key(290)) void ISurfaceSymbol::PutEnableLight ( VARIANT_BOOL pVal );
__declspec(implementation_key(291)) _bstr_t ISurfaceSymbol::GetImageName ( );
__declspec(implementation_key(292)) void ISurfaceSymbol::PutImageName ( _bstr_t pVal );
__declspec(implementation_key(293)) float ISurfaceSymbol::GetRepeatLengthU ( );
__declspec(implementation_key(294)) void ISurfaceSymbol::PutRepeatLengthU ( float pVal );
__declspec(implementation_key(295)) float ISurfaceSymbol::GetRepeatLengthV ( );
__declspec(implementation_key(296)) void ISurfaceSymbol::PutRepeatLengthV ( float pVal );
__declspec(implementation_key(297)) float ISurfaceSymbol::GetRotation ( );
__declspec(implementation_key(298)) void ISurfaceSymbol::PutRotation ( float pVal );
__declspec(implementation_key(299)) ISurfaceSymbolPtr IRenderPolygon::GetSymbol ( );
__declspec(implementation_key(300)) void IRenderPolygon::PutSymbol ( struct ISurfaceSymbol * pVal );
__declspec(implementation_key(301)) enum gviHeightStyle IRenderPolygon::GetHeightStyle ( );
__declspec(implementation_key(302)) void IRenderPolygon::PutHeightStyle ( enum gviHeightStyle pVal );
__declspec(implementation_key(303)) ISurfaceSymbolPtr IRenderTriMesh::GetSymbol ( );
__declspec(implementation_key(304)) void IRenderTriMesh::PutSymbol ( struct ISurfaceSymbol * pVal );
__declspec(implementation_key(305)) ISurfaceSymbolPtr IRenderMultiTriMesh::GetSymbol ( );
__declspec(implementation_key(306)) void IRenderMultiTriMesh::PutSymbol ( struct ISurfaceSymbol * pVal );
__declspec(implementation_key(307)) long IPointSymbol::GetSize ( );
__declspec(implementation_key(308)) void IPointSymbol::PutSize ( long pVal );
__declspec(implementation_key(309)) enum gviPivotAlignment IPointSymbol::GetAlignment ( );
__declspec(implementation_key(310)) void IPointSymbol::PutAlignment ( enum gviPivotAlignment pVal );
__declspec(implementation_key(311)) IPointSymbolPtr IRenderMultiPoint::GetSymbol ( );
__declspec(implementation_key(312)) void IRenderMultiPoint::PutSymbol ( struct IPointSymbol * pVal );
__declspec(implementation_key(313)) HRESULT ICameraTour::ClearWaypoints ( );
__declspec(implementation_key(314)) HRESULT ICameraTour::AddWaypoint ( struct IVector3 * Position, struct IEulerAngle * Angle, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(315)) HRESULT ICameraTour::AddWaypoint2 ( struct IPoint * Position, struct IEulerAngle * Angle, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(316)) HRESULT ICameraTour::ModifyWaypoint ( long Index, struct IVector3 * Position, struct IEulerAngle * Angle, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(317)) HRESULT ICameraTour::ModifyWaypoint2 ( long Index, struct IPoint * Position, struct IEulerAngle * Angle, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(318)) HRESULT ICameraTour::InsertWaypoint ( long Index, struct IVector3 * Position, struct IEulerAngle * Angle, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(319)) HRESULT ICameraTour::InsertWaypoint2 ( long Index, struct IPoint * Position, struct IEulerAngle * Angle, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(320)) HRESULT ICameraTour::GetWaypoint ( long Index, struct IVector3 * * Position, struct IEulerAngle * * Angle, double * Duration, enum gviCameraTourMode * Mode );
__declspec(implementation_key(321)) HRESULT ICameraTour::GetWaypoint2 ( long Index, struct IPoint * * Position, struct IEulerAngle * * Angle, double * Duration, enum gviCameraTourMode * Mode );
__declspec(implementation_key(322)) HRESULT ICameraTour::DeleteWaypoint ( long Index );
__declspec(implementation_key(323)) HRESULT ICameraTour::Play ( );
__declspec(implementation_key(324)) HRESULT ICameraTour::Pause ( );
__declspec(implementation_key(325)) HRESULT ICameraTour::Stop ( );
__declspec(implementation_key(326)) double ICameraTour::GetTotalTime ( );
__declspec(implementation_key(327)) double ICameraTour::GetTime ( );
__declspec(implementation_key(328)) void ICameraTour::PutTime ( double pVal );
__declspec(implementation_key(329)) VARIANT_BOOL ICameraTour::GetAutoRepeat ( );
__declspec(implementation_key(330)) void ICameraTour::PutAutoRepeat ( VARIANT_BOOL pVal );
__declspec(implementation_key(331)) long ICameraTour::GetWaypointsNumber ( );
__declspec(implementation_key(332)) long ICameraTour::GetIndex ( );
__declspec(implementation_key(333)) void ICameraTour::PutIndex ( long pVal );
__declspec(implementation_key(334)) _bstr_t ICameraTour::AsXml ( );
__declspec(implementation_key(335)) VARIANT_BOOL ICameraTour::FromXml ( _bstr_t XmlStringValue );
__declspec(implementation_key(336)) VARIANT_BOOL ICameraTour::ExportVideo ( _bstr_t FilePath, long FPS );
__declspec(implementation_key(337)) HRESULT ICameraTour::CancelExport ( );
__declspec(implementation_key(338)) VARIANT_BOOL ICameraTour::GetIsExporting ( );
__declspec(implementation_key(339)) HRESULT ICameraTour::FromAse ( _bstr_t File );
__declspec(implementation_key(340)) HRESULT ICameraTour::AddWaypointByMatrix ( struct IMatrix * Mat, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(341)) HRESULT ICameraTour::GetWaypointByMatrix ( long Index, struct IMatrix * * Mat, double * Duration, enum gviCameraTourMode * Mode );
__declspec(implementation_key(342)) HRESULT ICameraTour::ModifyWaypointByMatrix ( long Index, struct IMatrix * Mat, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(343)) HRESULT ICameraTour::InsertWaypointByMatrix ( long Index, struct IMatrix * Mat, double Duration, enum gviCameraTourMode Mode );
__declspec(implementation_key(344)) VARIANT_BOOL ICameraTour::ExportFrameSequence ( _bstr_t FilePath, long Width, long Height, long FPS );
__declspec(implementation_key(345)) _bstr_t ICameraTour::GetCrsWKT ( );
__declspec(implementation_key(346)) void ICameraTour::PutCrsWKT ( _bstr_t pVal );
__declspec(implementation_key(347)) VARIANT_BOOL ICameraTour::ExportPanoramaFrameSequence ( _bstr_t FilePath, long Width, long FPS );
__declspec(implementation_key(348)) _bstr_t ICameraTour::GetSlideImageName ( );
__declspec(implementation_key(349)) void ICameraTour::PutSlideImageName ( _bstr_t pVal );
__declspec(implementation_key(350)) IPointSymbolPtr IRenderPoint::GetSymbol ( );
__declspec(implementation_key(351)) void IRenderPoint::PutSymbol ( struct IPointSymbol * pVal );
__declspec(implementation_key(352)) HRESULT IMotionPath::AddWaypoint ( struct IVector3 * Position, struct IEulerAngle * Angle, struct IVector3 * Scale, double When );
__declspec(implementation_key(353)) HRESULT IMotionPath::AddWaypoint2 ( struct IPoint * Position, struct IEulerAngle * Angle, struct IVector3 * Scale, double When );
__declspec(implementation_key(354)) HRESULT IMotionPath::ModifyWaypoint ( long Index, struct IVector3 * Position, struct IEulerAngle * Angle, struct IVector3 * Scale, double When );
__declspec(implementation_key(355)) HRESULT IMotionPath::ModifyWaypoint2 ( long Index, struct IPoint * Position, struct IEulerAngle * Angle, struct IVector3 * Scale, double When );
__declspec(implementation_key(356)) HRESULT IMotionPath::InsertWaypoint ( long Index, struct IVector3 * Position, struct IEulerAngle * Angle, struct IVector3 * Scale, double When );
__declspec(implementation_key(357)) HRESULT IMotionPath::InsertWaypoint2 ( long Index, struct IPoint * Position, struct IEulerAngle * Angle, struct IVector3 * Scale, double When );
__declspec(implementation_key(358)) HRESULT IMotionPath::GetWaypoint ( long Index, struct IVector3 * * Position, struct IEulerAngle * * Angle, struct IVector3 * * Scale, double * When );
__declspec(implementation_key(359)) HRESULT IMotionPath::GetWaypoint2 ( long Index, struct IPoint * * Position, struct IEulerAngle * * Angle, struct IVector3 * * Scale, double * When );
__declspec(implementation_key(360)) HRESULT IMotionPath::DeleteWaypoint ( long Index );
__declspec(implementation_key(361)) HRESULT IMotionPath::ClearWaypoints ( );
__declspec(implementation_key(362)) HRESULT IMotionPath::Play ( );
__declspec(implementation_key(363)) HRESULT IMotionPath::Pause ( );
__declspec(implementation_key(364)) HRESULT IMotionPath::Stop ( );
__declspec(implementation_key(365)) double IMotionPath::GetTime ( );
__declspec(implementation_key(366)) void IMotionPath::PutTime ( double pVal );
__declspec(implementation_key(367)) VARIANT_BOOL IMotionPath::GetAutoRepeat ( );
__declspec(implementation_key(368)) void IMotionPath::PutAutoRepeat ( VARIANT_BOOL pVal );
__declspec(implementation_key(369)) long IMotionPath::GetIndex ( );
__declspec(implementation_key(370)) void IMotionPath::PutIndex ( long pVal );
__declspec(implementation_key(371)) _bstr_t IMotionPath::AsXml ( );
__declspec(implementation_key(372)) VARIANT_BOOL IMotionPath::FromXml ( _bstr_t XmlStringValue );
__declspec(implementation_key(373)) double IMotionPath::GetTotalDuration ( );
__declspec(implementation_key(374)) HRESULT IMotionPath::AddWaypointByMatrix ( struct IMatrix * Mat, double When );
__declspec(implementation_key(375)) HRESULT IMotionPath::GetWaypointByMatrix ( long Index, struct IMatrix * * Mat, double * When );
__declspec(implementation_key(376)) HRESULT IMotionPath::ModifyWaypointByMatrix ( long Index, struct IMatrix * Mat, double When );
__declspec(implementation_key(377)) HRESULT IMotionPath::InsertWaypointByMatrix ( long Index, struct IMatrix * Mat, double When );
__declspec(implementation_key(378)) long IMotionPath::GetWaypointsNumber ( );
__declspec(implementation_key(379)) _bstr_t IMotionPath::GetCrsWKT ( );
__declspec(implementation_key(380)) void IMotionPath::PutCrsWKT ( _bstr_t pVal );
__declspec(implementation_key(381)) VARIANT_BOOL IParticleEffect::Start ( double Duration );
__declspec(implementation_key(382)) HRESULT IParticleEffect::Stop ( );
__declspec(implementation_key(383)) HRESULT IParticleEffect::SetPointEmitter ( struct IPoint * Position );
__declspec(implementation_key(384)) HRESULT IParticleEffect::GetPointEmitter ( struct IPoint * * Position );
__declspec(implementation_key(385)) HRESULT IParticleEffect::SetBoxEmitter ( struct IPoint * Position, double Width, double Height, double Depth );
__declspec(implementation_key(386)) HRESULT IParticleEffect::GetBoxEmitter ( struct IPoint * * Position, double * Width, double * Height, double * Depth );
__declspec(implementation_key(387)) HRESULT IParticleEffect::SetCircleEmitter ( struct IPoint * Position, double Radius );
__declspec(implementation_key(388)) HRESULT IParticleEffect::GetCircleEmitter ( struct IPoint * * Position, double * Radius );
__declspec(implementation_key(389)) HRESULT IParticleEffect::SetTextureTileRange ( long HTile, long VTile, long StartTile, long EndTile );
__declspec(implementation_key(390)) HRESULT IParticleEffect::GetTextureTileRange ( long * HTile, long * VTile, long * StartTile, long * EndTile );
__declspec(implementation_key(391)) _bstr_t IParticleEffect::GetImageName ( );
__declspec(implementation_key(392)) void IParticleEffect::PutImageName ( _bstr_t pVal );
__declspec(implementation_key(393)) double IParticleEffect::GetEmissionMinMoveSpeed ( );
__declspec(implementation_key(394)) void IParticleEffect::PutEmissionMinMoveSpeed ( double pVal );
__declspec(implementation_key(395)) double IParticleEffect::GetEmissionMaxMoveSpeed ( );
__declspec(implementation_key(396)) void IParticleEffect::PutEmissionMaxMoveSpeed ( double pVal );
__declspec(implementation_key(397)) double IParticleEffect::GetEmissionMinRotationSpeed ( );
__declspec(implementation_key(398)) void IParticleEffect::PutEmissionMinRotationSpeed ( double pVal );
__declspec(implementation_key(399)) double IParticleEffect::GetEmissionMaxRotationSpeed ( );
__declspec(implementation_key(400)) void IParticleEffect::PutEmissionMaxRotationSpeed ( double pVal );
__declspec(implementation_key(401)) double IParticleEffect::GetEmissionMinScaleSpeed ( );
__declspec(implementation_key(402)) void IParticleEffect::PutEmissionMinScaleSpeed ( double pVal );
__declspec(implementation_key(403)) double IParticleEffect::GetEmissionMaxScaleSpeed ( );
__declspec(implementation_key(404)) void IParticleEffect::PutEmissionMaxScaleSpeed ( double pVal );
__declspec(implementation_key(405)) double IParticleEffect::GetEmissionMinAngle ( );
__declspec(implementation_key(406)) void IParticleEffect::PutEmissionMinAngle ( double pVal );
__declspec(implementation_key(407)) double IParticleEffect::GetEmissionMaxAngle ( );
__declspec(implementation_key(408)) void IParticleEffect::PutEmissionMaxAngle ( double pVal );
__declspec(implementation_key(409)) double IParticleEffect::GetEmissionMinRate ( );
__declspec(implementation_key(410)) void IParticleEffect::PutEmissionMinRate ( double pVal );
__declspec(implementation_key(411)) double IParticleEffect::GetEmissionMaxRate ( );
__declspec(implementation_key(412)) void IParticleEffect::PutEmissionMaxRate ( double pVal );
__declspec(implementation_key(413)) double IParticleEffect::GetEmissionMinParticleSize ( );
__declspec(implementation_key(414)) void IParticleEffect::PutEmissionMinParticleSize ( double pVal );
__declspec(implementation_key(415)) double IParticleEffect::GetEmissionMaxParticleSize ( );
__declspec(implementation_key(416)) void IParticleEffect::PutEmissionMaxParticleSize ( double pVal );
__declspec(implementation_key(417)) double IParticleEffect::GetParticleAspectRatio ( );
__declspec(implementation_key(418)) void IParticleEffect::PutParticleAspectRatio ( double pVal );
__declspec(implementation_key(419)) double IParticleEffect::GetParticleMinLifeTime ( );
__declspec(implementation_key(420)) void IParticleEffect::PutParticleMinLifeTime ( double pVal );
__declspec(implementation_key(421)) double IParticleEffect::GetParticleMaxLifeTime ( );
__declspec(implementation_key(422)) void IParticleEffect::PutParticleMaxLifeTime ( double pVal );
__declspec(implementation_key(423)) OLE_COLOR IParticleEffect::GetParticleBirthColor ( );
__declspec(implementation_key(424)) void IParticleEffect::PutParticleBirthColor ( OLE_COLOR pVal );
__declspec(implementation_key(425)) OLE_COLOR IParticleEffect::GetParticleDeathColor ( );
__declspec(implementation_key(426)) void IParticleEffect::PutParticleDeathColor ( OLE_COLOR pVal );
__declspec(implementation_key(427)) double IParticleEffect::GetWindDirection ( );
__declspec(implementation_key(428)) void IParticleEffect::PutWindDirection ( double pVal );
__declspec(implementation_key(429)) double IParticleEffect::GetWindAcceleration ( );
__declspec(implementation_key(430)) void IParticleEffect::PutWindAcceleration ( double pVal );
__declspec(implementation_key(431)) double IParticleEffect::GetDamping ( );
__declspec(implementation_key(432)) void IParticleEffect::PutDamping ( double pVal );
__declspec(implementation_key(433)) enum gviParticleBillboardType IParticleEffect::GetParticleBillboardType ( );
__declspec(implementation_key(434)) void IParticleEffect::PutParticleBillboardType ( enum gviParticleBillboardType pVal );
__declspec(implementation_key(435)) double IParticleEffect::GetVerticalAcceleration ( );
__declspec(implementation_key(436)) void IParticleEffect::PutVerticalAcceleration ( double pVal );
__declspec(implementation_key(437)) IEulerAnglePtr IParticleEffect::GetEmissionDirectionEulerAngle ( );
__declspec(implementation_key(438)) void IParticleEffect::PutEmissionDirectionEulerAngle ( struct IEulerAngle * pVal );
__declspec(implementation_key(439)) IPointPtr IParticleEffect::GetPosition ( );
__declspec(implementation_key(440)) enum gviEmitterType IParticleEffect::GetEmitterType ( );
__declspec(implementation_key(441)) long ITextAttribute::GetTextSize ( );
__declspec(implementation_key(442)) void ITextAttribute::PutTextSize ( long pVal );
__declspec(implementation_key(443)) VARIANT_BOOL ITextAttribute::GetItalic ( );
__declspec(implementation_key(444)) void ITextAttribute::PutItalic ( VARIANT_BOOL pVal );
__declspec(implementation_key(445)) VARIANT_BOOL ITextAttribute::GetBold ( );
__declspec(implementation_key(446)) void ITextAttribute::PutBold ( VARIANT_BOOL pVal );
__declspec(implementation_key(447)) VARIANT_BOOL ITextAttribute::GetUnderline ( );
__declspec(implementation_key(448)) void ITextAttribute::PutUnderline ( VARIANT_BOOL pVal );
__declspec(implementation_key(449)) OLE_COLOR ITextAttribute::GetTextColor ( );
__declspec(implementation_key(450)) void ITextAttribute::PutTextColor ( OLE_COLOR pVal );
__declspec(implementation_key(451)) OLE_COLOR ITextAttribute::GetOutlineColor ( );
__declspec(implementation_key(452)) void ITextAttribute::PutOutlineColor ( OLE_COLOR pVal );
__declspec(implementation_key(453)) _bstr_t ITextAttribute::GetFont ( );
__declspec(implementation_key(454)) void ITextAttribute::PutFont ( _bstr_t pVal );
__declspec(implementation_key(455)) OLE_COLOR ITextAttribute::GetBackgroundColor ( );
__declspec(implementation_key(456)) void ITextAttribute::PutBackgroundColor ( OLE_COLOR pVal );
__declspec(implementation_key(457)) enum gviMultilineJustification ITextAttribute::GetMultilineJustification ( );
__declspec(implementation_key(458)) void ITextAttribute::PutMultilineJustification ( enum gviMultilineJustification pVal );
__declspec(implementation_key(459)) ITextAttributePtr ITextSymbol::GetTextAttribute ( );
__declspec(implementation_key(460)) void ITextSymbol::PutTextAttribute ( struct ITextAttribute * pVal );
__declspec(implementation_key(461)) double ITextSymbol::GetVerticalOffset ( );
__declspec(implementation_key(462)) void ITextSymbol::PutVerticalOffset ( double pVal );
__declspec(implementation_key(463)) VARIANT_BOOL ITextSymbol::GetDrawLine ( );
__declspec(implementation_key(464)) void ITextSymbol::PutDrawLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(465)) OLE_COLOR ITextSymbol::GetLineColor ( );
__declspec(implementation_key(466)) void ITextSymbol::PutLineColor ( OLE_COLOR pVal );
__declspec(implementation_key(467)) double ITextSymbol::GetMinVisualDistance ( );
__declspec(implementation_key(468)) void ITextSymbol::PutMinVisualDistance ( double pVal );
__declspec(implementation_key(469)) double ITextSymbol::GetMaxVisualDistance ( );
__declspec(implementation_key(470)) void ITextSymbol::PutMaxVisualDistance ( double pVal );
__declspec(implementation_key(471)) long ITextSymbol::GetPriority ( );
__declspec(implementation_key(472)) void ITextSymbol::PutPriority ( long pVal );
__declspec(implementation_key(473)) enum gviPivotAlignment ITextSymbol::GetPivotAlignment ( );
__declspec(implementation_key(474)) void ITextSymbol::PutPivotAlignment ( enum gviPivotAlignment pVal );
__declspec(implementation_key(475)) long ITextSymbol::GetMarginWidth ( );
__declspec(implementation_key(476)) void ITextSymbol::PutMarginWidth ( long pVal );
__declspec(implementation_key(477)) long ITextSymbol::GetMarginHeight ( );
__declspec(implementation_key(478)) void ITextSymbol::PutMarginHeight ( long pVal );
__declspec(implementation_key(479)) enum gviLockMode ITextSymbol::GetLockMode ( );
__declspec(implementation_key(480)) void ITextSymbol::PutLockMode ( enum gviLockMode pVal );
__declspec(implementation_key(481)) OLE_COLOR ITextSymbol::GetMarginColor ( );
__declspec(implementation_key(482)) void ITextSymbol::PutMarginColor ( OLE_COLOR pVal );
__declspec(implementation_key(483)) _bstr_t ITextSymbol::AsXml ( );
__declspec(implementation_key(484)) _bstr_t ILabel::GetText ( );
__declspec(implementation_key(485)) void ILabel::PutText ( _bstr_t pVal );
__declspec(implementation_key(486)) IPointPtr ILabel::GetPosition ( );
__declspec(implementation_key(487)) void ILabel::PutPosition ( struct IPoint * pVal );
__declspec(implementation_key(488)) ITextSymbolPtr ILabel::GetTextSymbol ( );
__declspec(implementation_key(489)) void ILabel::PutTextSymbol ( struct ITextSymbol * pVal );
__declspec(implementation_key(490)) OLE_COLOR ITableLabel::GetBorderColor ( );
__declspec(implementation_key(491)) void ITableLabel::PutBorderColor ( OLE_COLOR pVal );
__declspec(implementation_key(492)) float ITableLabel::GetBorderWidth ( );
__declspec(implementation_key(493)) void ITableLabel::PutBorderWidth ( float pVal );
__declspec(implementation_key(494)) _bstr_t ITableLabel::GetTitleText ( );
__declspec(implementation_key(495)) void ITableLabel::PutTitleText ( _bstr_t pVal );
__declspec(implementation_key(496)) OLE_COLOR ITableLabel::GetTitleBackgroundColor ( );
__declspec(implementation_key(497)) void ITableLabel::PutTitleBackgroundColor ( OLE_COLOR pVal );
__declspec(implementation_key(498)) ITextAttributePtr ITableLabel::GetTitleTextAttribute ( );
__declspec(implementation_key(499)) void ITableLabel::PutTitleTextAttribute ( struct ITextAttribute * pVal );
__declspec(implementation_key(500)) OLE_COLOR ITableLabel::GetTableBackgroundColor ( );
__declspec(implementation_key(501)) void ITableLabel::PutTableBackgroundColor ( OLE_COLOR pVal );
__declspec(implementation_key(502)) ITextAttributePtr ITableLabel::GetColumnTextAttribute ( long Index );
__declspec(implementation_key(503)) HRESULT ITableLabel::SetColumnTextAttribute ( long Index, struct ITextAttribute * newVal );
__declspec(implementation_key(504)) HRESULT ITableLabel::SetColumnWidth ( long Index, long Width );
__declspec(implementation_key(505)) long ITableLabel::GetColumnWidth ( long Index );
__declspec(implementation_key(506)) HRESULT ITableLabel::SetRecord ( long Row, long Col, _bstr_t Record );
__declspec(implementation_key(507)) _bstr_t ITableLabel::GetRecord ( long Row, long Col );
__declspec(implementation_key(508)) IPointPtr ITableLabel::GetPosition ( );
__declspec(implementation_key(509)) void ITableLabel::PutPosition ( struct IPoint * pVal );
__declspec(implementation_key(510)) long ITableLabel::GetRowCount ( );
__declspec(implementation_key(511)) long ITableLabel::GetColumnCount ( );
__declspec(implementation_key(512)) _bstr_t ITableLabel::GetBackgroundImageName ( );
__declspec(implementation_key(513)) void ITableLabel::PutBackgroundImageName ( _bstr_t pVal );
__declspec(implementation_key(514)) VARIANT_BOOL ISkinnedMesh::GetLoop ( );
__declspec(implementation_key(515)) void ISkinnedMesh::PutLoop ( VARIANT_BOOL pVal );
__declspec(implementation_key(516)) double ISkinnedMesh::GetDuration ( );
__declspec(implementation_key(517)) void ISkinnedMesh::PutDuration ( double pVal );
__declspec(implementation_key(518)) HRESULT ISkinnedMesh::Play ( );
__declspec(implementation_key(519)) HRESULT ISkinnedMesh::Stop ( );
__declspec(implementation_key(520)) HRESULT ISkinnedMesh::Pause ( );
__declspec(implementation_key(521)) IModelPointPtr ISkinnedMesh::GetModelPoint ( );
__declspec(implementation_key(522)) void ISkinnedMesh::PutModelPoint ( struct IModelPoint * pVal );
__declspec(implementation_key(523)) unsigned long ISkinnedMesh::GetAnimationCount ( );
__declspec(implementation_key(524)) unsigned long ISkinnedMesh::GetAnimationIndex ( );
__declspec(implementation_key(525)) void ISkinnedMesh::PutAnimationIndex ( unsigned long pVal );
__declspec(implementation_key(526)) VARIANT_BOOL ISkinnedMesh::ClampAnimation ( double StartPercentage, double EndPercentage );
__declspec(implementation_key(527)) ICurveSymbolPtr IRenderMultiPolyline::GetSymbol ( );
__declspec(implementation_key(528)) void IRenderMultiPolyline::PutSymbol ( struct ICurveSymbol * pVal );
__declspec(implementation_key(529)) enum gviHeightStyle IRenderMultiPolyline::GetHeightStyle ( );
__declspec(implementation_key(530)) void IRenderMultiPolyline::PutHeightStyle ( enum gviHeightStyle pVal );
__declspec(implementation_key(531)) ISurfaceSymbolPtr IRenderMultiPolygon::GetSymbol ( );
__declspec(implementation_key(532)) void IRenderMultiPolygon::PutSymbol ( struct ISurfaceSymbol * pVal );
__declspec(implementation_key(533)) enum gviHeightStyle IRenderMultiPolygon::GetHeightStyle ( );
__declspec(implementation_key(534)) void IRenderMultiPolygon::PutHeightStyle ( enum gviHeightStyle pVal );
__declspec(implementation_key(535)) GUID IProjectTree::GetNotInTreeID ( );
__declspec(implementation_key(536)) GUID IProjectTree::GetRootID ( );
__declspec(implementation_key(537)) GUID IProjectTree::CreateGroup ( _bstr_t GroupName, GUID ParentGroupID );
__declspec(implementation_key(538)) GUID IProjectTree::CreateLockedGroup ( _bstr_t GroupName, GUID ParentGroupID );
__declspec(implementation_key(539)) HRESULT IProjectTree::DeleteItem ( GUID Id );
__declspec(implementation_key(540)) GUID IProjectTree::FindItem ( _bstr_t Path );
__declspec(implementation_key(541)) _bstr_t IProjectTree::GetItemName ( GUID Id );
__declspec(implementation_key(542)) GUID IProjectTree::GetNextItem ( GUID Id, long Code );
__declspec(implementation_key(543)) long IProjectTree::GetVisibility ( GUID Id );
__declspec(implementation_key(544)) VARIANT_BOOL IProjectTree::IsGroup ( GUID Id );
__declspec(implementation_key(545)) VARIANT_BOOL IProjectTree::IsLocked ( GUID Id );
__declspec(implementation_key(546)) GUID IProjectTree::LoadCepLayer ( _bstr_t CepURL, GUID ParentGroupID );
__declspec(implementation_key(547)) HRESULT IProjectTree::LockGroup ( GUID GroupId, VARIANT_BOOL Lock );
__declspec(implementation_key(548)) HRESULT IProjectTree::RenameGroup ( GUID GroupId, _bstr_t GroupName );
__declspec(implementation_key(549)) _bstr_t IProjectTree::SaveAsCep ( _bstr_t CepName, GUID GroupId );
__declspec(implementation_key(550)) HRESULT IProjectTree::SetParent ( GUID Id, GUID GroupId, long Index );
__declspec(implementation_key(551)) HRESULT IProjectTree::SetVisibility ( GUID Id, unsigned char VisibleMask );
__declspec(implementation_key(552)) HRESULT IProjectTree::SetClientData ( GUID Id, _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(553)) _bstr_t IProjectTree::GetClientData ( GUID Id, _bstr_t Name );
__declspec(implementation_key(554)) VARIANT_BOOL IProjectTree::GetShowSlide ( );
__declspec(implementation_key(555)) void IProjectTree::PutShowSlide ( VARIANT_BOOL pVal );
__declspec(implementation_key(556)) HRESULT IProjectTree::SetGroupSlideImageName ( GUID GroupId, _bstr_t ImageName );
__declspec(implementation_key(557)) _bstr_t IProjectTree::GetGroupSlideImageName ( GUID GroupId );
__declspec(implementation_key(558)) GUID IProjectTree::GetSlideRootGroup ( );
__declspec(implementation_key(559)) void IProjectTree::PutSlideRootGroup ( GUID pVal );
__declspec(implementation_key(560)) long IRasterSymbol::GetRedBand ( );
__declspec(implementation_key(561)) void IRasterSymbol::PutRedBand ( long pVal );
__declspec(implementation_key(562)) long IRasterSymbol::GetGreenBand ( );
__declspec(implementation_key(563)) void IRasterSymbol::PutGreenBand ( long pVal );
__declspec(implementation_key(564)) long IRasterSymbol::GetBlueBand ( );
__declspec(implementation_key(565)) void IRasterSymbol::PutBlueBand ( long pVal );
__declspec(implementation_key(566)) long IRasterSymbol::GetAlphaBand ( );
__declspec(implementation_key(567)) void IRasterSymbol::PutAlphaBand ( long pVal );
__declspec(implementation_key(568)) VARIANT_BOOL IRasterSymbol::GetRedEnabled ( );
__declspec(implementation_key(569)) void IRasterSymbol::PutRedEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(570)) VARIANT_BOOL IRasterSymbol::GetGreenEnable ( );
__declspec(implementation_key(571)) void IRasterSymbol::PutGreenEnable ( VARIANT_BOOL pVal );
__declspec(implementation_key(572)) VARIANT_BOOL IRasterSymbol::GetBlueEnabled ( );
__declspec(implementation_key(573)) void IRasterSymbol::PutBlueEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(574)) VARIANT_BOOL IRasterSymbol::GetAlphaEnabled ( );
__declspec(implementation_key(575)) void IRasterSymbol::PutAlphaEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(576)) VARIANT_BOOL IRasterSymbol::GetBackgroundEnabled ( );
__declspec(implementation_key(577)) void IRasterSymbol::PutBackgroundEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(578)) OLE_COLOR IRasterSymbol::GetBackgroundKey ( );
__declspec(implementation_key(579)) void IRasterSymbol::PutBackgroundKey ( OLE_COLOR pVal );
__declspec(implementation_key(580)) OLE_COLOR IRasterSymbol::GetBackgroundValue ( );
__declspec(implementation_key(581)) void IRasterSymbol::PutBackgroundValue ( OLE_COLOR pVal );
__declspec(implementation_key(582)) long IImageryLayer::GetImageWidth ( );
__declspec(implementation_key(583)) long IImageryLayer::GetImageHeight ( );
__declspec(implementation_key(584)) _bstr_t IImageryLayer::GetWKT ( );
__declspec(implementation_key(585)) VARIANT_BOOL IImageryLayer::SetWKT ( _bstr_t newVal );
__declspec(implementation_key(586)) _bstr_t IImageryLayer::GetConnectionString ( );
__declspec(implementation_key(587)) IRasterSymbolPtr IImageryLayer::GetRasterSymbol ( );
__declspec(implementation_key(588)) HRESULT IImageryLayer::SetRasterSymbol ( struct IRasterSymbol * newVal );
__declspec(implementation_key(589)) double IImageryLayer::GetDrawOrder ( );
__declspec(implementation_key(590)) void IImageryLayer::PutDrawOrder ( double pVal );
__declspec(implementation_key(591)) double IImageryLayer::GetOpacity ( );
__declspec(implementation_key(592)) void IImageryLayer::PutOpacity ( double pVal );
__declspec(implementation_key(593)) long IImageryLayer::GetBandCount ( );
__declspec(implementation_key(594)) VARIANT_BOOL IImageryLayer::Valid ( );
__declspec(implementation_key(595)) HRESULT IImageryLayer::GetExtent ( double * Left, double * Right, double * Bottom, double * Top );
__declspec(implementation_key(596)) HRESULT IImageryLayer::GetResolution ( double * ResolutionX, double * ResolutionY );
__declspec(implementation_key(597)) IPolygonPtr ITerrainHole::GetPolygon ( );
__declspec(implementation_key(598)) HRESULT ITerrainHole::SetPolygon ( struct IPolygon * newVal );
__declspec(implementation_key(599)) long ITerrainHole::GetDrawOrder ( );
__declspec(implementation_key(600)) void ITerrainHole::PutDrawOrder ( long pVal );
__declspec(implementation_key(601)) IPolygonPtr I3DTileHole::GetPolygon ( );
__declspec(implementation_key(602)) HRESULT I3DTileHole::SetPolygon ( struct IPolygon * newVal );
__declspec(implementation_key(603)) long I3DTileHole::GetDrawOrder ( );
__declspec(implementation_key(604)) void I3DTileHole::PutDrawOrder ( long pVal );
__declspec(implementation_key(605)) IPropertySetPtr I3DTileLayer::GetRenderParams ( );
__declspec(implementation_key(606)) void I3DTileLayer::PutRenderParams ( struct IPropertySet * pVal );
__declspec(implementation_key(607)) _bstr_t I3DTileLayer::GetConnectionInfo ( );
__declspec(implementation_key(608)) _bstr_t I3DTileLayer::GetWKT ( );
__declspec(implementation_key(609)) _bstr_t IOverlayLabel::GetText ( );
__declspec(implementation_key(610)) void IOverlayLabel::PutText ( _bstr_t pVal );
__declspec(implementation_key(611)) ITextAttributePtr IOverlayLabel::GetTextStyle ( );
__declspec(implementation_key(612)) void IOverlayLabel::PutTextStyle ( struct ITextAttribute * pVal );
__declspec(implementation_key(613)) enum gviPivotAlignment IOverlayLabel::GetAlignment ( );
__declspec(implementation_key(614)) void IOverlayLabel::PutAlignment ( enum gviPivotAlignment pVal );
__declspec(implementation_key(615)) _bstr_t IOverlayLabel::GetImageName ( );
__declspec(implementation_key(616)) void IOverlayLabel::PutImageName ( _bstr_t pVal );
__declspec(implementation_key(617)) HRESULT IOverlayLabel::SetX ( long Offset, float WindowWidthRatio, float WindowHeightRatio );
__declspec(implementation_key(618)) HRESULT IOverlayLabel::SetY ( long Offset, float WindowWidthRatio, float WindowHeightRatio );
__declspec(implementation_key(619)) HRESULT IOverlayLabel::SetWidth ( long Offset, float WindowWidthRatio, float WindowHeightRatio );
__declspec(implementation_key(620)) HRESULT IOverlayLabel::SetHeight ( long Offset, float WindowWidthRatio, float WindowHeightRatio );
__declspec(implementation_key(621)) long IOverlayLabel::GetX ( );
__declspec(implementation_key(622)) long IOverlayLabel::GetY ( );
__declspec(implementation_key(623)) long IOverlayLabel::GetWidth ( );
__declspec(implementation_key(624)) long IOverlayLabel::GetHeight ( );
__declspec(implementation_key(625)) float IOverlayLabel::GetRotation ( );
__declspec(implementation_key(626)) void IOverlayLabel::PutRotation ( float pVal );
__declspec(implementation_key(627)) float IOverlayLabel::GetDepth ( );
__declspec(implementation_key(628)) void IOverlayLabel::PutDepth ( float pVal );
__declspec(implementation_key(629)) IPointPtr ITerrainVideo::GetPosition ( );
__declspec(implementation_key(630)) void ITerrainVideo::PutPosition ( struct IPoint * pVal );
__declspec(implementation_key(631)) IEulerAnglePtr ITerrainVideo::GetAngle ( );
__declspec(implementation_key(632)) void ITerrainVideo::PutAngle ( struct IEulerAngle * pVal );
__declspec(implementation_key(633)) double ITerrainVideo::GetFarClip ( );
__declspec(implementation_key(634)) void ITerrainVideo::PutFarClip ( double pVal );
__declspec(implementation_key(635)) double ITerrainVideo::GetFieldOfView ( );
__declspec(implementation_key(636)) void ITerrainVideo::PutFieldOfView ( double pVal );
__declspec(implementation_key(637)) double ITerrainVideo::GetAspectRatio ( );
__declspec(implementation_key(638)) void ITerrainVideo::PutAspectRatio ( double pVal );
__declspec(implementation_key(639)) VARIANT_BOOL ITerrainVideo::GetShowProjector ( );
__declspec(implementation_key(640)) void ITerrainVideo::PutShowProjector ( VARIANT_BOOL pVal );
__declspec(implementation_key(641)) VARIANT_BOOL ITerrainVideo::GetShowProjectionLines ( );
__declspec(implementation_key(642)) void ITerrainVideo::PutShowProjectionLines ( VARIANT_BOOL pVal );
__declspec(implementation_key(643)) _bstr_t ITerrainVideo::GetVideoFileName ( );
__declspec(implementation_key(644)) void ITerrainVideo::PutVideoFileName ( _bstr_t pVal );
__declspec(implementation_key(645)) double ITerrainVideo::GetVideoLength ( );
__declspec(implementation_key(646)) double ITerrainVideo::GetVideoOpacity ( );
__declspec(implementation_key(647)) void ITerrainVideo::PutVideoOpacity ( double pVal );
__declspec(implementation_key(648)) double ITerrainVideo::GetVideoPosition ( );
__declspec(implementation_key(649)) void ITerrainVideo::PutVideoPosition ( double pVal );
__declspec(implementation_key(650)) long ITerrainVideo::GetPlayStatus ( );
__declspec(implementation_key(651)) VARIANT_BOOL ITerrainVideo::GetCanSeek ( );
__declspec(implementation_key(652)) VARIANT_BOOL ITerrainVideo::GetPlayVideoOnStartup ( );
__declspec(implementation_key(653)) void ITerrainVideo::PutPlayVideoOnStartup ( VARIANT_BOOL pVal );
__declspec(implementation_key(654)) double ITerrainVideo::GetPlaybackRate ( );
__declspec(implementation_key(655)) void ITerrainVideo::PutPlaybackRate ( double pVal );
__declspec(implementation_key(656)) VARIANT_BOOL ITerrainVideo::GetPlayLoop ( );
__declspec(implementation_key(657)) void ITerrainVideo::PutPlayLoop ( VARIANT_BOOL pVal );
__declspec(implementation_key(658)) _bstr_t ITerrainVideo::GetIcon ( );
__declspec(implementation_key(659)) void ITerrainVideo::PutIcon ( _bstr_t pVal );
__declspec(implementation_key(660)) IPointPtr IViewshed::GetPosition ( );
__declspec(implementation_key(661)) void IViewshed::PutPosition ( struct IPoint * pVal );
__declspec(implementation_key(662)) IEulerAnglePtr IViewshed::GetAngle ( );
__declspec(implementation_key(663)) void IViewshed::PutAngle ( struct IEulerAngle * pVal );
__declspec(implementation_key(664)) double IViewshed::GetFarClip ( );
__declspec(implementation_key(665)) void IViewshed::PutFarClip ( double pVal );
__declspec(implementation_key(666)) double IViewshed::GetFieldOfView ( );
__declspec(implementation_key(667)) void IViewshed::PutFieldOfView ( double pVal );
__declspec(implementation_key(668)) double IViewshed::GetAspectRatio ( );
__declspec(implementation_key(669)) void IViewshed::PutAspectRatio ( double pVal );
__declspec(implementation_key(670)) VARIANT_BOOL IViewshed::GetShowProjector ( );
__declspec(implementation_key(671)) void IViewshed::PutShowProjector ( VARIANT_BOOL pVal );
__declspec(implementation_key(672)) VARIANT_BOOL IViewshed::GetShowProjectionLines ( );
__declspec(implementation_key(673)) void IViewshed::PutShowProjectionLines ( VARIANT_BOOL pVal );
__declspec(implementation_key(674)) _bstr_t IViewshed::GetIcon ( );
__declspec(implementation_key(675)) void IViewshed::PutIcon ( _bstr_t pVal );
__declspec(implementation_key(676)) enum gviArrowType IRenderArrow::GetArrowType ( );
__declspec(implementation_key(677)) void IRenderArrow::PutArrowType ( enum gviArrowType pVal );
__declspec(implementation_key(678)) ISurfaceSymbolPtr IRenderArrow::GetSymbol ( );
__declspec(implementation_key(679)) void IRenderArrow::PutSymbol ( struct ISurfaceSymbol * pVal );
__declspec(implementation_key(680)) double IRenderArrow::GetHeadHeight ( );
__declspec(implementation_key(681)) void IRenderArrow::PutHeadHeight ( double pVal );
__declspec(implementation_key(682)) double IRenderArrow::GetBottomWidth ( );
__declspec(implementation_key(683)) void IRenderArrow::PutBottomWidth ( double pVal );
__declspec(implementation_key(684)) double IRenderArrow::GetWingAngle ( );
__declspec(implementation_key(685)) void IRenderArrow::PutWingAngle ( double pVal );
__declspec(implementation_key(686)) double IRenderArrow::GetWingLength ( );
__declspec(implementation_key(687)) void IRenderArrow::PutWingLength ( double pVal );
__declspec(implementation_key(688)) double IRenderArrow::GetWingBottomLength ( );
__declspec(implementation_key(689)) void IRenderArrow::PutWingBottomLength ( double pVal );
__declspec(implementation_key(690)) double IRenderArrow::GetTolerance ( );
__declspec(implementation_key(691)) void IRenderArrow::PutTolerance ( double pVal );
__declspec(implementation_key(692)) double IRenderArrow::GetChordHeight ( );
__declspec(implementation_key(693)) void IRenderArrow::PutChordHeight ( double pVal );
__declspec(implementation_key(694)) VARIANT_BOOL IRenderArrow::GetDualArrowFollow ( );
__declspec(implementation_key(695)) void IRenderArrow::PutDualArrowFollow ( VARIANT_BOOL pVal );
__declspec(implementation_key(696)) HRESULT IRenderArrow::AddPoint ( struct IPoint * newVal );
__declspec(implementation_key(697)) VARIANT_BOOL IDynamicObject::AddWaypoint ( struct IVector3 * Position, double Speed );
__declspec(implementation_key(698)) VARIANT_BOOL IDynamicObject::AddWaypoint2 ( struct IPoint * Position, double Speed );
__declspec(implementation_key(699)) _bstr_t IDynamicObject::AsXml ( );
__declspec(implementation_key(700)) HRESULT IDynamicObject::ClearWaypoints ( );
__declspec(implementation_key(701)) VARIANT_BOOL IDynamicObject::DeleteWaypoint ( long Index );
__declspec(implementation_key(702)) VARIANT_BOOL IDynamicObject::FromXml ( _bstr_t XmlStringValue );
__declspec(implementation_key(703)) VARIANT_BOOL IDynamicObject::GetWaypoint ( long Index, struct IVector3 * * Position, double * Speed );
__declspec(implementation_key(704)) VARIANT_BOOL IDynamicObject::GetWaypoint2 ( long Index, struct IPoint * * Position, double * Speed );
__declspec(implementation_key(705)) VARIANT_BOOL IDynamicObject::ModifyWaypoint ( long Index, struct IVector3 * Position, double Speed );
__declspec(implementation_key(706)) VARIANT_BOOL IDynamicObject::ModifyWaypoint2 ( long Index, struct IPoint * Position, double Speed );
__declspec(implementation_key(707)) VARIANT_BOOL IDynamicObject::InsertWaypoint ( long Index, struct IVector3 * Position, double Speed );
__declspec(implementation_key(708)) VARIANT_BOOL IDynamicObject::InsertWaypoint2 ( long Index, struct IPoint * Position, double Speed );
__declspec(implementation_key(709)) HRESULT IDynamicObject::Play ( );
__declspec(implementation_key(710)) HRESULT IDynamicObject::Stop ( );
__declspec(implementation_key(711)) HRESULT IDynamicObject::Pause ( );
__declspec(implementation_key(712)) VARIANT_BOOL IDynamicObject::GetAutoRepeat ( );
__declspec(implementation_key(713)) void IDynamicObject::PutAutoRepeat ( VARIANT_BOOL pVal );
__declspec(implementation_key(714)) _bstr_t IDynamicObject::GetCrsWKT ( );
__declspec(implementation_key(715)) void IDynamicObject::PutCrsWKT ( _bstr_t pVal );
__declspec(implementation_key(716)) long IDynamicObject::GetIndex ( );
__declspec(implementation_key(717)) void IDynamicObject::PutIndex ( long pVal );
__declspec(implementation_key(718)) long IDynamicObject::GetWaypointsNumber ( );
__declspec(implementation_key(719)) double IDynamicObject::GetTurnSpeed ( );
__declspec(implementation_key(720)) void IDynamicObject::PutTurnSpeed ( double pVal );
__declspec(implementation_key(721)) enum gviDynamicMotionStyle IDynamicObject::GetMotionStyle ( );
__declspec(implementation_key(722)) void IDynamicObject::PutMotionStyle ( enum gviDynamicMotionStyle pVal );
__declspec(implementation_key(723)) IPolygonPtr ITerrainModifier::GetPolygon ( );
__declspec(implementation_key(724)) HRESULT ITerrainModifier::SetPolygon ( struct IPolygon * newVal );
__declspec(implementation_key(725)) enum gviElevationBehaviorMode ITerrainModifier::GetElevationBehavior ( );
__declspec(implementation_key(726)) void ITerrainModifier::PutElevationBehavior ( enum gviElevationBehaviorMode pVal );
__declspec(implementation_key(727)) long ITerrainModifier::GetDrawOrder ( );
__declspec(implementation_key(728)) void ITerrainModifier::PutDrawOrder ( long pVal );
__declspec(implementation_key(729)) double IPosition::GetX ( );
__declspec(implementation_key(730)) void IPosition::PutX ( double pVal );
__declspec(implementation_key(731)) double IPosition::GetY ( );
__declspec(implementation_key(732)) void IPosition::PutY ( double pVal );
__declspec(implementation_key(733)) double IPosition::GetHeading ( );
__declspec(implementation_key(734)) void IPosition::PutHeading ( double pVal );
__declspec(implementation_key(735)) double IPosition::GetTilt ( );
__declspec(implementation_key(736)) void IPosition::PutTilt ( double pVal );
__declspec(implementation_key(737)) double IPosition::GetRoll ( );
__declspec(implementation_key(738)) void IPosition::PutRoll ( double pVal );
__declspec(implementation_key(739)) double IPosition::GetAltitude ( );
__declspec(implementation_key(740)) void IPosition::PutAltitude ( double pVal );
__declspec(implementation_key(741)) VARIANT_BOOL IPosition::GetCartesian ( );
__declspec(implementation_key(742)) void IPosition::PutCartesian ( VARIANT_BOOL pVal );
__declspec(implementation_key(743)) enum gviAltitudeType IPosition::GetAltitudeType ( );
__declspec(implementation_key(744)) void IPosition::PutAltitudeType ( enum gviAltitudeType pVal );
__declspec(implementation_key(745)) HRESULT IPosition::Init ( double X, double Y, double Altitude, double Heading, double Tilt, double Roll, enum gviAltitudeType AltitudeType );
__declspec(implementation_key(746)) double IPosition::GetDistance ( );
__declspec(implementation_key(747)) void IPosition::PutDistance ( double pVal );
__declspec(implementation_key(748)) double IObjectTexture::GetRotateAngle ( );
__declspec(implementation_key(749)) void IObjectTexture::PutRotateAngle ( double pVal );
__declspec(implementation_key(750)) double IObjectTexture::GetScaleX ( );
__declspec(implementation_key(751)) void IObjectTexture::PutScaleX ( double pVal );
__declspec(implementation_key(752)) double IObjectTexture::GetScaleY ( );
__declspec(implementation_key(753)) void IObjectTexture::PutScaleY ( double pVal );
__declspec(implementation_key(754)) _bstr_t IObjectTexture::GetFileName ( );
__declspec(implementation_key(755)) void IObjectTexture::PutFileName ( _bstr_t pVal );
__declspec(implementation_key(756)) OLE_COLOR IFillStyle::GetColor ( );
__declspec(implementation_key(757)) void IFillStyle::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(758)) IObjectTexturePtr IFillStyle::GetTexture ( );
__declspec(implementation_key(759)) void IFillStyle::PutTexture ( struct IObjectTexture * pVal );
__declspec(implementation_key(760)) OLE_COLOR ILineStyle::GetBackColor ( );
__declspec(implementation_key(761)) void ILineStyle::PutBackColor ( OLE_COLOR pVal );
__declspec(implementation_key(762)) OLE_COLOR ILineStyle::GetColor ( );
__declspec(implementation_key(763)) void ILineStyle::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(764)) enum gviDashStyle ILineStyle::GetPattern ( );
__declspec(implementation_key(765)) void ILineStyle::PutPattern ( enum gviDashStyle pVal );
__declspec(implementation_key(766)) double ILineStyle::GetWidth ( );
__declspec(implementation_key(767)) void ILineStyle::PutWidth ( double pVal );
__declspec(implementation_key(768)) long ITerrainRegularPolygon::GetNumberOfSegments ( );
__declspec(implementation_key(769)) void ITerrainRegularPolygon::PutNumberOfSegments ( long pVal );
__declspec(implementation_key(770)) double ITerrainRegularPolygon::GetRadius ( );
__declspec(implementation_key(771)) void ITerrainRegularPolygon::PutRadius ( double pVal );
__declspec(implementation_key(772)) IFillStylePtr ITerrainRegularPolygon::GetFillStyle ( );
__declspec(implementation_key(773)) void ITerrainRegularPolygon::PutFillStyle ( struct IFillStyle * pVal );
__declspec(implementation_key(774)) ILineStylePtr ITerrainRegularPolygon::GetLineStyle ( );
__declspec(implementation_key(775)) void ITerrainRegularPolygon::PutLineStyle ( struct ILineStyle * pVal );
__declspec(implementation_key(776)) IPositionPtr ITerrainRegularPolygon::GetPosition ( );
__declspec(implementation_key(777)) void ITerrainRegularPolygon::PutPosition ( struct IPosition * pVal );
__declspec(implementation_key(778)) IGeometryCollectionPtr ITerrainRegularPolygon::GetFdeGeometry ( );
__declspec(implementation_key(779)) double ITerrain3DRegBase::GetHeight ( );
__declspec(implementation_key(780)) void ITerrain3DRegBase::PutHeight ( double pVal );
__declspec(implementation_key(781)) double ITerrainArrow::GetHeadX ( );
__declspec(implementation_key(782)) void ITerrainArrow::PutHeadX ( double pVal );
__declspec(implementation_key(783)) double ITerrainArrow::GetHeadY ( );
__declspec(implementation_key(784)) void ITerrainArrow::PutHeadY ( double pVal );
__declspec(implementation_key(785)) double ITerrainArrow::GetTailX ( );
__declspec(implementation_key(786)) void ITerrainArrow::PutTailX ( double pVal );
__declspec(implementation_key(787)) double ITerrainArrow::GetTailY ( );
__declspec(implementation_key(788)) void ITerrainArrow::PutTailY ( double pVal );
__declspec(implementation_key(789)) IFillStylePtr ITerrainArrow::GetFillStyle ( );
__declspec(implementation_key(790)) void ITerrainArrow::PutFillStyle ( struct IFillStyle * pVal );
__declspec(implementation_key(791)) ILineStylePtr ITerrainArrow::GetLineStyle ( );
__declspec(implementation_key(792)) void ITerrainArrow::PutLineStyle ( struct ILineStyle * pVal );
__declspec(implementation_key(793)) IPositionPtr ITerrainArrow::GetPosition ( );
__declspec(implementation_key(794)) void ITerrainArrow::PutPosition ( struct IPosition * pVal );
__declspec(implementation_key(795)) unsigned char ITerrainArrow::GetStyle ( );
__declspec(implementation_key(796)) void ITerrainArrow::PutStyle ( unsigned char pVal );
__declspec(implementation_key(797)) IGeometryCollectionPtr ITerrainArrow::GetFdeGeometry ( );
__declspec(implementation_key(798)) double ITerrain3DArrow::GetHeight ( );
__declspec(implementation_key(799)) void ITerrain3DArrow::PutHeight ( double pVal );
__declspec(implementation_key(800)) double ITerrainRectangle::GetWidth ( );
__declspec(implementation_key(801)) void ITerrainRectangle::PutWidth ( double pVal );
__declspec(implementation_key(802)) double ITerrainRectangle::GetDepth ( );
__declspec(implementation_key(803)) void ITerrainRectangle::PutDepth ( double pVal );
__declspec(implementation_key(804)) double ITerrainRectangle::GetLeft ( );
__declspec(implementation_key(805)) void ITerrainRectangle::PutLeft ( double pVal );
__declspec(implementation_key(806)) double ITerrainRectangle::GetTop ( );
__declspec(implementation_key(807)) void ITerrainRectangle::PutTop ( double pVal );
__declspec(implementation_key(808)) double ITerrainRectangle::GetRight ( );
__declspec(implementation_key(809)) void ITerrainRectangle::PutRight ( double pVal );
__declspec(implementation_key(810)) double ITerrainRectangle::GetBottom ( );
__declspec(implementation_key(811)) void ITerrainRectangle::PutBottom ( double pVal );
__declspec(implementation_key(812)) IFillStylePtr ITerrainRectangle::GetFillStyle ( );
__declspec(implementation_key(813)) void ITerrainRectangle::PutFillStyle ( struct IFillStyle * pVal );
__declspec(implementation_key(814)) ILineStylePtr ITerrainRectangle::GetLineStyle ( );
__declspec(implementation_key(815)) void ITerrainRectangle::PutLineStyle ( struct ILineStyle * pVal );
__declspec(implementation_key(816)) IPositionPtr ITerrainRectangle::GetPosition ( );
__declspec(implementation_key(817)) void ITerrainRectangle::PutPosition ( struct IPosition * pVal );
__declspec(implementation_key(818)) IGeometryCollectionPtr ITerrainRectangle::GetFdeGeometry ( );
__declspec(implementation_key(819)) double ITerrain3DRectBase::GetHeight ( );
__declspec(implementation_key(820)) void ITerrain3DRectBase::PutHeight ( double pVal );
__declspec(implementation_key(821)) IFillStylePtr ITerrainEllipse::GetFillStyle ( );
__declspec(implementation_key(822)) void ITerrainEllipse::PutFillStyle ( struct IFillStyle * pVal );
__declspec(implementation_key(823)) ILineStylePtr ITerrainEllipse::GetLineStyle ( );
__declspec(implementation_key(824)) void ITerrainEllipse::PutLineStyle ( struct ILineStyle * pVal );
__declspec(implementation_key(825)) IPositionPtr ITerrainEllipse::GetPosition ( );
__declspec(implementation_key(826)) void ITerrainEllipse::PutPosition ( struct IPosition * pVal );
__declspec(implementation_key(827)) long ITerrainEllipse::GetNumberOfSegments ( );
__declspec(implementation_key(828)) void ITerrainEllipse::PutNumberOfSegments ( long pVal );
__declspec(implementation_key(829)) double ITerrainEllipse::GetRadius ( );
__declspec(implementation_key(830)) void ITerrainEllipse::PutRadius ( double pVal );
__declspec(implementation_key(831)) double ITerrainEllipse::GetRadius2 ( );
__declspec(implementation_key(832)) void ITerrainEllipse::PutRadius2 ( double pVal );
__declspec(implementation_key(833)) IGeometryCollectionPtr ITerrainEllipse::GetFdeGeometry ( );
__declspec(implementation_key(834)) double ITerrainArc::GetStartAngle ( );
__declspec(implementation_key(835)) void ITerrainArc::PutStartAngle ( double pVal );
__declspec(implementation_key(836)) double ITerrainArc::GetEndAngle ( );
__declspec(implementation_key(837)) void ITerrainArc::PutEndAngle ( double pVal );
__declspec(implementation_key(838)) IFillStylePtr ITerrainSphere::GetFillStyle ( );
__declspec(implementation_key(839)) void ITerrainSphere::PutFillStyle ( struct IFillStyle * pVal );
__declspec(implementation_key(840)) ILineStylePtr ITerrainSphere::GetLineStyle ( );
__declspec(implementation_key(841)) void ITerrainSphere::PutLineStyle ( struct ILineStyle * pVal );
__declspec(implementation_key(842)) IPositionPtr ITerrainSphere::GetPosition ( );
__declspec(implementation_key(843)) void ITerrainSphere::PutPosition ( struct IPosition * pVal );
__declspec(implementation_key(844)) double ITerrainSphere::GetRadius ( );
__declspec(implementation_key(845)) void ITerrainSphere::PutRadius ( double pVal );
__declspec(implementation_key(846)) long ITerrainSphere::GetSegmentDensity ( );
__declspec(implementation_key(847)) void ITerrainSphere::PutSegmentDensity ( long pVal );
__declspec(implementation_key(848)) long ITerrainSphere::GetStyle ( );
__declspec(implementation_key(849)) void ITerrainSphere::PutStyle ( long pVal );
__declspec(implementation_key(850)) IPositionPtr ITerrainLocation::GetPosition ( );
__declspec(implementation_key(851)) void ITerrainLocation::PutPosition ( struct IPosition * pVal );
__declspec(implementation_key(852)) _bstr_t ITerrainLocation::GetSlideImageName ( );
__declspec(implementation_key(853)) void ITerrainLocation::PutSlideImageName ( _bstr_t pVal );
__declspec(implementation_key(854)) enum gviLineToGroundType ILabelStyle::GetLineToGround ( );
__declspec(implementation_key(855)) void ILabelStyle::PutLineToGround ( enum gviLineToGroundType pVal );
__declspec(implementation_key(856)) double ILabelStyle::GetLineLength ( );
__declspec(implementation_key(857)) void ILabelStyle::PutLineLength ( double pVal );
__declspec(implementation_key(858)) OLE_COLOR ILabelStyle::GetLineColor ( );
__declspec(implementation_key(859)) void ILabelStyle::PutLineColor ( OLE_COLOR pVal );
__declspec(implementation_key(860)) OLE_COLOR ILabelStyle::GetTextColor ( );
__declspec(implementation_key(861)) void ILabelStyle::PutTextColor ( OLE_COLOR pVal );
__declspec(implementation_key(862)) long ILabelStyle::GetFontSize ( );
__declspec(implementation_key(863)) void ILabelStyle::PutFontSize ( long pVal );
__declspec(implementation_key(864)) _bstr_t ILabelStyle::GetFontName ( );
__declspec(implementation_key(865)) void ILabelStyle::PutFontName ( _bstr_t pVal );
__declspec(implementation_key(866)) VARIANT_BOOL ILabelStyle::GetBold ( );
__declspec(implementation_key(867)) void ILabelStyle::PutBold ( VARIANT_BOOL pVal );
__declspec(implementation_key(868)) VARIANT_BOOL ILabelStyle::GetUnderline ( );
__declspec(implementation_key(869)) void ILabelStyle::PutUnderline ( VARIANT_BOOL pVal );
__declspec(implementation_key(870)) VARIANT_BOOL ILabelStyle::GetItalic ( );
__declspec(implementation_key(871)) void ILabelStyle::PutItalic ( VARIANT_BOOL pVal );
__declspec(implementation_key(872)) enum gviMultilineJustification ILabelStyle::GetMultilineJustification ( );
__declspec(implementation_key(873)) void ILabelStyle::PutMultilineJustification ( enum gviMultilineJustification pVal );
__declspec(implementation_key(874)) VARIANT_BOOL ILabelStyle::GetTextOnImage ( );
__declspec(implementation_key(875)) void ILabelStyle::PutTextOnImage ( VARIANT_BOOL pVal );
__declspec(implementation_key(876)) _bstr_t ILabelStyle::GetTextAlignment ( );
__declspec(implementation_key(877)) void ILabelStyle::PutTextAlignment ( _bstr_t pVal );
__declspec(implementation_key(878)) enum gviShowTextOptions ILabelStyle::GetShowTextBehavior ( );
__declspec(implementation_key(879)) void ILabelStyle::PutShowTextBehavior ( enum gviShowTextOptions pVal );
__declspec(implementation_key(880)) OLE_COLOR ILabelStyle::GetIconColor ( );
__declspec(implementation_key(881)) void ILabelStyle::PutIconColor ( OLE_COLOR pVal );
__declspec(implementation_key(882)) OLE_COLOR ILabelStyle::GetBackgroundColor ( );
__declspec(implementation_key(883)) void ILabelStyle::PutBackgroundColor ( OLE_COLOR pVal );
__declspec(implementation_key(884)) long ILabelStyle::GetMaxImageSize ( );
__declspec(implementation_key(885)) void ILabelStyle::PutMaxImageSize ( long pVal );
__declspec(implementation_key(886)) _bstr_t ILabelStyle::GetFrameFileName ( );
__declspec(implementation_key(887)) void ILabelStyle::PutFrameFileName ( _bstr_t pVal );
__declspec(implementation_key(888)) enum gviLockMode ILabelStyle::GetLockMode ( );
__declspec(implementation_key(889)) void ILabelStyle::PutLockMode ( enum gviLockMode pVal );
__declspec(implementation_key(890)) double ILabelStyle::GetScale ( );
__declspec(implementation_key(891)) void ILabelStyle::PutScale ( double pVal );
__declspec(implementation_key(892)) VARIANT_BOOL ILabelStyle::GetLimitScreenSize ( );
__declspec(implementation_key(893)) void ILabelStyle::PutLimitScreenSize ( VARIANT_BOOL pVal );
__declspec(implementation_key(894)) double ILabelStyle::GetMinViewingHeight ( );
__declspec(implementation_key(895)) void ILabelStyle::PutMinViewingHeight ( double pVal );
__declspec(implementation_key(896)) double ILabelStyle::GetMaxViewingHeight ( );
__declspec(implementation_key(897)) void ILabelStyle::PutMaxViewingHeight ( double pVal );
__declspec(implementation_key(898)) enum gviPivotAlignment ILabelStyle::GetPivotAlignment ( );
__declspec(implementation_key(899)) void ILabelStyle::PutPivotAlignment ( enum gviPivotAlignment pVal );
__declspec(implementation_key(900)) ILabelStylePtr ITerrainImageLabel::GetStyle ( );
__declspec(implementation_key(901)) void ITerrainImageLabel::PutStyle ( struct ILabelStyle * pVal );
__declspec(implementation_key(902)) IPositionPtr ITerrainImageLabel::GetPosition ( );
__declspec(implementation_key(903)) void ITerrainImageLabel::PutPosition ( struct IPosition * pVal );
__declspec(implementation_key(904)) _bstr_t ITerrainImageLabel::GetImageFileName ( );
__declspec(implementation_key(905)) void ITerrainImageLabel::PutImageFileName ( _bstr_t pVal );
__declspec(implementation_key(906)) _bstr_t IPresentationStep::GetCaptionText ( );
__declspec(implementation_key(907)) void IPresentationStep::PutCaptionText ( _bstr_t pVal );
__declspec(implementation_key(908)) long IPresentationStep::GetCaptionTimeout ( );
__declspec(implementation_key(909)) void IPresentationStep::PutCaptionTimeout ( long pVal );
__declspec(implementation_key(910)) enum gviPresentationStepContinue IPresentationStep::GetContinue ( );
__declspec(implementation_key(911)) void IPresentationStep::PutContinue ( enum gviPresentationStepContinue pVal );
__declspec(implementation_key(912)) _bstr_t IPresentationStep::GetDescription ( );
__declspec(implementation_key(913)) void IPresentationStep::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(914)) enum gviPresentationStepFlightSpeed IPresentationStep::GetFlightSpeedFactor ( );
__declspec(implementation_key(915)) void IPresentationStep::PutFlightSpeedFactor ( enum gviPresentationStepFlightSpeed pVal );
__declspec(implementation_key(916)) GUID IPresentationStep::GetId ( );
__declspec(implementation_key(917)) long IPresentationStep::GetIndex ( );
__declspec(implementation_key(918)) void IPresentationStep::PutIndex ( long pVal );
__declspec(implementation_key(919)) VARIANT_BOOL IPresentationStep::GetKeyStep ( );
__declspec(implementation_key(920)) void IPresentationStep::PutKeyStep ( VARIANT_BOOL pVal );
__declspec(implementation_key(921)) double IPresentationStep::GetLocationSplineSpeed ( );
__declspec(implementation_key(922)) void IPresentationStep::PutLocationSplineSpeed ( double pVal );
__declspec(implementation_key(923)) enum gviPresentationSplineSpeedBehavior IPresentationStep::GetLocationSplineSpeedBehavior ( );
__declspec(implementation_key(924)) void IPresentationStep::PutLocationSplineSpeedBehavior ( enum gviPresentationSplineSpeedBehavior pVal );
__declspec(implementation_key(925)) enum gviPresentationStepType IPresentationStep::GetType ( );
__declspec(implementation_key(926)) void IPresentationStep::PutType ( enum gviPresentationStepType pVal );
__declspec(implementation_key(927)) long IPresentationStep::GetWaitTime ( );
__declspec(implementation_key(928)) void IPresentationStep::PutWaitTime ( long pVal );
__declspec(implementation_key(929)) VARIANT_BOOL IPresentationStep::GetShowHideValue ( );
__declspec(implementation_key(930)) void IPresentationStep::PutShowHideValue ( VARIANT_BOOL pVal );
__declspec(implementation_key(931)) VARIANT_BOOL IPresentationStep::ContainsOperation ( _bstr_t OperationName );
__declspec(implementation_key(932)) _bstr_t IPresentationStep::GetOperationValue ( _bstr_t OperationName );
__declspec(implementation_key(933)) long IPresentationSteps::GetCount ( );
__declspec(implementation_key(934)) long IPresentationSteps::GetCurrent ( );
__declspec(implementation_key(935)) IPresentationStepPtr IPresentationSteps::GetStep ( long Index );
__declspec(implementation_key(936)) long IPresentation::GetCaptionHeight ( );
__declspec(implementation_key(937)) void IPresentation::PutCaptionHeight ( long pVal );
__declspec(implementation_key(938)) enum gviPresentationCaptionPosition IPresentation::GetCaptionPosition ( );
__declspec(implementation_key(939)) void IPresentation::PutCaptionPosition ( enum gviPresentationCaptionPosition pVal );
__declspec(implementation_key(940)) enum gviPresentationCaptionSizeType IPresentation::GetCaptionSizeType ( );
__declspec(implementation_key(941)) void IPresentation::PutCaptionSizeType ( enum gviPresentationCaptionSizeType pVal );
__declspec(implementation_key(942)) long IPresentation::GetCaptionWidth ( );
__declspec(implementation_key(943)) void IPresentation::PutCaptionWidth ( long pVal );
__declspec(implementation_key(944)) VARIANT_BOOL IPresentation::GetLoopRoute ( );
__declspec(implementation_key(945)) void IPresentation::PutLoopRoute ( VARIANT_BOOL pVal );
__declspec(implementation_key(946)) enum gviPresentationPlayAlgorithm IPresentation::GetPlayAlgorithm ( );
__declspec(implementation_key(947)) void IPresentation::PutPlayAlgorithm ( enum gviPresentationPlayAlgorithm pVal );
__declspec(implementation_key(948)) enum gviPresentationPlayMode IPresentation::GetPlayMode ( );
__declspec(implementation_key(949)) void IPresentation::PutPlayMode ( enum gviPresentationPlayMode pVal );
__declspec(implementation_key(950)) enum gviPresentationPlaySpeed IPresentation::GetPlaySpeedFactor ( );
__declspec(implementation_key(951)) void IPresentation::PutPlaySpeedFactor ( enum gviPresentationPlaySpeed pVal );
__declspec(implementation_key(952)) enum gviPresentationStatus IPresentation::GetPresentationStatus ( );
__declspec(implementation_key(953)) IPresentationStepsPtr IPresentation::GetSteps ( );
__declspec(implementation_key(954)) HRESULT IPresentation::Continue ( );
__declspec(implementation_key(955)) IPresentationStepPtr IPresentation::CreateCaptionStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, _bstr_t CaptionText, long CaptionTimeout, long InsertIndex );
__declspec(implementation_key(956)) IPresentationStepPtr IPresentation::CreateClearCaptionStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, long InsertIndex );
__declspec(implementation_key(957)) IPresentationStepPtr IPresentation::CreateFlightSpeedFactorStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, enum gviPresentationStepFlightSpeed FlightSpeedFactor, long InsertIndex );
__declspec(implementation_key(958)) IPresentationStepPtr IPresentation::CreateFollowDynamicObjectStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, GUID ObjectId, long InsertIndex );
__declspec(implementation_key(959)) IPresentationStepPtr IPresentation::CreateLocationStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, struct IPosition * Position, long InsertIndex );
__declspec(implementation_key(960)) IPresentationStepPtr IPresentation::CreateRestartDynamicObjectStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, GUID ObjectId, long InsertIndex );
__declspec(implementation_key(961)) IPresentationStepPtr IPresentation::CreateShowGroupStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, GUID GroupId, VARIANT_BOOL Show, long InsertIndex );
__declspec(implementation_key(962)) IPresentationStepPtr IPresentation::CreateShowObjectStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, GUID ObjectId, VARIANT_BOOL Show, long InsertIndex );
__declspec(implementation_key(963)) IPresentationStepPtr IPresentation::CreateShowUndergroundModeStep ( enum gviPresentationStepContinue AdvancedType, long WaitTime, _bstr_t Description, VARIANT_BOOL Show, long InsertIndex );
__declspec(implementation_key(964)) HRESULT IPresentation::DeleteStep ( long Index );
__declspec(implementation_key(965)) HRESULT IPresentation::MoveStepTo ( long FromIndex, long ToIndex );
__declspec(implementation_key(966)) HRESULT IPresentation::NextStep ( );
__declspec(implementation_key(967)) HRESULT IPresentation::Pause ( );
__declspec(implementation_key(968)) HRESULT IPresentation::Play ( long StartIndex );
__declspec(implementation_key(969)) HRESULT IPresentation::PlayStep ( long Index );
__declspec(implementation_key(970)) HRESULT IPresentation::PreviousStep ( );
__declspec(implementation_key(971)) HRESULT IPresentation::ResetPresentation ( );
__declspec(implementation_key(972)) HRESULT IPresentation::Resume ( );
__declspec(implementation_key(973)) HRESULT IPresentation::StartRecord ( );
__declspec(implementation_key(974)) HRESULT IPresentation::Stop ( );
__declspec(implementation_key(975)) HRESULT IPresentation::StopRecord ( );
__declspec(implementation_key(976)) HRESULT IPresentation::ShowEditor ( );
__declspec(implementation_key(977)) _bstr_t IPresentation::GetSlideImageName ( );
__declspec(implementation_key(978)) void IPresentation::PutSlideImageName ( _bstr_t pVal );
__declspec(implementation_key(979)) VARIANT_BOOL IPresentation::CreateMovie ( _bstr_t Name, long Width, long Height, double FPS );
__declspec(implementation_key(980)) HRESULT IPresentation::CancelExport ( );
__declspec(implementation_key(981)) HRESULT IComplexParticleEffect::Play ( );
__declspec(implementation_key(982)) HRESULT IComplexParticleEffect::Stop ( );
__declspec(implementation_key(983)) IPointPtr IComplexParticleEffect::GetPosition ( );
__declspec(implementation_key(984)) void IComplexParticleEffect::PutPosition ( struct IPoint * pVal );
__declspec(implementation_key(985)) IEulerAnglePtr IComplexParticleEffect::GetRotateAngle ( );
__declspec(implementation_key(986)) void IComplexParticleEffect::PutRotateAngle ( struct IEulerAngle * pVal );
__declspec(implementation_key(987)) double IComplexParticleEffect::GetScalingFactor ( );
__declspec(implementation_key(988)) void IComplexParticleEffect::PutScalingFactor ( double pVal );
__declspec(implementation_key(989)) double IComplexParticleEffect::GetEmissionRate ( );
__declspec(implementation_key(990)) void IComplexParticleEffect::PutEmissionRate ( double pVal );
__declspec(implementation_key(991)) double IComplexParticleEffect::GetWindDirection ( );
__declspec(implementation_key(992)) void IComplexParticleEffect::PutWindDirection ( double pVal );
__declspec(implementation_key(993)) double IComplexParticleEffect::GetWindAcceleration ( );
__declspec(implementation_key(994)) void IComplexParticleEffect::PutWindAcceleration ( double pVal );
__declspec(implementation_key(995)) enum gviComplexParticleEffectType IComplexParticleEffect::GetComplexParticleEffectType ( );
__declspec(implementation_key(996)) VARIANT_BOOL IComplexParticleEffect::GetIsAlive ( );
__declspec(implementation_key(997)) double IComplexParticleEffect::GetDuration ( );
__declspec(implementation_key(998)) HRESULT IKmlGroup::SetVisibleMask ( enum gviViewportMask Mask );
__declspec(implementation_key(999)) double IHeatMap::GetAttenRadius ( );
__declspec(implementation_key(1000)) void IHeatMap::PutAttenRadius ( double pVal );
__declspec(implementation_key(1001)) double IHeatMap::GetMaxHeatValue ( );
__declspec(implementation_key(1002)) void IHeatMap::PutMaxHeatValue ( double pVal );
__declspec(implementation_key(1003)) double IHeatMap::GetMinHeatValue ( );
__declspec(implementation_key(1004)) void IHeatMap::PutMinHeatValue ( double pVal );
__declspec(implementation_key(1005)) HRESULT IOperation::Execute ( );
__declspec(implementation_key(1006)) HRESULT IOperation::Cancel ( );
__declspec(implementation_key(1007)) enum gviClipPlaneOperation IClipPlaneOperation::GetClipPlaneOperationType ( );
__declspec(implementation_key(1008)) HRESULT IClipPlaneOperation::SetSingleClip ( struct IVector3 * Position, struct IEulerAngle * Angle );
__declspec(implementation_key(1009)) HRESULT IClipPlaneOperation::GetSingleClip ( struct IVector3 * * Position, struct IEulerAngle * * Angle );
__declspec(implementation_key(1010)) HRESULT IClipPlaneOperation::SetBoxClip ( struct IVector3 * BoxCenter, struct IVector3 * BoxSize, struct IEulerAngle * Angle );
__declspec(implementation_key(1011)) HRESULT IClipPlaneOperation::GetBoxClip ( struct IVector3 * * BoxCenter, struct IVector3 * * BoxSize, struct IEulerAngle * * Angle );
__declspec(implementation_key(1012)) IFeatureLayerPtr IObjectManager::CreateFeatureLayer ( struct IFeatureClass * FeatureClass, _bstr_t GeoField, struct ITextRender * TextRender, struct IGeometryRender * GeoRender, GUID GroupId );
__declspec(implementation_key(1013)) IFeatureLayerPtr IObjectManager::GetFeatureLayer ( GUID FeatureLayerGuid );
__declspec(implementation_key(1014)) ITerrainRoutePtr IObjectManager::CreateTerrainRoute ( GUID GroupId );
__declspec(implementation_key(1015)) IRenderModelPointPtr IObjectManager::CreateRenderModelPoint ( struct IModelPoint * ModelPoint, struct IModelPointSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1016)) IRenderPolylinePtr IObjectManager::CreateRenderPolyline ( struct IPolyline * Polyline, struct ICurveSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1017)) IRenderPolygonPtr IObjectManager::CreateRenderPolygon ( struct IPolygon * Polygon, struct ISurfaceSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1018)) IRenderTriMeshPtr IObjectManager::CreateRenderTriMesh ( struct ITriMesh * TriMesh, struct ISurfaceSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1019)) IRenderMultiTriMeshPtr IObjectManager::CreateRenderMultiTriMesh ( struct IMultiTriMesh * MultiTriMesh, struct ISurfaceSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1020)) IRenderMultiPointPtr IObjectManager::CreateRenderMultiPoint ( struct IMultiPoint * MultiPoint, struct IPointSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1021)) ICameraTourPtr IObjectManager::CreateCameraTour ( GUID GroupId );
__declspec(implementation_key(1022)) IRenderPointPtr IObjectManager::CreateRenderPoint ( struct IPoint * Point, struct IPointSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1023)) IMotionPathPtr IObjectManager::CreateMotionPath ( GUID GroupId );
__declspec(implementation_key(1024)) IParticleEffectPtr IObjectManager::CreateParticleEffect ( GUID GroupId );
__declspec(implementation_key(1025)) ILabelPtr IObjectManager::CreateLabel ( GUID GroupId );
__declspec(implementation_key(1026)) IParticleEffectPtr IObjectManager::CreateParticleEffectFromFDB ( struct IFeatureDataSet * FeatureDataSet, GUID GroupId );
__declspec(implementation_key(1027)) ITableLabelPtr IObjectManager::CreateTableLabel ( long RowCount, long ColumnCount, GUID GroupId );
__declspec(implementation_key(1028)) ISkinnedMeshPtr IObjectManager::CreateSkinnedMesh ( struct IModelPoint * ModelPoint, GUID GroupId );
__declspec(implementation_key(1029)) IRenderMultiPolylinePtr IObjectManager::CreateRenderMultiPolyline ( struct IMultiPolyline * MultiPolyline, struct ICurveSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1030)) IRenderMultiPolygonPtr IObjectManager::CreateRenderMultiPolygon ( struct IMultiPolygon * MultiPolygon, struct ISurfaceSymbol * Symbol, GUID GroupId );
__declspec(implementation_key(1031)) IRObjectPtr IObjectManager::GetObjectById ( GUID Id );
__declspec(implementation_key(1032)) VARIANT_BOOL IObjectManager::DeleteObject ( GUID Id );
__declspec(implementation_key(1033)) ISkyBoxPtr IObjectManager::GetSkyBox ( long ViewIndex );
__declspec(implementation_key(1034)) IReferencePlanePtr IObjectManager::GetReferencePlane ( );
__declspec(implementation_key(1035)) IProjectTreePtr IObjectManager::GetProjectTree ( );
__declspec(implementation_key(1036)) _bstr_t IObjectManager::OpenRasterSourceDialog ( enum gviRasterSourceType DataSourceType );
__declspec(implementation_key(1037)) IImageryLayerPtr IObjectManager::CreateImageryLayer ( _bstr_t ConnectionString, GUID GroupId );
__declspec(implementation_key(1038)) VARIANT_BOOL IObjectManager::DelayDelete ( GUID Id, long DelayTime );
__declspec(implementation_key(1039)) ITerrainHolePtr IObjectManager::CreateTerrainHole ( struct IPolygon * Polygon, GUID GroupId );
__declspec(implementation_key(1040)) I3DTileHolePtr IObjectManager::Create3DTileHole ( struct IPolygon * Polygon, GUID GroupId );
__declspec(implementation_key(1041)) I3DTileLayerPtr IObjectManager::Create3DTileLayer ( _bstr_t LayerInfo, _bstr_t Password, GUID GroupId );
__declspec(implementation_key(1042)) IOverlayLabelPtr IObjectManager::CreateOverlayLabel ( GUID GroupId );
__declspec(implementation_key(1043)) ITerrainVideoPtr IObjectManager::CreateTerrainVideo ( struct IPoint * Position, GUID GroupId );
__declspec(implementation_key(1044)) IViewshedPtr IObjectManager::CreateViewshed ( struct IPoint * Position, GUID GroupId );
__declspec(implementation_key(1045)) IRenderArrowPtr IObjectManager::CreateRenderArrow ( GUID GroupId );
__declspec(implementation_key(1046)) HRESULT IObjectManager::AddModel ( _bstr_t ModelName, struct IModel * newVal );
__declspec(implementation_key(1047)) HRESULT IObjectManager::DeleteModel ( _bstr_t ModelName );
__declspec(implementation_key(1048)) HRESULT IObjectManager::AddImage ( _bstr_t ImageName, struct IImage * newVal );
__declspec(implementation_key(1049)) HRESULT IObjectManager::DeleteImage ( _bstr_t ImageName );
__declspec(implementation_key(1050)) IDynamicObjectPtr IObjectManager::CreateDynamicObject ( GUID GroupId );
__declspec(implementation_key(1051)) ITerrainModifierPtr IObjectManager::CreateTerrainModifier ( struct IPolygon * Polygon, GUID GroupId );
__declspec(implementation_key(1052)) IRenderPOIPtr IObjectManager::CreateRenderPOI ( struct IPOI * POI );
__declspec(implementation_key(1053)) IRenderPOIPtr IObjectManager::CreateRenderPOIFromFDB ( struct IPOI * POI, struct IFeatureDataSet * FeatureDataSet );
__declspec(implementation_key(1054)) IWalkGroundPtr IObjectManager::CreateWalkGround ( struct IModelPoint * ModelPoint );
__declspec(implementation_key(1055)) IWalkGroundPtr IObjectManager::CreateWalkGroundFromFDB ( struct IFeatureClass * FeatureClass, _bstr_t GeoField );
__declspec(implementation_key(1056)) IGeometryRenderPtr IObjectManager::CreateGeometryRenderFromXML ( _bstr_t XmlStringValue );
__declspec(implementation_key(1057)) ITextRenderPtr IObjectManager::CreateTextRenderFromXML ( _bstr_t XmlStringValue );
__declspec(implementation_key(1058)) IGeometrySymbolPtr IObjectManager::CreateGeometrySymbolFromXML ( _bstr_t XmlStringValue );
__declspec(implementation_key(1059)) ITextSymbolPtr IObjectManager::CreateTextSymbolFromXML ( _bstr_t XmlStringValue );
__declspec(implementation_key(1060)) ITerrainRegularPolygonPtr IObjectManager::CreateCircle ( struct IPosition * Position, double Radius, OLE_COLOR LineColor, OLE_COLOR FillColor, GUID GroupId );
__declspec(implementation_key(1061)) ITerrainRegularPolygonPtr IObjectManager::CreateRegularPolygon ( struct IPosition * Position, double Radius, long NumOfSegments, OLE_COLOR LineColor, OLE_COLOR FillColor, GUID GroupId );
__declspec(implementation_key(1062)) ITerrain3DRegBasePtr IObjectManager::CreateCylinder ( struct IPosition * Position, double Radius, double ObjectHeight, OLE_COLOR LineColor, OLE_COLOR FillColor, long NumOfSegments, GUID GroupId );
__declspec(implementation_key(1063)) ITerrain3DRegBasePtr IObjectManager::CreateCone ( struct IPosition * Position, double Radius, double ObjectHeight, OLE_COLOR LineColor, OLE_COLOR FillColor, long NumOfSegments, GUID GroupId );
__declspec(implementation_key(1064)) ITerrainArrowPtr IObjectManager::CreateArrow ( struct IPosition * Position, double Length, long Style, OLE_COLOR LineColor, OLE_COLOR FillColor, GUID GroupId );
__declspec(implementation_key(1065)) ITerrain3DArrowPtr IObjectManager::Create3DArrow ( struct IPosition * Position, double Length, long Style, double ObjectHeight, OLE_COLOR LineColor, OLE_COLOR FillColor, GUID GroupId );
__declspec(implementation_key(1066)) ITerrainRectanglePtr IObjectManager::CreateRectangle ( struct IPosition * Position, double ObjectWidth, double ObjectDepth, OLE_COLOR LineColor, OLE_COLOR FillColor, GUID GroupId );
__declspec(implementation_key(1067)) ITerrain3DRectBasePtr IObjectManager::CreateBox ( struct IPosition * Position, double ObjectWidth, double ObjectDepth, double ObjectHeight, OLE_COLOR LineColor, OLE_COLOR FillColor, GUID GroupId );
__declspec(implementation_key(1068)) ITerrain3DRectBasePtr IObjectManager::CreatePyramid ( struct IPosition * Position, double ObjectWidth, double ObjectDepth, double ObjectHeight, OLE_COLOR LineColor, OLE_COLOR FillColor, GUID GroupId );
__declspec(implementation_key(1069)) ITerrainEllipsePtr IObjectManager::CreateEllipse ( struct IPosition * Position, double RadiusX, double RadiusY, OLE_COLOR LineColor, OLE_COLOR FillColor, long NumOfSegments, GUID GroupId );
__declspec(implementation_key(1070)) ITerrainArcPtr IObjectManager::CreateArc ( struct IPosition * Position, double RadiusX, double RadiusY, double StartAngle, double EndAngle, OLE_COLOR LineColor, OLE_COLOR FillColor, long NumOfSegments, GUID GroupId );
__declspec(implementation_key(1071)) ITerrainSpherePtr IObjectManager::CreateSphere ( struct IPosition * Position, double Radius, long Style, OLE_COLOR LineColor, OLE_COLOR FillColor, long SegmentDensity, GUID GroupId );
__declspec(implementation_key(1072)) ITerrainLocationPtr IObjectManager::CreateLocation ( struct IPosition * Position, GUID GroupId );
__declspec(implementation_key(1073)) ITerrainImageLabelPtr IObjectManager::CreateImageLabel ( struct IPosition * Position, _bstr_t ImageFileName, struct ILabelStyle * Style, GUID GroupId );
__declspec(implementation_key(1074)) IPresentationPtr IObjectManager::CreatePresentation ( GUID GroupId );
__declspec(implementation_key(1075)) IComplexParticleEffectPtr IObjectManager::CreateComplexParticleEffect ( enum gviComplexParticleEffectType Type, GUID GroupId );
__declspec(implementation_key(1076)) IKmlGroupPtr IObjectManager::CreateKmlGroup ( _bstr_t File );
__declspec(implementation_key(1077)) IHeatMapPtr IObjectManager::CreateHeatMap ( struct IFeatureClass * FeatureClass, _bstr_t GeoFieldName, _bstr_t HeatValueFieldName, GUID GroupId );
__declspec(implementation_key(1078)) IClipPlaneOperationPtr IObjectManager::CreateClipPlaneOperation ( GUID GroupId );
__declspec(implementation_key(1079)) VARIANT_BOOL ICacheManager::GetFileCacheEnabled ( );
__declspec(implementation_key(1080)) void ICacheManager::PutFileCacheEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1081)) _bstr_t ICacheManager::GetFileCachePath ( );
__declspec(implementation_key(1082)) void ICacheManager::PutFileCachePath ( _bstr_t pVal );
__declspec(implementation_key(1083)) long ICacheManager::GetFileCacheSize ( );
__declspec(implementation_key(1084)) void ICacheManager::PutFileCacheSize ( long pVal );
__declspec(implementation_key(1085)) VARIANT_BOOL ICacheManager::GetMemoryCacheEnabled ( );
__declspec(implementation_key(1086)) void ICacheManager::PutMemoryCacheEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1087)) long ICacheManager::GetMemoryCacheSize ( );
__declspec(implementation_key(1088)) void ICacheManager::PutMemoryCacheSize ( long pVal );
__declspec(implementation_key(1089)) _bstr_t ICacheManager::GetTileCacheFileName ( _bstr_t LayerInfo );
__declspec(implementation_key(1090)) _bstr_t IRenderRule::GetLookUpField ( );
__declspec(implementation_key(1091)) void IRenderRule::PutLookUpField ( _bstr_t pVal );
__declspec(implementation_key(1092)) VARIANT_BOOL IRenderRule::GetOtherwise ( );
__declspec(implementation_key(1093)) void IRenderRule::PutOtherwise ( VARIANT_BOOL pVal );
__declspec(implementation_key(1094)) enum gviRenderRuleType IRenderRule::GetRuleType ( );
__declspec(implementation_key(1095)) HRESULT ITextRenderScheme::AddRule ( struct IRenderRule * Rule );
__declspec(implementation_key(1096)) HRESULT ITextRenderScheme::ClearRules ( );
__declspec(implementation_key(1097)) ITextSymbolPtr ITextRenderScheme::GetSymbol ( );
__declspec(implementation_key(1098)) void ITextRenderScheme::PutSymbol ( struct ITextSymbol * pVal );
__declspec(implementation_key(1099)) IRenderRulePtr ITextRenderScheme::GetRule ( long Index );
__declspec(implementation_key(1100)) long ITextRenderScheme::GetRuleCount ( );
__declspec(implementation_key(1101)) HRESULT IGeometryRenderScheme::AddRule ( struct IRenderRule * Rule );
__declspec(implementation_key(1102)) HRESULT IGeometryRenderScheme::ClearRules ( );
__declspec(implementation_key(1103)) IGeometrySymbolPtr IGeometryRenderScheme::GetSymbol ( );
__declspec(implementation_key(1104)) void IGeometryRenderScheme::PutSymbol ( struct IGeometrySymbol * pVal );
__declspec(implementation_key(1105)) unsigned char IGeometryRenderScheme::GetVisibleMask ( );
__declspec(implementation_key(1106)) void IGeometryRenderScheme::PutVisibleMask ( unsigned char pVal );
__declspec(implementation_key(1107)) IRenderRulePtr IGeometryRenderScheme::GetRule ( long Index );
__declspec(implementation_key(1108)) long IGeometryRenderScheme::GetRuleCount ( );
__declspec(implementation_key(1109)) VARIANT_BOOL IObjectEditor::StartEditFeatureGeometry ( struct IRowBuffer * RowBuffer, struct IFeatureLayer * FeatureLayer, enum gviGeoEditType EditType );
__declspec(implementation_key(1110)) VARIANT_BOOL IObjectEditor::StartEditRenderGeometry ( struct IRenderGeometry * RenderGeometry, enum gviGeoEditType EditType );
__declspec(implementation_key(1111)) HRESULT IObjectEditor::FinishEdit ( );
__declspec(implementation_key(1112)) HRESULT IObjectEditor::CancelEdit ( );
__declspec(implementation_key(1113)) VARIANT_BOOL IObjectEditor::GetIsEditing ( );
__declspec(implementation_key(1114)) HRESULT IObjectEditor::Move ( struct IVector3 * Move );
__declspec(implementation_key(1115)) HRESULT IObjectEditor::Rotate ( struct IVector3 * Axis, struct IVector3 * Center, double Angle );
__declspec(implementation_key(1116)) HRESULT IObjectEditor::Scale ( struct IVector3 * Scale, struct IVector3 * Center );
__declspec(implementation_key(1117)) VARIANT_BOOL IObjectEditor::AddMovingFeatures ( struct IFeatureLayer * Layer, struct IRowBufferCollection * RowBuffers );
__declspec(implementation_key(1118)) VARIANT_BOOL IObjectEditor::StartMoveFeatures ( _bstr_t CRS );
__declspec(implementation_key(1119)) VARIANT_BOOL IViewport::GetLogoVisible ( );
__declspec(implementation_key(1120)) void IViewport::PutLogoVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1121)) VARIANT_BOOL IViewport::GetCameraInfoVisible ( );
__declspec(implementation_key(1122)) void IViewport::PutCameraInfoVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1123)) enum gviViewportMode IViewport::GetViewportMode ( );
__declspec(implementation_key(1124)) void IViewport::PutViewportMode ( enum gviViewportMode pVal );
__declspec(implementation_key(1125)) long IViewport::GetActiveView ( );
__declspec(implementation_key(1126)) void IViewport::PutActiveView ( long pVal );
__declspec(implementation_key(1127)) enum gviViewportMask IViewport::GetCameraViewBindMask ( );
__declspec(implementation_key(1128)) void IViewport::PutCameraViewBindMask ( enum gviViewportMask pVal );
__declspec(implementation_key(1129)) enum gviViewportMask IViewport::GetCompassVisibleMask ( );
__declspec(implementation_key(1130)) void IViewport::PutCompassVisibleMask ( enum gviViewportMask pVal );
__declspec(implementation_key(1131)) double IViewport::GetSplitRatioH ( );
__declspec(implementation_key(1132)) void IViewport::PutSplitRatioH ( double pVal );
__declspec(implementation_key(1133)) double IViewport::GetSplitRatioV ( );
__declspec(implementation_key(1134)) void IViewport::PutSplitRatioV ( double pVal );
__declspec(implementation_key(1135)) VARIANT_BOOL IViewport::GetShowBorderLine ( );
__declspec(implementation_key(1136)) void IViewport::PutShowBorderLine ( VARIANT_BOOL pVal );
__declspec(implementation_key(1137)) HRESULT IVisualAnalysis::StartShadowAnalyse ( );
__declspec(implementation_key(1138)) HRESULT IVisualAnalysis::StartViewshedAnalyse ( struct IPoint * Start, struct IPoint * End, double HorizontalAngle );
__declspec(implementation_key(1139)) HRESULT IVisualAnalysis::StopAnalyse ( );
__declspec(implementation_key(1140)) HRESULT IVisualAnalysis::AddOccluder ( struct IFeatureLayer * FL, struct IGeometry * Geo );
__declspec(implementation_key(1141)) HRESULT IVisualAnalysis::ClearOccluders ( );
__declspec(implementation_key(1142)) HRESULT IHighlightHelper::SetCircleRegion ( struct IPoint * Center, double Radius );
__declspec(implementation_key(1143)) HRESULT IHighlightHelper::SetSectorRegion ( struct IPoint * Start, struct IPoint * End, double HorizontalAngle );
__declspec(implementation_key(1144)) IGeometryPtr IHighlightHelper::GetRegion ( );
__declspec(implementation_key(1145)) unsigned char IHighlightHelper::GetVisibleMask ( );
__declspec(implementation_key(1146)) void IHighlightHelper::PutVisibleMask ( unsigned char pVal );
__declspec(implementation_key(1147)) double IHighlightHelper::GetMinZ ( );
__declspec(implementation_key(1148)) void IHighlightHelper::PutMinZ ( double pVal );
__declspec(implementation_key(1149)) double IHighlightHelper::GetMaxZ ( );
__declspec(implementation_key(1150)) void IHighlightHelper::PutMaxZ ( double pVal );
__declspec(implementation_key(1151)) OLE_COLOR IHighlightHelper::GetColor ( );
__declspec(implementation_key(1152)) void IHighlightHelper::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(1153)) HRESULT IHighlightHelper::SetRegion ( struct IGeometry * Geometry );
__declspec(implementation_key(1154)) IEulerAnglePtr ISunConfig::GetSunEuler ( struct IPoint * Pos );
__declspec(implementation_key(1155)) HRESULT ISunConfig::SetSunEuler ( struct IEulerAngle * newVal );
__declspec(implementation_key(1156)) enum gviSunCalculateMode ISunConfig::GetSunCalculateMode ( );
__declspec(implementation_key(1157)) void ISunConfig::PutSunCalculateMode ( enum gviSunCalculateMode pVal );
__declspec(implementation_key(1158)) HRESULT ISunConfig::SetGMT ( DATE Time );
__declspec(implementation_key(1159)) OLE_COLOR ISunConfig::GetShadowColor ( );
__declspec(implementation_key(1160)) void ISunConfig::PutShadowColor ( OLE_COLOR pVal );
__declspec(implementation_key(1161)) HRESULT ISunConfig::EnableShadow ( long ViewID, VARIANT_BOOL IsEnable );
__declspec(implementation_key(1162)) VARIANT_BOOL ISunConfig::IsShadowEnabled ( long ViewID );
__declspec(implementation_key(1163)) OLE_COLOR IPointCloudSymbol::GetColor ( );
__declspec(implementation_key(1164)) void IPointCloudSymbol::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(1165)) VARIANT_BOOL IPointCloudSymbol::GetEnableColor ( );
__declspec(implementation_key(1166)) void IPointCloudSymbol::PutEnableColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(1167)) long IPointCloudSymbol::GetSize ( );
__declspec(implementation_key(1168)) void IPointCloudSymbol::PutSize ( long pVal );
__declspec(implementation_key(1169)) IRenderPOIPtr IRenderPOIPickResult::GetPOI ( );
__declspec(implementation_key(1170)) HRESULT IUtility::CreateFixedBillboard ( _bstr_t Text, struct ITextAttribute * TextAttribute, float Height, float Width, VARIANT_BOOL DoubleFace, struct IModel * * Model, struct IImage * * Image, BSTR * ImageName );
__declspec(implementation_key(1171)) HRESULT ITerrainVideoConfig::SetPriorityDisplay ( struct ITerrainVideo * Video );
__declspec(implementation_key(1172)) long ITerrainVideoConfig::GetMaxRealtimeTVNum ( );
__declspec(implementation_key(1173)) void ITerrainVideoConfig::PutMaxRealtimeTVNum ( long pVal );
__declspec(implementation_key(1174)) long ITerrainVideoConfig::GetMaxVisualFieldTVNum ( );
__declspec(implementation_key(1175)) void ITerrainVideoConfig::PutMaxVisualFieldTVNum ( long pVal );
__declspec(implementation_key(1176)) _bstr_t IProject::GetName ( );
__declspec(implementation_key(1177)) HRESULT IProject::Open ( _bstr_t ProjectPath, VARIANT_BOOL Asynchronous, _bstr_t Password );
__declspec(implementation_key(1178)) HRESULT IProject::Save ( );
__declspec(implementation_key(1179)) _bstr_t IProject::SaveAs ( _bstr_t ProjectFileName );
__declspec(implementation_key(1180)) VARIANT_BOOL IProject::Close ( );
__declspec(implementation_key(1181)) HRESULT IProject::PackReplaceConnectionString ( _bstr_t OldString, _bstr_t NewString );
__declspec(implementation_key(1182)) VARIANT_BOOL IProject::PackGetInfo ( _bstr_t Path, VARIANT_BOOL IgnoreBigDataFile, unsigned __int64 * DiskFreeSize, unsigned __int64 * ResTotalSize, unsigned long * ResFileNumber );
__declspec(implementation_key(1183)) VARIANT_BOOL IProject::PackResFile ( );
__declspec(implementation_key(1184)) VARIANT_BOOL IProject::GetNeedSave ( );
__declspec(implementation_key(1185)) double IHeatMapPlayer::GetAlpha ( );
__declspec(implementation_key(1186)) void IHeatMapPlayer::PutAlpha ( double pVal );
__declspec(implementation_key(1187)) VARIANT_BOOL IHeatMapPlayer::StartPlay ( DATE StartTime, DATE EndTime, double Duration );
__declspec(implementation_key(1188)) VARIANT_BOOL IHeatMapPlayer::SetTime ( DATE CurTime );
__declspec(implementation_key(1189)) HRESULT IHeatMapPlayer::Pause ( );
__declspec(implementation_key(1190)) HRESULT IHeatMapPlayer::Continue ( );
__declspec(implementation_key(1191)) HRESULT IHeatMapPlayer::Stop ( );
__declspec(implementation_key(1192)) HRESULT IUIRect::Init ( double LeftScale, double LeftOffset, double TopScale, double TopOffset, double RightScale, double RightOffset, double BottomScale, double BottomOffset );
__declspec(implementation_key(1193)) _bstr_t IUIWindow::GetName ( );
__declspec(implementation_key(1194)) void IUIWindow::PutName ( _bstr_t pVal );
__declspec(implementation_key(1195)) _bstr_t IUIWindow::GetText ( );
__declspec(implementation_key(1196)) void IUIWindow::PutText ( _bstr_t pVal );
__declspec(implementation_key(1197)) VARIANT_BOOL IUIWindow::GetIsVisible ( );
__declspec(implementation_key(1198)) void IUIWindow::PutIsVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1199)) VARIANT_BOOL IUIWindow::GetIsDisabled ( );
__declspec(implementation_key(1200)) void IUIWindow::PutIsDisabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1201)) enum gviUIWindowType IUIWindow::GetType ( );
__declspec(implementation_key(1202)) HRESULT IUIWindow::SetArea ( struct IUIRect * newVal );
__declspec(implementation_key(1203)) HRESULT IUIWindow::SubscribeEvent ( enum gviUIEventType eventType );
__declspec(implementation_key(1204)) HRESULT IUIWindow::UnsubscribeEvent ( enum gviUIEventType eventType );
__declspec(implementation_key(1205)) void IUIImageButton::PutNormalImage ( _bstr_t _arg1 );
__declspec(implementation_key(1206)) void IUIImageButton::PutHoverImage ( _bstr_t _arg1 );
__declspec(implementation_key(1207)) void IUIImageButton::PutPushedImage ( _bstr_t _arg1 );
__declspec(implementation_key(1208)) void IUIImageButton::PutDisabledImage ( _bstr_t _arg1 );
__declspec(implementation_key(1209)) IUIImageButtonPtr IUIWindowManager::CreateImageButton ( );
__declspec(implementation_key(1210)) VARIANT_BOOL _IRenderControlEvents::RcLButtonDown ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1211)) VARIANT_BOOL _IRenderControlEvents::RcLButtonUp ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1212)) VARIANT_BOOL _IRenderControlEvents::RcLButtonDblClk ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1213)) VARIANT_BOOL _IRenderControlEvents::RcMButtonDown ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1214)) VARIANT_BOOL _IRenderControlEvents::RcMButtonUp ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1215)) VARIANT_BOOL _IRenderControlEvents::RcMButtonDblClk ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1216)) VARIANT_BOOL _IRenderControlEvents::RcRButtonDown ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1217)) VARIANT_BOOL _IRenderControlEvents::RcRButtonUp ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1218)) VARIANT_BOOL _IRenderControlEvents::RcRButtonDblClk ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1219)) VARIANT_BOOL _IRenderControlEvents::RcMouseMove ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1220)) VARIANT_BOOL _IRenderControlEvents::RcMouseHover ( unsigned long Flags, long X, long Y );
__declspec(implementation_key(1221)) VARIANT_BOOL _IRenderControlEvents::RcMouseWheel ( unsigned long Flags, short Delta, long X, long Y );
__declspec(implementation_key(1222)) VARIANT_BOOL _IRenderControlEvents::RcChar ( unsigned long Flags, unsigned long Char );
__declspec(implementation_key(1223)) VARIANT_BOOL _IRenderControlEvents::RcKeyDown ( unsigned long Flags, unsigned long Char );
__declspec(implementation_key(1224)) VARIANT_BOOL _IRenderControlEvents::RcKeyUp ( unsigned long Flags, unsigned long Char );
__declspec(implementation_key(1225)) HRESULT _IRenderControlEvents::RcDragEnter ( IUnknown * DataObject, unsigned long KeyState, long X, long Y, unsigned long * Effect );
__declspec(implementation_key(1226)) HRESULT _IRenderControlEvents::RcDragOver ( unsigned long KeyState, long X, long Y, unsigned long Effect );
__declspec(implementation_key(1227)) HRESULT _IRenderControlEvents::RcDragLeave ( );
__declspec(implementation_key(1228)) HRESULT _IRenderControlEvents::RcDrop ( IUnknown * DataObject, unsigned long KeyState, long X, long Y, unsigned long * Effect );
__declspec(implementation_key(1229)) HRESULT _IRenderControlEvents::RcMouseClickSelect ( struct IPickResult * PickResult, struct IPoint * IntersectPoint, enum gviModKeyMask Mask, enum gviMouseSelectMode EventSender );
__declspec(implementation_key(1230)) HRESULT _IRenderControlEvents::RcMouseDragSelect ( struct IPickResultCollection * PickResults, enum gviModKeyMask Mask );
__declspec(implementation_key(1231)) HRESULT _IRenderControlEvents::RcPictureExportBegin ( long NumberOfWidth, long NumberOfHeight );
__declspec(implementation_key(1232)) HRESULT _IRenderControlEvents::RcPictureExporting ( long Index, float Percentage );
__declspec(implementation_key(1233)) HRESULT _IRenderControlEvents::RcPictureExportEnd ( double Time, VARIANT_BOOL IsAborted );
__declspec(implementation_key(1234)) HRESULT _IRenderControlEvents::RcCameraFlyFinished ( unsigned char Type );
__declspec(implementation_key(1235)) HRESULT _IRenderControlEvents::RcCameraTourWaypointChanged ( long Index );
__declspec(implementation_key(1236)) HRESULT _IRenderControlEvents::RcVideoExportBegin ( double TotalTime );
__declspec(implementation_key(1237)) HRESULT _IRenderControlEvents::RcVideoExporting ( float Percentage );
__declspec(implementation_key(1238)) HRESULT _IRenderControlEvents::RcVideoExportEnd ( double Time, VARIANT_BOOL IsAborted );
__declspec(implementation_key(1239)) HRESULT _IRenderControlEvents::RcDataSourceDisconnected ( _bstr_t DataSourceGuid, _bstr_t ConnectionInfo );
__declspec(implementation_key(1240)) HRESULT _IRenderControlEvents::RcObjectEditing ( struct IGeometry * Geometry );
__declspec(implementation_key(1241)) HRESULT _IRenderControlEvents::RcObjectEditFinish ( );
__declspec(implementation_key(1242)) HRESULT _IRenderControlEvents::RcTransformHelperBegin ( );
__declspec(implementation_key(1243)) HRESULT _IRenderControlEvents::RcTransformHelperEnd ( );
__declspec(implementation_key(1244)) HRESULT _IRenderControlEvents::RcTransformHelperMoving ( struct IVector3 * Position );
__declspec(implementation_key(1245)) HRESULT _IRenderControlEvents::RcTransformHelperRotating ( struct IVector3 * Axis, double Angle );
__declspec(implementation_key(1246)) HRESULT _IRenderControlEvents::RcTransformHelperScaling ( struct IVector3 * Scale );
__declspec(implementation_key(1247)) HRESULT _IRenderControlEvents::RcTransformHelperBoxScaling ( struct IVector3 * Center, struct IVector3 * Scale );
__declspec(implementation_key(1248)) HRESULT _IRenderControlEvents::RcFeaturesMoving ( struct IVector3 * Translate );
__declspec(implementation_key(1249)) HRESULT _IRenderControlEvents::RcCameraUndoRedoStatusChanged ( );
__declspec(implementation_key(1250)) VARIANT_BOOL _IRenderControlEvents::RcResPacking ( long TotalResNo, long CurResIndex );
__declspec(implementation_key(1251)) HRESULT _IRenderControlEvents::RcBeforePresentationItemActivation ( _bstr_t PresentationID, struct IPresentationStep * Step );
__declspec(implementation_key(1252)) HRESULT _IRenderControlEvents::RcPresentationFlyToReachedDestination ( _bstr_t PresentationID, struct IPresentationStep * Step );
__declspec(implementation_key(1253)) HRESULT _IRenderControlEvents::RcPresentationStatusChanged ( _bstr_t PresentationID, enum gviPresentationStatus Status );
__declspec(implementation_key(1254)) HRESULT _IRenderControlEvents::RcUIWindowEvent ( struct IUIEventArgs * EventArgs, enum gviUIEventType eventType );
__declspec(implementation_key(1255)) HRESULT _IRenderControlEvents::RcProjectChanged ( );
__declspec(implementation_key(1256)) VARIANT_BOOL IExportManager::ExportImage ( _bstr_t FilePath, unsigned long Width, unsigned long Height, VARIANT_BOOL HighQuality );
__declspec(implementation_key(1257)) VARIANT_BOOL IExportManager::ExportOrthoImage ( _bstr_t FilePath, unsigned long Width, struct IPoint * Center, struct IEulerAngle * Angle, struct IEnvelope * OrthoBox, VARIANT_BOOL HighQuality, OLE_COLOR BackgroundColor );
__declspec(implementation_key(1258)) HRESULT IExportManager::CancelExport ( );
__declspec(implementation_key(1259)) VARIANT_BOOL IExportManager::ExportDOM ( _bstr_t FilePath, struct IEnvelope * Box, float MeterPerPixel );
__declspec(implementation_key(1260)) VARIANT_BOOL IExportManager::ExportDEM ( _bstr_t FilePath, struct IEnvelope * Box, float MeterPerPixel );
__declspec(implementation_key(1261)) VARIANT_BOOL IExportManager::Export25D ( _bstr_t FilePath, struct IEnvelope * Box, float MeterPerPixel, struct IEulerAngle * Angle );
__declspec(implementation_key(1262)) VARIANT_BOOL IExportManager::Export25DEx ( _bstr_t FilePath, struct IEnvelope * Box, float MeterPerPixel, struct IEulerAngle * Angle, SAFEARRAY * FeatureClassIds, VARIANT_BOOL ExportShpOnly );
__declspec(implementation_key(1263)) VARIANT_BOOL IExportManager::ExportPanorama ( _bstr_t FilePath, unsigned long Width, struct IPoint * Center, struct IEulerAngle * Angle );
__declspec(implementation_key(1264)) VARIANT_BOOL IRenderControl::Initialize ( VARIANT_BOOL IsPlanarTerrain, struct IPropertySet * Params );
__declspec(implementation_key(1265)) HRESULT IRenderControl::RefreshModel ( struct IFeatureDataSet * DataSet, _bstr_t ModelName );
__declspec(implementation_key(1266)) HRESULT IRenderControl::RefreshImage ( struct IFeatureDataSet * DataSet, _bstr_t ImageName );
__declspec(implementation_key(1267)) void IRenderControl::PutOnFrameInvoke ( IDispatch * _arg1 );
__declspec(implementation_key(1268)) enum gviInteractMode IRenderControl::GetInteractMode ( );
__declspec(implementation_key(1269)) void IRenderControl::PutInteractMode ( enum gviInteractMode pVal );
__declspec(implementation_key(1270)) enum gviMouseSelectMode IRenderControl::GetMouseSelectMode ( );
__declspec(implementation_key(1271)) void IRenderControl::PutMouseSelectMode ( enum gviMouseSelectMode pVal );
__declspec(implementation_key(1272)) enum gviMouseSelectObjectMask IRenderControl::GetMouseSelectObjectMask ( );
__declspec(implementation_key(1273)) void IRenderControl::PutMouseSelectObjectMask ( enum gviMouseSelectObjectMask pVal );
__declspec(implementation_key(1274)) VARIANT_BOOL IRenderControl::GetFullScreen ( );
__declspec(implementation_key(1275)) void IRenderControl::PutFullScreen ( VARIANT_BOOL pVal );
__declspec(implementation_key(1276)) ITransformHelperPtr IRenderControl::GetTransformHelper ( );
__declspec(implementation_key(1277)) IObjectEditorPtr IRenderControl::GetObjectEditor ( );
__declspec(implementation_key(1278)) ICameraPtr IRenderControl::GetCamera ( );
__declspec(implementation_key(1279)) ITerrainPtr IRenderControl::GetTerrain ( );
__declspec(implementation_key(1280)) IFeatureManagerPtr IRenderControl::GetFeatureManager ( );
__declspec(implementation_key(1281)) IObjectManagerPtr IRenderControl::GetObjectManager ( );
__declspec(implementation_key(1282)) ICacheManagerPtr IRenderControl::GetCacheManager ( );
__declspec(implementation_key(1283)) IExportManagerPtr IRenderControl::GetExportManager ( );
__declspec(implementation_key(1284)) HRESULT IRenderControl::Reconnect ( );
__declspec(implementation_key(1285)) IViewportPtr IRenderControl::GetViewport ( );
__declspec(implementation_key(1286)) HRESULT IRenderControl::Reset ( VARIANT_BOOL IsPlanarTerrain );
__declspec(implementation_key(1287)) _bstr_t IRenderControl::GetMouseCursor ( );
__declspec(implementation_key(1288)) void IRenderControl::PutMouseCursor ( _bstr_t pVal );
__declspec(implementation_key(1289)) enum gviMeasurementMode IRenderControl::GetMeasurementMode ( );
__declspec(implementation_key(1290)) void IRenderControl::PutMeasurementMode ( enum gviMeasurementMode pVal );
__declspec(implementation_key(1291)) enum gviClipMode IRenderControl::GetClipMode ( );
__declspec(implementation_key(1292)) void IRenderControl::PutClipMode ( enum gviClipMode pVal );
__declspec(implementation_key(1293)) IVisualAnalysisPtr IRenderControl::GetVisualAnalysis ( );
__declspec(implementation_key(1294)) IHighlightHelperPtr IRenderControl::GetHighlightHelper ( );
__declspec(implementation_key(1295)) HRESULT IRenderControl::PauseRendering ( VARIANT_BOOL DumpMemory );
__declspec(implementation_key(1296)) HRESULT IRenderControl::ResumeRendering ( );
__declspec(implementation_key(1297)) long IRenderControl::GetLastError ( );
__declspec(implementation_key(1298)) VARIANT_BOOL IRenderControl::GetIsFocus ( );
__declspec(implementation_key(1299)) _bstr_t IRenderControl::GetTerrainCrsWKT ( _bstr_t LayerInfo, _bstr_t Password );
__declspec(implementation_key(1300)) VARIANT_BOOL IRenderControl::Initialize2 ( _bstr_t CrsWKT, struct IPropertySet * Params );
__declspec(implementation_key(1301)) HRESULT IRenderControl::Reset2 ( _bstr_t CrsWKT );
__declspec(implementation_key(1302)) _bstr_t IRenderControl::GetCurrentCrsWKT ( );
__declspec(implementation_key(1303)) ISunConfigPtr IRenderControl::GetSunConfig ( );
__declspec(implementation_key(1304)) enum gviMouseSnapMode IRenderControl::GetMouseSnapMode ( );
__declspec(implementation_key(1305)) void IRenderControl::PutMouseSnapMode ( enum gviMouseSnapMode pVal );
__declspec(implementation_key(1306)) HRESULT IRenderControl::SetRenderParam ( enum gviRenderControlParameters Param, const _variant_t & newVal );
__declspec(implementation_key(1307)) _variant_t IRenderControl::GetRenderParam ( enum gviRenderControlParameters Param );
__declspec(implementation_key(1308)) enum gviManipulatorMode IRenderControl::GetUseEarthOrbitManipulator ( );
__declspec(implementation_key(1309)) void IRenderControl::PutUseEarthOrbitManipulator ( enum gviManipulatorMode pVal );
__declspec(implementation_key(1310)) IUtilityPtr IRenderControl::GetUtility ( );
__declspec(implementation_key(1311)) ITerrainVideoConfigPtr IRenderControl::GetTerrainVideoConfig ( );
__declspec(implementation_key(1312)) IProjectPtr IRenderControl::GetProject ( );
__declspec(implementation_key(1313)) IProjectTreePtr IRenderControl::GetProjectTree ( );
__declspec(implementation_key(1314)) IHeatMapPlayerPtr IRenderControl::GetHeatMapPlayer ( );
__declspec(implementation_key(1315)) IUIWindowManagerPtr IRenderControl::GetUIWindowManager ( );
__declspec(implementation_key(1316)) IFeatureLayerPtr IFeatureLayerPickResult::GetFeatureLayer ( );
__declspec(implementation_key(1317)) long IFeatureLayerPickResult::GetFeatureId ( );
__declspec(implementation_key(1318)) I3DTileLayerPtr I3DTileLayerPickResult::GetTileLayer ( );
__declspec(implementation_key(1319)) __int64 I3DTileLayerPickResult::GetTileId ( );
__declspec(implementation_key(1320)) IReferencePlanePtr IReferencePlanePickResult::GetReferencePlane ( );
__declspec(implementation_key(1321)) ITerrainPtr ITerrainPickResult::GetTerrain ( );
__declspec(implementation_key(1322)) IRenderModelPointPtr IRenderModelPointPickResult::GetModelPoint ( );
__declspec(implementation_key(1323)) long IRenderModelPointPickResult::GetDrawGroupIndex ( );
__declspec(implementation_key(1324)) long IRenderModelPointPickResult::GetPrimitiveIndex ( );
__declspec(implementation_key(1325)) IRenderPolylinePtr IRenderPolylinePickResult::GetPolyline ( );
__declspec(implementation_key(1326)) IRenderPolygonPtr IRenderPolygonPickResult::GetPolygon ( );
__declspec(implementation_key(1327)) IRenderTriMeshPtr IRenderTriMeshPickResult::GetTriMesh ( );
__declspec(implementation_key(1328)) IRenderMultiTriMeshPtr IRenderMultiTriMeshPickResult::GetMultiTriMesh ( );
__declspec(implementation_key(1329)) IRenderMultiPointPtr IRenderMultiPointPickResult::GetMultiPoint ( );
__declspec(implementation_key(1330)) IRenderMultiPolylinePtr IRenderMultiPolylinePickResult::GetMultiPolyline ( );
__declspec(implementation_key(1331)) IRenderMultiPolygonPtr IRenderMultiPolygonPickResult::GetMultiPolygon ( );
__declspec(implementation_key(1332)) IRenderPointPtr IRenderPointPickResult::GetPoint ( );
__declspec(implementation_key(1333)) ILabelPtr ILabelPickResult::GetLabel ( );
__declspec(implementation_key(1334)) ITableLabelPtr ITableLabelPickResult::GetTableLabel ( );
__declspec(implementation_key(1335)) IOverlayLabelPtr IOverlayLabelPickResult::GetOverlayLabel ( );
__declspec(implementation_key(1336)) IParticleEffectPtr IParticleEffectPickResult::GetParticleEffect ( );
__declspec(implementation_key(1337)) ISkinnedMeshPtr ISkinnedMeshPickResult::GetSkinnedMesh ( );
__declspec(implementation_key(1338)) HRESULT IValueMapTextRender::AddScheme ( struct ITextRenderScheme * Scheme );
__declspec(implementation_key(1339)) HRESULT IValueMapTextRender::ClearSchemes ( );
__declspec(implementation_key(1340)) ITextRenderSchemePtr IValueMapTextRender::GetScheme ( long Index );
__declspec(implementation_key(1341)) long IValueMapTextRender::GetSchemeCount ( );
__declspec(implementation_key(1342)) HRESULT IValueMapGeometryRender::AddScheme ( struct IGeometryRenderScheme * Scheme );
__declspec(implementation_key(1343)) HRESULT IValueMapGeometryRender::ClearSchemes ( );
__declspec(implementation_key(1344)) IGeometryRenderSchemePtr IValueMapGeometryRender::GetScheme ( long Index );
__declspec(implementation_key(1345)) long IValueMapGeometryRender::GetSchemeCount ( );
__declspec(implementation_key(1346)) ITextSymbolPtr ISimpleTextRender::GetSymbol ( );
__declspec(implementation_key(1347)) void ISimpleTextRender::PutSymbol ( struct ITextSymbol * pVal );
__declspec(implementation_key(1348)) IGeometrySymbolPtr ISimpleGeometryRender::GetSymbol ( );
__declspec(implementation_key(1349)) void ISimpleGeometryRender::PutSymbol ( struct IGeometrySymbol * pVal );
__declspec(implementation_key(1350)) OLE_COLOR ISolidSymbol::GetColor ( );
__declspec(implementation_key(1351)) void ISolidSymbol::PutColor ( OLE_COLOR pVal );
__declspec(implementation_key(1352)) ICurveSymbolPtr ISolidSymbol::GetBoundarySymbol ( );
__declspec(implementation_key(1353)) void ISolidSymbol::PutBoundarySymbol ( struct ICurveSymbol * pVal );
__declspec(implementation_key(1354)) OLE_COLOR ISimplePointSymbol::GetFillColor ( );
__declspec(implementation_key(1355)) void ISimplePointSymbol::PutFillColor ( OLE_COLOR pVal );
__declspec(implementation_key(1356)) OLE_COLOR ISimplePointSymbol::GetOutlineColor ( );
__declspec(implementation_key(1357)) void ISimplePointSymbol::PutOutlineColor ( OLE_COLOR pVal );
__declspec(implementation_key(1358)) enum gviSimplePointStyle ISimplePointSymbol::GetStyle ( );
__declspec(implementation_key(1359)) void ISimplePointSymbol::PutStyle ( enum gviSimplePointStyle pVal );
__declspec(implementation_key(1360)) _bstr_t IImagePointSymbol::GetImageName ( );
__declspec(implementation_key(1361)) void IImagePointSymbol::PutImageName ( _bstr_t pVal );
__declspec(implementation_key(1362)) double IRangeRenderRule::GetMinValue ( );
__declspec(implementation_key(1363)) void IRangeRenderRule::PutMinValue ( double pVal );
__declspec(implementation_key(1364)) double IRangeRenderRule::GetMaxValue ( );
__declspec(implementation_key(1365)) void IRangeRenderRule::PutMaxValue ( double pVal );
__declspec(implementation_key(1366)) VARIANT_BOOL IRangeRenderRule::GetIncludeMin ( );
__declspec(implementation_key(1367)) void IRangeRenderRule::PutIncludeMin ( VARIANT_BOOL pVal );
__declspec(implementation_key(1368)) VARIANT_BOOL IRangeRenderRule::GetIncludeMax ( );
__declspec(implementation_key(1369)) void IRangeRenderRule::PutIncludeMax ( VARIANT_BOOL pVal );
__declspec(implementation_key(1370)) HRESULT IUniqueValuesRenderRule::AddValue ( _bstr_t newValue );
__declspec(implementation_key(1371)) HRESULT IUniqueValuesRenderRule::Clear ( );
__declspec(implementation_key(1372)) _bstr_t IUniqueValuesRenderRule::GetValue ( long Index );
__declspec(implementation_key(1373)) long IUniqueValuesRenderRule::GetCount ( );
__declspec(implementation_key(1374)) HRESULT IMotionable::Bind ( struct IMotionPath * Path, struct IVector3 * PosOffset, double HeadingOffset, double PitchOffset, double RollOffset );
__declspec(implementation_key(1375)) HRESULT IMotionable::Unbind ( );
__declspec(implementation_key(1376)) GUID IMotionable::GetMotionPathId ( );
__declspec(implementation_key(1377)) HRESULT IMotionable::Bind2 ( struct IDynamicObject * Path, struct IVector3 * PosOffset, double HeadingOffset, double PitchOffset, double RollOffset );
__declspec(implementation_key(1378)) ITerrainHolePtr ITerrainHolePickResult::GetTerrainHole ( );
__declspec(implementation_key(1379)) I3DTileHolePtr ITileHolePickResult::GetTileHole ( );
__declspec(implementation_key(1380)) IRenderArrowPtr IRenderArrowPickResult::GetRenderArrow ( );
__declspec(implementation_key(1381)) _bstr_t IWindowParam::GetFilePath ( );
__declspec(implementation_key(1382)) void IWindowParam::PutFilePath ( _bstr_t pVal );
__declspec(implementation_key(1383)) enum gviHTMLWindowPosition IWindowParam::GetPosition ( );
__declspec(implementation_key(1384)) void IWindowParam::PutPosition ( enum gviHTMLWindowPosition pVal );
__declspec(implementation_key(1385)) long IWindowParam::GetOffsetX ( );
__declspec(implementation_key(1386)) void IWindowParam::PutOffsetX ( long pVal );
__declspec(implementation_key(1387)) long IWindowParam::GetOffsetY ( );
__declspec(implementation_key(1388)) void IWindowParam::PutOffsetY ( long pVal );
__declspec(implementation_key(1389)) long IWindowParam::GetSizeX ( );
__declspec(implementation_key(1390)) void IWindowParam::PutSizeX ( long pVal );
__declspec(implementation_key(1391)) long IWindowParam::GetSizeY ( );
__declspec(implementation_key(1392)) void IWindowParam::PutSizeY ( long pVal );
__declspec(implementation_key(1393)) VARIANT_BOOL IWindowParam::GetShowWindow ( );
__declspec(implementation_key(1394)) void IWindowParam::PutShowWindow ( VARIANT_BOOL pVal );
__declspec(implementation_key(1395)) VARIANT_BOOL IWindowParam::GetHastitle ( );
__declspec(implementation_key(1396)) void IWindowParam::PutHastitle ( VARIANT_BOOL pVal );
__declspec(implementation_key(1397)) VARIANT_BOOL IWindowParam::GetHideOnClick ( );
__declspec(implementation_key(1398)) void IWindowParam::PutHideOnClick ( VARIANT_BOOL pVal );
__declspec(implementation_key(1399)) _bstr_t IWindowParam::GetResetOnHide ( );
__declspec(implementation_key(1400)) void IWindowParam::PutResetOnHide ( _bstr_t pVal );
__declspec(implementation_key(1401)) long IWindowParam::GetWinId ( );
__declspec(implementation_key(1402)) void IWindowParam::PutWinId ( long pVal );
__declspec(implementation_key(1403)) long IWindowParam::GetRound ( );
__declspec(implementation_key(1404)) void IWindowParam::PutRound ( long pVal );
__declspec(implementation_key(1405)) unsigned char IWindowParam::GetTransparence ( );
__declspec(implementation_key(1406)) void IWindowParam::PutTransparence ( unsigned char pVal );
__declspec(implementation_key(1407)) _bstr_t IWindowParam::GetRgnTemplateFile ( );
__declspec(implementation_key(1408)) void IWindowParam::PutRgnTemplateFile ( _bstr_t pVal );
__declspec(implementation_key(1409)) unsigned long IWindowParam::GetRgnTransparentColor ( );
__declspec(implementation_key(1410)) void IWindowParam::PutRgnTransparentColor ( unsigned long pVal );
__declspec(implementation_key(1411)) VARIANT_BOOL IWindowParam::GetCloseButtonEnabled ( );
__declspec(implementation_key(1412)) void IWindowParam::PutCloseButtonEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1413)) VARIANT_BOOL IWindowParam::GetMinButtonVisible ( );
__declspec(implementation_key(1414)) void IWindowParam::PutMinButtonVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1415)) VARIANT_BOOL IWindowParam::GetIsPopupWindow ( );
__declspec(implementation_key(1416)) void IWindowParam::PutIsPopupWindow ( VARIANT_BOOL pVal );
__declspec(implementation_key(1417)) VARIANT_BOOL IWindowParam::GetResizable ( );
__declspec(implementation_key(1418)) void IWindowParam::PutResizable ( VARIANT_BOOL pVal );
__declspec(implementation_key(1419)) HRESULT IHTMLWindow::ShowPopupWindow ( _bstr_t URL, long SizeX, long SizeY, VARIANT_BOOL Hastitle, enum gviHTMLWindowPosition Position, long Round );
__declspec(implementation_key(1420)) HRESULT IHTMLWindow::ShowPopupWindowEx ( struct IPoint * Position, struct IWindowParam * Param, VARIANT_BOOL AutoComputePos );
__declspec(implementation_key(1421)) HRESULT IHTMLWindow::DeletePopupWindow ( long WinId );
__declspec(implementation_key(1422)) HRESULT IHTMLWindow::SetWindowSize ( long Width, long Height, long WinId );
__declspec(implementation_key(1423)) HRESULT IHTMLWindow::HideWindow ( long WinId );
__declspec(implementation_key(1424)) IWindowParamPtr IHTMLWindow::CreateWindowParam ( );
__declspec(implementation_key(1425)) HRESULT IHTMLWindow::SetWindowParam ( struct IWindowParam * Param );
__declspec(implementation_key(1426)) double IPolygon3DSymbol::GetHeight ( );
__declspec(implementation_key(1427)) void IPolygon3DSymbol::PutHeight ( double pVal );
__declspec(implementation_key(1428)) ITerrainModifierPtr ITerrainModifierPickResult::GetTerrainModifier ( );
__declspec(implementation_key(1429)) ITerrainArrowPtr ITerrainArrowPickResult::GetTerrainArrow ( );
__declspec(implementation_key(1430)) ITerrain3DArrowPtr ITerrain3DArrowPickResult::GetTerrain3DArrow ( );
__declspec(implementation_key(1431)) ITerrainRegularPolygonPtr ITerrainRegularPolygonPickResult::GetTerrainRegularPolygon ( );
__declspec(implementation_key(1432)) ITerrain3DRegBasePtr ITerrainCylinderPickResult::GetTerrainCylinder ( );
__declspec(implementation_key(1433)) ITerrain3DRegBasePtr ITerrainConePickResult::GetTerrainCone ( );
__declspec(implementation_key(1434)) ITerrainRectanglePtr ITerrainRectanglePickResult::GetTerrainRectangle ( );
__declspec(implementation_key(1435)) ITerrain3DRectBasePtr ITerrainBoxPickResult::GetTerrainBox ( );
__declspec(implementation_key(1436)) ITerrain3DRectBasePtr ITerrainPyramidPickResult::GetTerrainPyramid ( );
__declspec(implementation_key(1437)) ITerrainEllipsePtr ITerrainEllipsePickResult::GetTerrainEllipse ( );
__declspec(implementation_key(1438)) ITerrainArcPtr ITerrainArcPickResult::GetTerrainArc ( );
__declspec(implementation_key(1439)) ITerrainSpherePtr ITerrainSpherePickResult::GetTerrainSphere ( );
__declspec(implementation_key(1440)) ITerrainImageLabelPtr ITerrainImageLabelPickResult::GetTerrainImageLabel ( );
__declspec(implementation_key(1441)) IComplexParticleEffectPtr IComplexParticleEffectPickResult::GetComplexParticleEffect ( );
__declspec(implementation_key(1442)) IUIWindowPtr IUIWindowEventArgs::GetUIWindow ( );
__declspec(implementation_key(1443)) long IUIMouseEventArgs::GetClickCount ( );
__declspec(implementation_key(1444)) long IUIMouseEventArgs::GetSysKeys ( );
__declspec(implementation_key(1445)) float IUIMouseEventArgs::GetWheelChange ( );
__declspec(implementation_key(1446)) enum gviUIMouseButtonType IUIMouseEventArgs::GetButton ( );
__declspec(implementation_key(1447)) SAFEARRAY * IUIMouseEventArgs::GetMoveDelta ( );
__declspec(implementation_key(1448)) SAFEARRAY * IUIMouseEventArgs::GetPosition ( );
__declspec(implementation_key(1449)) HRESULT IInternalTool::SetCursorPos ( long X, long Y );
__declspec(implementation_key(1450)) HRESULT IInternalTool::DoMouseEvent ( unsigned char MouseButton, long X, long Y );
__declspec(implementation_key(1451)) VARIANT_BOOL IInternalTool::CaptureWindow ( _bstr_t ImagePath );
__declspec(implementation_key(1452)) HRESULT IInternalTool::CoordClientToScreen ( long X, long Y, long * OutX, long * OutY );
__declspec(implementation_key(1453)) float IInternalTool::CompareImage ( long Id, _bstr_t Image1, _bstr_t Image2 );
__declspec(implementation_key(1454)) _bstr_t IInternalTool::GetRuntimeTempPath ( );
__declspec(implementation_key(1455)) HRESULT IInternalTool::IsFirefox ( VARIANT_BOOL newVal );
__declspec(implementation_key(1456)) long IInternalTool::GetMsgChainFlags ( );
__declspec(implementation_key(1457)) void IInternalTool::PutMsgChainFlags ( long pVal );
__declspec(implementation_key(1458)) long IInternalLicenseKey::SetLicenseKey ( _bstr_t newVal );
__declspec(implementation_key(1459)) IDataInteropPtr IReferenceHelper::GetDataInterop ( );
__declspec(implementation_key(1460)) ICommandManagerPtr IReferenceHelper::GetCommandManager ( );
#pragma stop_map_region

#pragma pack(pop)
