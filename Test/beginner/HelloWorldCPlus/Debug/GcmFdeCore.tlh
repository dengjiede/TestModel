// Created by Microsoft (R) C/C++ Compiler Version 12.00.21005.1 (b1145db4).
//
// d:\program files (x86)\citymaker 7\citymaker sdk\samples\csharp\beginner\helloworldcplus\debug\GcmFdeCore.tlh
//
// C++ source equivalent of Win32 type library 52B162AE-72E4-47ec-9E4B-E25671B70B9B
// compiler-generated file created 09/08/17 at 15:12:59 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("52b162ae-72e4-47ec-9e4b-e25671b70b9b"))
/* LIBID */ __GcmFdeCore;
struct __declspec(uuid("6113a8c3-daf7-48bc-87f5-d8a0d3b39ad0"))
/* dual interface */ ITable;
struct __declspec(uuid("b7da87f9-8932-445c-b7c9-debe209a0741"))
/* dual interface */ IFieldInfo;
enum gviFieldType;
struct __declspec(uuid("cebc7d62-06f0-4642-8927-8e7d6a49e4ca"))
/* dual interface */ IDomain;
enum gviDomainType;
struct __declspec(uuid("88c4cb4f-a365-4f49-bc32-a868fb943bdc"))
/* dual interface */ IGeometryDef;
enum gviGeometryColumnType;
struct __declspec(uuid("6c8db5b9-1444-4c2a-b458-e2dd17697a82"))
/* dual interface */ IFieldInfoCollection;
struct __declspec(uuid("bfea4b1f-4494-4d29-8b65-2dcf98df34d4"))
/* dual interface */ IDbIndexInfo;
struct __declspec(uuid("246934d8-cfb1-43d9-abc1-a8b512ef5421"))
/* dual interface */ IIndexInfo;
enum gviIndexType;
struct __declspec(uuid("834046c1-e133-49c0-b804-f8ac289d4ef2"))
/* dual interface */ IDbIndexInfoCollection;
enum gviDataSetType;
struct __declspec(uuid("63b3a500-737b-4f70-83a6-71507d046d37"))
/* dual interface */ IRowBuffer;
struct __declspec(uuid("73dbbd1a-7ea6-48f9-864c-d236692cc5cc"))
/* dual interface */ IQueryFilter;
enum gviFilterType;
struct __declspec(uuid("d74fbd58-8347-45f3-a6f7-31f2e5e358fb"))
/* dual interface */ IFdeCursor;
struct __declspec(uuid("73649ebb-a817-4916-b3a7-4ea6a79ba71e"))
/* dual interface */ IRowBufferCollection;
struct __declspec(uuid("d746bee4-69f7-4787-97df-46c71971ccb5"))
/* dual interface */ IDataSource;
struct __declspec(uuid("9c008b24-f1e3-4f35-be0d-3b2b47d374b3"))
/* dual interface */ IConnectionInfo;
enum gviConnectionType;
struct __declspec(uuid("09b2d417-a4c1-4a56-ae56-49e450c7d1c4"))
/* dual interface */ IFeatureDataSet;
struct __declspec(uuid("32684cb2-cedb-4956-afb4-240029990799"))
/* dual interface */ IFeatureClass;
struct __declspec(uuid("81389969-3aef-45a2-97d8-3cd6f6a7ca42"))
/* dual interface */ IObjectClass;
enum gviLockType;
struct __declspec(uuid("73368600-f42d-4a62-8fb2-dd55590805cc"))
/* dual interface */ ISubTypeInfo;
struct __declspec(uuid("e18180b5-bf6c-4d80-9ffb-2a4c8378f82d"))
/* dual interface */ IFieldDomainInfo;
struct __declspec(uuid("32c0c9b0-01c3-496d-94d4-ea089e48f030"))
/* dual interface */ IAttachmentManager;
struct __declspec(uuid("3009b1ee-55f1-4b2b-a0e4-10b6bf8eb132"))
/* dual interface */ IAttachment;
struct __declspec(uuid("4d9063d9-0384-4e2b-b1dc-4cff98fd41df"))
/* dual interface */ IAttachmentCollection;
struct __declspec(uuid("a348bd14-bcb8-4463-851f-0b4d1be378c6"))
/* dual interface */ ITemporalManager;
struct __declspec(uuid("39953d1e-587e-4209-9095-342df1770fd8"))
/* dual interface */ ITemporalFilter;
struct __declspec(uuid("72bdd153-cfc3-45fd-8469-7284a2284e92"))
/* dual interface */ ISpatialFilter;
enum gviSpatialRel;
struct __declspec(uuid("bbbda9ff-4724-41ef-a095-a7a5e9539e32"))
/* dual interface */ ITemporalCursor;
struct __declspec(uuid("1e10cf64-db1f-4c9a-a5e0-6fad478c0a9c"))
/* dual interface */ ITemporalInstanceCursor;
struct __declspec(uuid("7fc59b78-557b-40e2-b629-510c459b3601"))
/* dual interface */ ITemporalInstance;
struct __declspec(uuid("5ef45c7d-1ff9-4d3f-be1d-3eeba543400a"))
/* dual interface */ IIndexInfoCollection;
struct __declspec(uuid("ebeacdc2-89c2-4200-8a44-c7b0a0713125"))
/* dual interface */ IRenderIndexInfo;
enum gviRenderIndexRebuildType;
struct __declspec(uuid("36b1c881-da4c-4826-a1ff-2a1b81b48ee7"))
/* dual interface */ IGridIndexInfo;
struct __declspec(uuid("64dc91ae-bc1e-4061-9ad3-bc9ea0d37823"))
/* dual interface */ INetworkManager;
struct __declspec(uuid("ed90c380-26f2-489b-b069-ed17723958de"))
/* dual interface */ INetworkLoader;
struct __declspec(uuid("5e284da1-dcd2-497b-8072-c57161c78f57"))
/* dual interface */ INetworkAttribute;
enum gviNetworkAttributeUsageType;
enum gviNetworkElementType;
struct __declspec(uuid("e2f7439b-d3af-4dc6-afe5-649c7ae59700"))
/* dual interface */ INetworkEvaluator;
enum gviEvaluatorType;
struct __declspec(uuid("48903576-4333-48dc-b658-bd152ac7f2f8"))
/* dual interface */ INetworkSource;
enum gviEdgeDirection;
enum gviNetworkType;
enum gviNetworkElevationModel;
struct __declspec(uuid("d889e13b-7b83-4a1b-96fe-0b41ffcf9458"))
/* dual interface */ INetwork;
struct __declspec(uuid("bc47ecd5-069b-46ca-8824-740850bb447d"))
/* dual interface */ INetworkRouteSolver;
struct __declspec(uuid("0b88c079-0f3f-40da-8c33-3dfa472bba66"))
/* dual interface */ INetworkSolver;
struct __declspec(uuid("fdba4ed2-f2dd-474a-8540-26cf1c739008"))
/* dual interface */ INetworkBarrier;
enum gviNetworkBarrierType;
enum gviConstraintBarrierType;
struct __declspec(uuid("3659ede0-51e6-41b8-a88b-72e25fa6d021"))
/* dual interface */ INetworkLocation;
enum gviNetworkLocationType;
enum gviNetworkLocationOrderPolicy;
struct __declspec(uuid("6e683203-3d2c-4d9c-8932-f0965a871447"))
/* dual interface */ INetworkRoute;
struct __declspec(uuid("3929575f-abd1-4e07-8699-ea265ec641c5"))
/* dual interface */ INetworkRouteSegment;
struct __declspec(uuid("0a807521-53db-4e75-88df-a28cfdfb471f"))
/* dual interface */ INetworkElementCollection;
struct __declspec(uuid("2981a822-9053-497d-a282-01498e0f7fa4"))
/* dual interface */ INetworkElement;
struct __declspec(uuid("09b9f378-c108-4f2f-971e-c3e2cfb2915b"))
/* dual interface */ INetworkClosestFacilitySolver;
struct __declspec(uuid("6ff796f1-4aef-4fcf-a32a-55597fbbc9f9"))
/* dual interface */ INetworkEventLocation;
struct __declspec(uuid("2e5c4e48-4a26-4b7b-a8fb-ced74585e695"))
/* dual interface */ INetworkFindConnectedSolver;
struct __declspec(uuid("1eb2fd11-ce86-46cb-936d-ea990459fce8"))
/* dual interface */ INetworkTraceResult;
struct __declspec(uuid("0a3a2fa4-d83f-4027-b1fa-6e364b26462f"))
/* dual interface */ INetworkFindDisconnectedSolver;
struct __declspec(uuid("f7d54412-ae03-4a75-8f15-8f33ffe6ba17"))
/* dual interface */ INetworkFindAncestorsSolver;
struct __declspec(uuid("fdc2cdad-8ec0-4d6b-ac04-01208646bf9c"))
/* dual interface */ INetworkFindLoopsSolver;
struct __declspec(uuid("5321d037-d8e0-4006-8ab8-99b004ce0ca7"))
/* dual interface */ INetworkTraceUpstreamSolver;
struct __declspec(uuid("e629b2c3-9f3b-49c3-96ef-84ba481549ad"))
/* dual interface */ INetworkTraceDownstreamSolver;
struct __declspec(uuid("998a0d4d-aaa3-454b-b04c-f4fb3eebe639"))
/* dual interface */ ILogicalNetwork;
struct __declspec(uuid("ec1645c6-0f46-4efa-9e40-54e30e841e34"))
/* dual interface */ INetworkEdge;
struct __declspec(uuid("b3f9441b-e33a-448a-9dd7-b1769a942b42"))
/* dual interface */ INetworkJunction;
struct __declspec(uuid("aa1d1154-7472-40e8-becd-4904113c16fc"))
/* dual interface */ INetworkEdgeCollection;
enum gviFdbCapability;
struct __declspec(uuid("bdcc8142-7a33-437c-823d-b5f058fd2fa6"))
/* dual interface */ IQueryDef;
enum gviResultStoreLocation;
struct __declspec(uuid("ec46e0b7-7b37-4c5c-a5eb-810256341cf6"))
/* dual interface */ ISQLCheck;
enum gviNameType;
struct __declspec(uuid("25faa6e0-e390-47a8-8ff0-2daafbdc5fc0"))
/* dual interface */ IConflict;
struct __declspec(uuid("4eac5e54-613d-4d3c-b3a2-3f7292604975"))
/* dual interface */ IFeatureProgress;
enum gviReplicateOperation;
struct __declspec(uuid("cd3e23c3-3abc-4a9d-bae0-ee3f090efb55"))
/* dual interface */ IEnumResName;
struct __declspec(uuid("4a24b3e4-9c37-4fc6-8994-97b9239d7768"))
/* dual interface */ IJunctionNetworkSource;
enum gviNetworkJunctionConnectivityPolicy;
struct __declspec(uuid("51f3dd52-b3a4-4b31-ad72-9f267a150afa"))
/* dual interface */ IEdgeNetworkSource;
enum gviNetworkEdgeConnectivityPolicy;
struct __declspec(uuid("660b46e3-a093-4559-b010-d1365a8c446b"))
/* dual interface */ INetworkFieldEvaluator;
struct __declspec(uuid("4c998110-9812-4018-a14e-0f48d99571f3"))
/* dual interface */ INetworkConstantEvaluator;
struct __declspec(uuid("5e63edc4-21f4-4891-87d4-8274fa5ea027"))
/* dual interface */ INetworkScriptEvaluator;
enum gviConflictDetectedType;
enum gviReplicationType;
enum gviModelLODType;
enum gviNetworkSide;
struct __declspec(uuid("c8906e80-db1e-42d0-b2c9-a28a7ea06dc6"))
/* interface */ IResourceManager;
struct __declspec(uuid("16bcd644-c298-4614-980e-f7b51cad0c59"))
/* dual interface */ IDataSourceFactory;
struct __declspec(uuid("01dd46f1-ba42-408d-a608-9de78bb1ef62"))
/* dual interface */ IReplication;
struct __declspec(uuid("b26aa204-533b-4f65-a74b-0ac23224ba0d"))
/* dual interface */ ICheckOut;
struct __declspec(uuid("770404f1-ffb0-40c7-9581-0bf4dcb54c00"))
/* dual interface */ ICheckIn;
struct __declspec(uuid("d8dac21f-479b-449a-a645-c994b9533cff"))
/* dual interface */ ICodedValueDomain;
struct __declspec(uuid("0d333027-da10-4e9a-8543-1e5f55e09ea6"))
/* dual interface */ IReplicationFactory;
struct __declspec(uuid("88e27f7a-6deb-4eca-aa3c-3c00029d9e53"))
/* dual interface */ IRangeDomain;
struct __declspec(uuid("32bcbd6c-94be-4320-b1e4-6778f8995db4"))
/* dual interface */ IRowBufferFactory;
struct __declspec(uuid("6da243af-1ff2-481a-87f5-e1a526472da3"))
/* dual interface */ IDomainFactory;
struct __declspec(uuid("085d6e5a-ec09-4366-95e3-74f133dcb9c6"))
/* dual interface */ IDataSourcePluginManager;
struct __declspec(uuid("b5e5963b-d058-4969-a776-2d535eac0c2f"))
/* dual interface */ IEdgeBarrier;
struct __declspec(uuid("87acb484-cb31-426e-9cd4-d36228407ef0"))
/* dual interface */ IJunctionBarrier;
struct __declspec(uuid("c18b6255-8c4d-4b50-a104-8493ac3275d3"))
/* dual interface */ ITools;
struct /* coclass */ ConnectionInfo;
struct /* coclass */ DataSourceFactory;
struct /* coclass */ FieldInfo;
struct /* coclass */ GeometryDef;
struct /* coclass */ FieldInfoCollection;
struct /* coclass */ DbIndexInfo;
struct /* coclass */ GridIndexInfo;
struct /* coclass */ QueryFilter;
struct /* coclass */ Conflict;
struct /* coclass */ CodedValueDomain;
struct /* coclass */ ReplicationFactory;
struct /* coclass */ RowBufferCollection;
struct /* coclass */ SpatialFilter;
struct /* coclass */ RangeDomain;
struct /* coclass */ RowBufferFactory;
struct /* coclass */ DomainFactory;
struct /* coclass */ RenderIndexInfo;
struct /* coclass */ FeatureClass;
struct /* coclass */ Replication;
struct /* coclass */ CheckOut;
struct /* coclass */ CheckIn;
struct /* coclass */ FeatureProgress;
struct /* coclass */ FdeCursor;
struct /* coclass */ SubTypeInfo;
struct /* coclass */ FieldDomainInfo;
struct /* coclass */ IndexInfoCollection;
struct /* coclass */ EnumResName;
struct /* coclass */ Attachment;
struct /* coclass */ AttachmentCollection;
struct /* coclass */ TemporalFilter;
struct /* coclass */ TemporalInstance;
struct /* coclass */ DataSourcePluginManager;
struct /* coclass */ NetworkAttribute;
struct /* coclass */ JunctionNetworkSource;
struct /* coclass */ EdgeNetworkSource;
struct /* coclass */ NetworkFieldEvaluator;
struct /* coclass */ NetworkConstantEvaluator;
struct /* coclass */ NetworkLocation;
struct /* coclass */ NetworkEventLocation;
struct /* coclass */ NetworkScriptEvaluator;
struct /* coclass */ NetworkEdge;
struct /* coclass */ NetworkJunction;
struct /* coclass */ NetworkElementCollection;
struct /* coclass */ NetworkEdgeCollection;
struct /* coclass */ LogicalNetwork;
struct /* coclass */ EdgeBarrier;
struct /* coclass */ JunctionBarrier;
struct /* coclass */ Tools;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IDomain, __uuidof(IDomain));
_COM_SMARTPTR_TYPEDEF(IGeometryDef, __uuidof(IGeometryDef));
_COM_SMARTPTR_TYPEDEF(IFieldInfo, __uuidof(IFieldInfo));
_COM_SMARTPTR_TYPEDEF(IFieldInfoCollection, __uuidof(IFieldInfoCollection));
_COM_SMARTPTR_TYPEDEF(IIndexInfo, __uuidof(IIndexInfo));
_COM_SMARTPTR_TYPEDEF(IDbIndexInfo, __uuidof(IDbIndexInfo));
_COM_SMARTPTR_TYPEDEF(IDbIndexInfoCollection, __uuidof(IDbIndexInfoCollection));
_COM_SMARTPTR_TYPEDEF(IRowBuffer, __uuidof(IRowBuffer));
_COM_SMARTPTR_TYPEDEF(IQueryFilter, __uuidof(IQueryFilter));
_COM_SMARTPTR_TYPEDEF(IFdeCursor, __uuidof(IFdeCursor));
_COM_SMARTPTR_TYPEDEF(IRowBufferCollection, __uuidof(IRowBufferCollection));
_COM_SMARTPTR_TYPEDEF(IConnectionInfo, __uuidof(IConnectionInfo));
_COM_SMARTPTR_TYPEDEF(IFieldDomainInfo, __uuidof(IFieldDomainInfo));
_COM_SMARTPTR_TYPEDEF(ISubTypeInfo, __uuidof(ISubTypeInfo));
_COM_SMARTPTR_TYPEDEF(IAttachment, __uuidof(IAttachment));
_COM_SMARTPTR_TYPEDEF(IAttachmentCollection, __uuidof(IAttachmentCollection));
_COM_SMARTPTR_TYPEDEF(IAttachmentManager, __uuidof(IAttachmentManager));
_COM_SMARTPTR_TYPEDEF(ISpatialFilter, __uuidof(ISpatialFilter));
_COM_SMARTPTR_TYPEDEF(ITemporalFilter, __uuidof(ITemporalFilter));
_COM_SMARTPTR_TYPEDEF(ITemporalInstance, __uuidof(ITemporalInstance));
_COM_SMARTPTR_TYPEDEF(ITemporalInstanceCursor, __uuidof(ITemporalInstanceCursor));
_COM_SMARTPTR_TYPEDEF(ITemporalCursor, __uuidof(ITemporalCursor));
_COM_SMARTPTR_TYPEDEF(ITemporalManager, __uuidof(ITemporalManager));
_COM_SMARTPTR_TYPEDEF(IIndexInfoCollection, __uuidof(IIndexInfoCollection));
_COM_SMARTPTR_TYPEDEF(IRenderIndexInfo, __uuidof(IRenderIndexInfo));
_COM_SMARTPTR_TYPEDEF(IGridIndexInfo, __uuidof(IGridIndexInfo));
_COM_SMARTPTR_TYPEDEF(INetworkEvaluator, __uuidof(INetworkEvaluator));
_COM_SMARTPTR_TYPEDEF(INetworkSource, __uuidof(INetworkSource));
_COM_SMARTPTR_TYPEDEF(INetworkAttribute, __uuidof(INetworkAttribute));
_COM_SMARTPTR_TYPEDEF(INetworkLoader, __uuidof(INetworkLoader));
_COM_SMARTPTR_TYPEDEF(INetworkBarrier, __uuidof(INetworkBarrier));
_COM_SMARTPTR_TYPEDEF(INetworkLocation, __uuidof(INetworkLocation));
_COM_SMARTPTR_TYPEDEF(INetworkSolver, __uuidof(INetworkSolver));
_COM_SMARTPTR_TYPEDEF(INetworkElement, __uuidof(INetworkElement));
_COM_SMARTPTR_TYPEDEF(INetworkElementCollection, __uuidof(INetworkElementCollection));
_COM_SMARTPTR_TYPEDEF(INetworkRouteSegment, __uuidof(INetworkRouteSegment));
_COM_SMARTPTR_TYPEDEF(INetworkRoute, __uuidof(INetworkRoute));
_COM_SMARTPTR_TYPEDEF(INetworkRouteSolver, __uuidof(INetworkRouteSolver));
_COM_SMARTPTR_TYPEDEF(INetworkEventLocation, __uuidof(INetworkEventLocation));
_COM_SMARTPTR_TYPEDEF(INetworkTraceResult, __uuidof(INetworkTraceResult));
_COM_SMARTPTR_TYPEDEF(INetworkFindConnectedSolver, __uuidof(INetworkFindConnectedSolver));
_COM_SMARTPTR_TYPEDEF(INetworkFindDisconnectedSolver, __uuidof(INetworkFindDisconnectedSolver));
_COM_SMARTPTR_TYPEDEF(INetworkFindAncestorsSolver, __uuidof(INetworkFindAncestorsSolver));
_COM_SMARTPTR_TYPEDEF(INetworkFindLoopsSolver, __uuidof(INetworkFindLoopsSolver));
_COM_SMARTPTR_TYPEDEF(INetworkTraceUpstreamSolver, __uuidof(INetworkTraceUpstreamSolver));
_COM_SMARTPTR_TYPEDEF(INetworkTraceDownstreamSolver, __uuidof(INetworkTraceDownstreamSolver));
_COM_SMARTPTR_TYPEDEF(IQueryDef, __uuidof(IQueryDef));
_COM_SMARTPTR_TYPEDEF(ISQLCheck, __uuidof(ISQLCheck));
_COM_SMARTPTR_TYPEDEF(IConflict, __uuidof(IConflict));
_COM_SMARTPTR_TYPEDEF(IFeatureProgress, __uuidof(IFeatureProgress));
_COM_SMARTPTR_TYPEDEF(IEnumResName, __uuidof(IEnumResName));
_COM_SMARTPTR_TYPEDEF(IJunctionNetworkSource, __uuidof(IJunctionNetworkSource));
_COM_SMARTPTR_TYPEDEF(IEdgeNetworkSource, __uuidof(IEdgeNetworkSource));
_COM_SMARTPTR_TYPEDEF(INetworkFieldEvaluator, __uuidof(INetworkFieldEvaluator));
_COM_SMARTPTR_TYPEDEF(INetworkConstantEvaluator, __uuidof(INetworkConstantEvaluator));
_COM_SMARTPTR_TYPEDEF(INetworkScriptEvaluator, __uuidof(INetworkScriptEvaluator));
_COM_SMARTPTR_TYPEDEF(IResourceManager, __uuidof(IResourceManager));
_COM_SMARTPTR_TYPEDEF(ICodedValueDomain, __uuidof(ICodedValueDomain));
_COM_SMARTPTR_TYPEDEF(IRangeDomain, __uuidof(IRangeDomain));
_COM_SMARTPTR_TYPEDEF(IRowBufferFactory, __uuidof(IRowBufferFactory));
_COM_SMARTPTR_TYPEDEF(IDomainFactory, __uuidof(IDomainFactory));
_COM_SMARTPTR_TYPEDEF(IDataSourcePluginManager, __uuidof(IDataSourcePluginManager));
_COM_SMARTPTR_TYPEDEF(IEdgeBarrier, __uuidof(IEdgeBarrier));
_COM_SMARTPTR_TYPEDEF(IJunctionBarrier, __uuidof(IJunctionBarrier));
_COM_SMARTPTR_TYPEDEF(ITable, __uuidof(ITable));
_COM_SMARTPTR_TYPEDEF(IDataSource, __uuidof(IDataSource));
_COM_SMARTPTR_TYPEDEF(IDataSourceFactory, __uuidof(IDataSourceFactory));
_COM_SMARTPTR_TYPEDEF(IFeatureDataSet, __uuidof(IFeatureDataSet));
_COM_SMARTPTR_TYPEDEF(IObjectClass, __uuidof(IObjectClass));
_COM_SMARTPTR_TYPEDEF(IFeatureClass, __uuidof(IFeatureClass));
_COM_SMARTPTR_TYPEDEF(INetworkClosestFacilitySolver, __uuidof(INetworkClosestFacilitySolver));
_COM_SMARTPTR_TYPEDEF(IReplication, __uuidof(IReplication));
_COM_SMARTPTR_TYPEDEF(ICheckOut, __uuidof(ICheckOut));
_COM_SMARTPTR_TYPEDEF(ICheckIn, __uuidof(ICheckIn));
_COM_SMARTPTR_TYPEDEF(IReplicationFactory, __uuidof(IReplicationFactory));
_COM_SMARTPTR_TYPEDEF(ITools, __uuidof(ITools));
_COM_SMARTPTR_TYPEDEF(INetworkManager, __uuidof(INetworkManager));
_COM_SMARTPTR_TYPEDEF(INetwork, __uuidof(INetwork));
_COM_SMARTPTR_TYPEDEF(ILogicalNetwork, __uuidof(ILogicalNetwork));
_COM_SMARTPTR_TYPEDEF(INetworkEdge, __uuidof(INetworkEdge));
_COM_SMARTPTR_TYPEDEF(INetworkEdgeCollection, __uuidof(INetworkEdgeCollection));
_COM_SMARTPTR_TYPEDEF(INetworkJunction, __uuidof(INetworkJunction));

//
// Type library items
//

enum gviFieldType
{
    gviFieldUnknown = 0,
    gviFieldInt16 = 2,
    gviFieldInt32 = 3,
    gviFieldInt64 = 4,
    gviFieldFloat = 5,
    gviFieldDouble = 6,
    gviFieldString = 7,
    gviFieldDate = 8,
    gviFieldBlob = 9,
    gviFieldFID = 10,
    gviFieldUUID = 11,
    gviFieldGeometry = 99
};

enum gviDomainType
{
    gviDomainRange = 0,
    gviDomainCodedValue = 1
};

struct __declspec(uuid("cebc7d62-06f0-4642-8927-8e7d6a49e4ca"))
IDomain : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDomainType))
    enum gviDomainType DomainType;
    __declspec(property(get=GetOwner,put=PutOwner))
    _bstr_t Owner;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetFieldType))
    enum gviFieldType FieldType;
    __declspec(property(get=GetCustomData,put=PutCustomData))
    IPropertySetPtr CustomData;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    enum gviDomainType GetDomainType ( );
    _bstr_t GetOwner ( );
    void PutOwner (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    HRESULT IsMemberOf (
        const _variant_t & Value,
        VARIANT_BOOL * pVal );
    IDomainPtr Clone ( );
    enum gviFieldType GetFieldType ( );
    IPropertySetPtr GetCustomData ( );
    void PutCustomData (
        struct IPropertySet * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DomainType (
        /*[out,retval]*/ enum gviDomainType * pVal ) = 0;
      virtual HRESULT __stdcall get_Owner (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Owner (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_IsMemberOf (
        VARIANT Value,
        VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IDomain * * pVal ) = 0;
      virtual HRESULT __stdcall get_FieldType (
        /*[out,retval]*/ enum gviFieldType * pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomData (
        /*[in]*/ struct IPropertySet * pVal ) = 0;
};

enum gviGeometryColumnType
{
    gviGeometryColumnUnknown = -1,
    gviGeometryColumnPoint = 0,
    gviGeometryColumnModelPoint = 1,
    gviGeometryColumnPOI = 2,
    gviGeometryColumnMultiPoint = 3,
    gviGeometryColumnPolyline = 4,
    gviGeometryColumnPolygon = 5,
    gviGeometryColumnTriMesh = 7,
    gviGeometryColumnPointCloud = 8,
    gviGeometryColumnCollection = 9
};

struct __declspec(uuid("88c4cb4f-a365-4f49-bc32-a868fb943bdc"))
IGeometryDef : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvgNumPoints))
    long AvgNumPoints;
    __declspec(property(get=GetGeometryColumnType,put=PutGeometryColumnType))
    enum gviGeometryColumnType GeometryColumnType;
    __declspec(property(get=GetHasM,put=PutHasM))
    VARIANT_BOOL HasM;
    __declspec(property(get=GetHasZ,put=PutHasZ))
    VARIANT_BOOL HasZ;
    __declspec(property(get=GetEnvelope))
    IEnvelopePtr Envelope;
    __declspec(property(get=GetMaxM,put=PutMaxM))
    double MaxM;
    __declspec(property(get=GetMinM,put=PutMinM))
    double MinM;
    __declspec(property(get=GetHasSpatialIndex))
    VARIANT_BOOL HasSpatialIndex;
    __declspec(property(get=GetHasRenderIndex))
    VARIANT_BOOL HasRenderIndex;
    __declspec(property(get=GetHasId,put=PutHasId))
    VARIANT_BOOL HasId;
    __declspec(property(get=GetVertexAttribute))
    enum gviVertexAttribute VertexAttribute;

    //
    // Wrapper methods for error-handling
    //

    IGeometryDefPtr Clone ( );
    long GetAvgNumPoints ( );
    enum gviGeometryColumnType GetGeometryColumnType ( );
    void PutGeometryColumnType (
        enum gviGeometryColumnType pVal );
    VARIANT_BOOL GetHasM ( );
    void PutHasM (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHasZ ( );
    void PutHasZ (
        VARIANT_BOOL pVal );
    IEnvelopePtr GetEnvelope ( );
    double GetMaxM ( );
    void PutMaxM (
        double pVal );
    double GetMinM ( );
    void PutMinM (
        double pVal );
    VARIANT_BOOL GetHasSpatialIndex ( );
    VARIANT_BOOL GetHasRenderIndex ( );
    VARIANT_BOOL GetHasId ( );
    void PutHasId (
        VARIANT_BOOL pVal );
    enum gviVertexAttribute GetVertexAttribute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IGeometryDef * * pVal ) = 0;
      virtual HRESULT __stdcall get_AvgNumPoints (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_GeometryColumnType (
        /*[out,retval]*/ enum gviGeometryColumnType * pVal ) = 0;
      virtual HRESULT __stdcall put_GeometryColumnType (
        /*[in]*/ enum gviGeometryColumnType pVal ) = 0;
      virtual HRESULT __stdcall get_HasM (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasM (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HasZ (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasZ (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Envelope (
        /*[out,retval]*/ struct IEnvelope * * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxM (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxM (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinM (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinM (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HasSpatialIndex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasRenderIndex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasId (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasId (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VertexAttribute (
        /*[out,retval]*/ enum gviVertexAttribute * pVal ) = 0;
};

struct __declspec(uuid("b7da87f9-8932-445c-b7c9-debe209a0741"))
IFieldInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAlias,put=PutAlias))
    _bstr_t Alias;
    __declspec(property(get=GetFieldType,put=PutFieldType))
    enum gviFieldType FieldType;
    __declspec(property(get=GetDefaultValue,put=PutDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetDomain,put=PutDomain))
    IDomainPtr Domain;
    __declspec(property(get=GetDomainFixed))
    VARIANT_BOOL DomainFixed;
    __declspec(property(get=GetEditable,put=PutEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetNullable,put=PutNullable))
    VARIANT_BOOL Nullable;
    __declspec(property(get=GetLength,put=PutLength))
    long Length;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    long Precision;
    __declspec(property(get=GetScale,put=PutScale))
    long Scale;
    __declspec(property(get=GetGeometryDef,put=PutGeometryDef))
    IGeometryDefPtr GeometryDef;
    __declspec(property(get=GetRegisteredRenderIndex,put=PutRegisteredRenderIndex))
    VARIANT_BOOL RegisteredRenderIndex;
    __declspec(property(get=GetIsSystemField))
    VARIANT_BOOL IsSystemField;
    __declspec(property(get=GetSupportRenderField))
    VARIANT_BOOL SupportRenderField;
    __declspec(property(get=GetRequired,put=PutRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetCustomData,put=PutCustomData))
    IPropertySetPtr CustomData;

    //
    // Wrapper methods for error-handling
    //

    IFieldInfoPtr Clone ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetAlias ( );
    void PutAlias (
        _bstr_t pVal );
    enum gviFieldType GetFieldType ( );
    void PutFieldType (
        enum gviFieldType pVal );
    _variant_t GetDefaultValue ( );
    void PutDefaultValue (
        const _variant_t & pVal );
    IDomainPtr GetDomain ( );
    void PutDomain (
        struct IDomain * pVal );
    VARIANT_BOOL GetDomainFixed ( );
    VARIANT_BOOL GetEditable ( );
    void PutEditable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetNullable ( );
    void PutNullable (
        VARIANT_BOOL pVal );
    long GetLength ( );
    void PutLength (
        long pVal );
    long GetPrecision ( );
    void PutPrecision (
        long pVal );
    long GetScale ( );
    void PutScale (
        long pVal );
    IGeometryDefPtr GetGeometryDef ( );
    void PutGeometryDef (
        struct IGeometryDef * pVal );
    VARIANT_BOOL GetRegisteredRenderIndex ( );
    void PutRegisteredRenderIndex (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsSystemField ( );
    VARIANT_BOOL Equal (
        struct IFieldInfo * Other );
    VARIANT_BOOL GetSupportRenderField ( );
    VARIANT_BOOL GetRequired ( );
    void PutRequired (
        VARIANT_BOOL pVal );
    IPropertySetPtr GetCustomData ( );
    void PutCustomData (
        struct IPropertySet * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IFieldInfo * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alias (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alias (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FieldType (
        /*[out,retval]*/ enum gviFieldType * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldType (
        /*[in]*/ enum gviFieldType pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Domain (
        /*[out,retval]*/ struct IDomain * * pVal ) = 0;
      virtual HRESULT __stdcall put_Domain (
        /*[in]*/ struct IDomain * pVal ) = 0;
      virtual HRESULT __stdcall get_DomainFixed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Nullable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Nullable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_GeometryDef (
        /*[out,retval]*/ struct IGeometryDef * * pVal ) = 0;
      virtual HRESULT __stdcall put_GeometryDef (
        /*[in]*/ struct IGeometryDef * pVal ) = 0;
      virtual HRESULT __stdcall get_RegisteredRenderIndex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RegisteredRenderIndex (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsSystemField (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Equal (
        struct IFieldInfo * Other,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SupportRenderField (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Required (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomData (
        /*[in]*/ struct IPropertySet * pVal ) = 0;
};

struct __declspec(uuid("6c8db5b9-1444-4c2a-b458-e2dd17697a82"))
IFieldInfoCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    IFieldInfoCollectionPtr Clone ( );
    IFieldInfoPtr Get (
        long Index );
    HRESULT Set (
        long Index,
        struct IFieldInfo * Value );
    HRESULT Clear ( );
    VARIANT_BOOL GetIsEmpty ( );
    HRESULT Add (
        struct IFieldInfo * newVal );
    long GetCount ( );
    HRESULT TrimToSize ( );
    long IndexOf (
        _bstr_t Name );
    HRESULT RemoveAt (
        long Index );
    HRESULT Insert (
        long Index,
        struct IFieldInfo * newVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IFieldInfoCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        long Index,
        /*[out,retval]*/ struct IFieldInfo * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        long Index,
        struct IFieldInfo * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        struct IFieldInfo * newVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_TrimToSize ( ) = 0;
      virtual HRESULT __stdcall raw_IndexOf (
        BSTR Name,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        long Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        long Index,
        struct IFieldInfo * newVal ) = 0;
};

enum gviIndexType
{
    gviIndexRdbms = 0,
    gviIndexGrid = 3,
    gviIndexRender = 4
};

struct __declspec(uuid("246934d8-cfb1-43d9-abc1-a8b512ef5421"))
IIndexInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetIndexType))
    enum gviIndexType IndexType;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    enum gviIndexType GetIndexType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_IndexType (
        /*[out,retval]*/ enum gviIndexType * pVal ) = 0;
};

struct __declspec(uuid("bfea4b1f-4494-4d29-8b65-2dcf98df34d4"))
IDbIndexInfo : IIndexInfo
{
    //
    // Property data
    //

    __declspec(property(get=GetUnique,put=PutUnique))
    VARIANT_BOOL Unique;
    __declspec(property(get=GetFieldCount))
    long FieldCount;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUnique ( );
    void PutUnique (
        VARIANT_BOOL pVal );
    long GetFieldCount ( );
    _bstr_t GetFieldName (
        long Position );
    VARIANT_BOOL GetFieldAscending (
        long Position );
    VARIANT_BOOL AppendFieldDefine (
        _bstr_t Field,
        VARIANT_BOOL SortAsc );
    HRESULT SetSortAsc (
        _bstr_t Field,
        VARIANT_BOOL SortAsc );
    HRESULT DeleteFieldDefine (
        _bstr_t Field );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Unique (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Unique (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FieldCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFieldName (
        long Position,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFieldAscending (
        long Position,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AppendFieldDefine (
        BSTR Field,
        VARIANT_BOOL SortAsc,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSortAsc (
        BSTR Field,
        VARIANT_BOOL SortAsc ) = 0;
      virtual HRESULT __stdcall raw_DeleteFieldDefine (
        BSTR Field ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("834046c1-e133-49c0-b804-f8ac289d4ef2"))
IDbIndexInfoCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDbIndexInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDbIndexInfoPtr GetItem (
        long n );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long n,
        /*[out,retval]*/ struct IDbIndexInfo * * pVal ) = 0;
};

enum gviDataSetType
{
    gviDataSetAny = 0,
    gviDataSetDbmsTable = 1,
    gviDataSetObjectClassTable = 2,
    gviDataSetFeatureClassTable = 3
};

struct __declspec(uuid("63b3a500-737b-4f70-83a6-71507d046d37"))
IRowBuffer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetFields))
    IFieldInfoCollectionPtr Fields;
    __declspec(property(get=GetFieldCount))
    long FieldCount;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    IFieldInfoCollectionPtr GetFields ( );
    long FieldIndex (
        _bstr_t FieldName );
    HRESULT SetNull (
        long Position );
    VARIANT_BOOL IsNull (
        long Position );
    long GetFieldCount ( );
    IRowBufferPtr Clone (
        VARIANT_BOOL CloneIsChangedFlag );
    HRESULT CopyTo (
        struct IRowBuffer * Other,
        VARIANT_BOOL CloneIsChangedFlag );
    VARIANT_BOOL IsChanged (
        long Position );
    _variant_t GetValue (
        long Position );
    HRESULT SetValue (
        long Position,
        const _variant_t & newVal );
    _variant_t InternalGetValue (
        long ValueType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct IFieldInfoCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_FieldIndex (
        BSTR FieldName,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetNull (
        long Position ) = 0;
      virtual HRESULT __stdcall raw_IsNull (
        long Position,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_FieldCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        VARIANT_BOOL CloneIsChangedFlag,
        /*[out,retval]*/ struct IRowBuffer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyTo (
        struct IRowBuffer * Other,
        VARIANT_BOOL CloneIsChangedFlag ) = 0;
      virtual HRESULT __stdcall raw_IsChanged (
        long Position,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        long Position,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        long Position,
        VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_InternalGetValue (
        long ValueType,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

enum gviFilterType
{
    gviFilterAttributeOnly = 1,
    gviFilterWithSpatial = 2,
    gviFilterWithTemporal = 3
};

struct __declspec(uuid("73dbbd1a-7ea6-48f9-864c-d236692cc5cc"))
IQueryFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetSubFields,put=PutSubFields))
    _bstr_t SubFields;
    __declspec(property(get=GetWhereClause,put=PutWhereClause))
    _bstr_t WhereClause;
    __declspec(property(get=GetPostfixClause,put=PutPostfixClause))
    _bstr_t PostfixClause;
    __declspec(property(get=GetResultBeginIndex,put=PutResultBeginIndex))
    long ResultBeginIndex;
    __declspec(property(get=GetResultLimit,put=PutResultLimit))
    long ResultLimit;
    __declspec(property(get=GetTables,put=PutTables))
    _bstr_t Tables;
    __declspec(property(get=GetPrefixClause,put=PutPrefixClause))
    _bstr_t PrefixClause;
    __declspec(property(get=GetIdsFilter,put=PutIdsFilter))
    SAFEARRAY * IdsFilter;
    __declspec(property(get=GetFilterType))
    enum gviFilterType FilterType;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    _bstr_t GetSubFields ( );
    void PutSubFields (
        _bstr_t pVal );
    HRESULT AddSubField (
        _bstr_t SubField );
    _bstr_t GetWhereClause ( );
    void PutWhereClause (
        _bstr_t pVal );
    _bstr_t GetPostfixClause ( );
    void PutPostfixClause (
        _bstr_t pVal );
    long GetResultBeginIndex ( );
    void PutResultBeginIndex (
        long pVal );
    long GetResultLimit ( );
    void PutResultLimit (
        long pVal );
    _bstr_t GetTables ( );
    void PutTables (
        _bstr_t pVal );
    _bstr_t GetPrefixClause ( );
    void PutPrefixClause (
        _bstr_t pVal );
    SAFEARRAY * GetIdsFilter ( );
    void PutIdsFilter (
        SAFEARRAY * pVal );
    enum gviFilterType GetFilterType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_SubFields (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SubFields (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AddSubField (
        BSTR SubField ) = 0;
      virtual HRESULT __stdcall get_WhereClause (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_WhereClause (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PostfixClause (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PostfixClause (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ResultBeginIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultBeginIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResultLimit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResultLimit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Tables (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Tables (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrefixClause (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrefixClause (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IdsFilter (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall put_IdsFilter (
        /*[in]*/ SAFEARRAY * pVal ) = 0;
      virtual HRESULT __stdcall get_FilterType (
        /*[out,retval]*/ enum gviFilterType * pVal ) = 0;
};

struct __declspec(uuid("d74fbd58-8347-45f3-a6f7-31f2e5e358fb"))
IFdeCursor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetLastInsertId))
    long LastInsertId;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    IFieldInfoCollectionPtr GetFields ( );
    IRowBufferPtr NextRow ( );
    HRESULT InsertRow (
        struct IRowBuffer * RowBuffer );
    HRESULT UpdateRow (
        struct IRowBuffer * Row );
    HRESULT DeleteRow ( );
    HRESULT Flush ( );
    long FindField (
        _bstr_t FieldName );
    long GetLastInsertId ( );
    HRESULT Close ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFields (
        /*[out,retval]*/ struct IFieldInfoCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_NextRow (
        /*[out,retval]*/ struct IRowBuffer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertRow (
        struct IRowBuffer * RowBuffer ) = 0;
      virtual HRESULT __stdcall raw_UpdateRow (
        struct IRowBuffer * Row ) = 0;
      virtual HRESULT __stdcall raw_DeleteRow ( ) = 0;
      virtual HRESULT __stdcall raw_Flush ( ) = 0;
      virtual HRESULT __stdcall raw_FindField (
        BSTR FieldName,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LastInsertId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
};

struct __declspec(uuid("73649ebb-a817-4916-b3a7-4ea6a79ba71e"))
IRowBufferCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    IRowBufferPtr Get (
        long Index );
    HRESULT Set (
        long Index,
        struct IRowBuffer * Value );
    HRESULT Clear ( );
    VARIANT_BOOL GetIsEmpty ( );
    HRESULT Add (
        struct IRowBuffer * Value );
    long GetCount ( );
    HRESULT TrimToSize ( );
    HRESULT RemoveAt (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        long Index,
        /*[out,retval]*/ struct IRowBuffer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        long Index,
        struct IRowBuffer * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        struct IRowBuffer * Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_TrimToSize ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        long Index ) = 0;
};

enum gviConnectionType
{
    gviConnectionUnknown = 0,
    gviConnectionMySql5x = 2,
    gviConnectionFireBird2x = 3,
    gviConnectionOCI11 = 4,
    gviConnectionPg9 = 5,
    gviConnectionMSClient = 6,
    gviConnectionSQLite3 = 10,
    gviConnectionShapeFile = 12,
    gviConnectionArcGISServer10 = 13,
    gviConnectionArcSDE9x = 14,
    gviConnectionArcSDE10x = 15,
    gviConnectionWFS = 16,
    gviConnectionKingBase7 = 17,
    gviConnectionCms7Http = 101,
    gviConnectionCms7Https = 102,
    gviConnectionPlugin = 999
};

struct __declspec(uuid("9c008b24-f1e3-4f35-be0d-3b2b47d374b3"))
IConnectionInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProviderName))
    _bstr_t ProviderName;
    __declspec(property(get=GetConnectionType,put=PutConnectionType))
    enum gviConnectionType ConnectionType;
    __declspec(property(get=GetServer,put=PutServer))
    _bstr_t Server;
    __declspec(property(get=GetPort,put=PutPort))
    unsigned long Port;
    __declspec(property(get=GetInstance,put=PutInstance))
    _bstr_t Instance;
    __declspec(property(get=GetDatabase,put=PutDatabase))
    _bstr_t Database;
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetVersion,put=PutVersion))
    _bstr_t Version;
    __declspec(property(get=GetTimeout,put=PutTimeout))
    long Timeout;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t ToConnectionString ( );
    VARIANT_BOOL FromConnectionString (
        _bstr_t ConnectionString );
    _bstr_t GetProviderName ( );
    enum gviConnectionType GetConnectionType ( );
    void PutConnectionType (
        enum gviConnectionType pVal );
    _bstr_t GetServer ( );
    void PutServer (
        _bstr_t pVal );
    unsigned long GetPort ( );
    void PutPort (
        unsigned long pVal );
    _bstr_t GetInstance ( );
    void PutInstance (
        _bstr_t pVal );
    _bstr_t GetDatabase ( );
    void PutDatabase (
        _bstr_t pVal );
    _bstr_t GetUserName ( );
    void PutUserName (
        _bstr_t pVal );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t pVal );
    _bstr_t GetVersion ( );
    void PutVersion (
        _bstr_t pVal );
    long GetTimeout ( );
    void PutTimeout (
        long pVal );
    HRESULT SetProperty (
        _bstr_t Key,
        const _variant_t & Value );
    _variant_t GetProperty (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ToConnectionString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromConnectionString (
        BSTR ConnectionString,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ProviderName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionType (
        /*[out,retval]*/ enum gviConnectionType * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectionType (
        /*[in]*/ enum gviConnectionType pVal ) = 0;
      virtual HRESULT __stdcall get_Server (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Server (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall put_Port (
        /*[in]*/ unsigned long pVal ) = 0;
      virtual HRESULT __stdcall get_Instance (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Instance (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Database (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Database (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Version (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Timeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Timeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        BSTR Key,
        VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        BSTR Name,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

enum gviLockType
{
    gviLockSharedSchemaReadonly = 0,
    gviLockSharedSchema = 1,
    gviLockExclusiveSchema = 2
};

struct __declspec(uuid("e18180b5-bf6c-4d80-9ffb-2a4c8378f82d"))
IFieldDomainInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldName,put=PutFieldName))
    _bstr_t FieldName;
    __declspec(property(get=GetDefaultValue,put=PutDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetDomain,put=PutDomain))
    IDomainPtr Domain;
    __declspec(property(get=GetInherited,put=PutInherited))
    VARIANT_BOOL Inherited;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFieldName ( );
    void PutFieldName (
        _bstr_t pVal );
    _variant_t GetDefaultValue ( );
    void PutDefaultValue (
        const _variant_t & pVal );
    IDomainPtr GetDomain ( );
    void PutDomain (
        struct IDomain * pVal );
    VARIANT_BOOL GetInherited ( );
    void PutInherited (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Domain (
        /*[out,retval]*/ struct IDomain * * pVal ) = 0;
      virtual HRESULT __stdcall put_Domain (
        /*[in]*/ struct IDomain * pVal ) = 0;
      virtual HRESULT __stdcall get_Inherited (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherited (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("73368600-f42d-4a62-8fb2-dd55590805cc"))
ISubTypeInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCode,put=PutCode))
    long Code;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetFieldDomainInfoCount))
    long FieldDomainInfoCount;

    //
    // Wrapper methods for error-handling
    //

    long GetCode ( );
    void PutCode (
        long pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IFieldDomainInfoPtr GetFieldDomainInfo (
        long Index );
    HRESULT AddFieldDomainInfo (
        struct IFieldDomainInfo * newVal );
    long GetFieldDomainInfoCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Code (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Code (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFieldDomainInfo (
        long Index,
        /*[out,retval]*/ struct IFieldDomainInfo * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddFieldDomainInfo (
        /*[in]*/ struct IFieldDomainInfo * newVal ) = 0;
      virtual HRESULT __stdcall get_FieldDomainInfoCount (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("3009b1ee-55f1-4b2b-a0e4-10b6bf8eb132"))
IAttachment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetFeatureId,put=PutFeatureId))
    long FeatureId;
    __declspec(property(get=GetMimeType,put=PutMimeType))
    _bstr_t MimeType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetData,put=PutData))
    IBinaryBufferPtr Data;
    __declspec(property(get=GetDataLength))
    long DataLength;
    __declspec(property(get=GetGuid))
    GUID Guid;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    long GetFeatureId ( );
    void PutFeatureId (
        long pVal );
    _bstr_t GetMimeType ( );
    void PutMimeType (
        _bstr_t pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IBinaryBufferPtr GetData ( );
    void PutData (
        struct IBinaryBuffer * pVal );
    long GetDataLength ( );
    GUID GetGuid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FeatureId (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MimeType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MimeType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ struct IBinaryBuffer * * pVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ struct IBinaryBuffer * pVal ) = 0;
      virtual HRESULT __stdcall get_DataLength (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ GUID * pVal ) = 0;
};

struct __declspec(uuid("4d9063d9-0384-4e2b-b1dc-4cff98fd41df"))
IAttachmentCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAttachmentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAttachmentPtr GetItem (
        long n );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long n,
        /*[out,retval]*/ struct IAttachment * * pVal ) = 0;
};

struct __declspec(uuid("32c0c9b0-01c3-496d-94d4-ea089e48f030"))
IAttachmentManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Close ( );
    VARIANT_BOOL IsClosed ( );
    long AddAttachment (
        struct IAttachment * newVal );
    VARIANT_BOOL UpdateAttachment (
        struct IAttachment * Attachment );
    VARIANT_BOOL DeleteAttachment (
        long AttachmentId );
    long DeleteAttachmentsByFeatureId (
        long FeatureId );
    IAttachmentPtr GetAttachment (
        long AttachmentId );
    IAttachmentCollectionPtr GetAttachmentsByIds (
        SAFEARRAY * Ids );
    IAttachmentCollectionPtr GetAttachmentsByFeatureId (
        long FeatureId );
    IAttachmentCollectionPtr GetAttachmentsByFeatureIds (
        SAFEARRAY * FeatureIds );
    IAttachmentCollectionPtr GetAllAttachments ( );
    long DeleteAllAttachments ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddAttachment (
        struct IAttachment * newVal,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateAttachment (
        struct IAttachment * Attachment,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAttachment (
        long AttachmentId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAttachmentsByFeatureId (
        long FeatureId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttachment (
        long AttachmentId,
        /*[out,retval]*/ struct IAttachment * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttachmentsByIds (
        SAFEARRAY * Ids,
        /*[out,retval]*/ struct IAttachmentCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttachmentsByFeatureId (
        long FeatureId,
        /*[out,retval]*/ struct IAttachmentCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttachmentsByFeatureIds (
        SAFEARRAY * FeatureIds,
        /*[out,retval]*/ struct IAttachmentCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllAttachments (
        /*[out,retval]*/ struct IAttachmentCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllAttachments (
        /*[out,retval]*/ long * pVal ) = 0;
};

enum gviSpatialRel
{
    gviSpatialRelEnvelope = 0,
    gviSpatialRelEquals = 1,
    gviSpatialRelIntersects = 2,
    gviSpatialRelTouches = 3,
    gviSpatialRelCrosses = 4,
    gviSpatialRelWithin = 5,
    gviSpatialRelContains = 6,
    gviSpatialRelOverlaps = 7
};

struct __declspec(uuid("72bdd153-cfc3-45fd-8469-7284a2284e92"))
ISpatialFilter : IQueryFilter
{
    //
    // Property data
    //

    __declspec(property(get=GetGeometry,put=PutGeometry))
    IGeometryPtr Geometry;
    __declspec(property(get=GetGeometryField,put=PutGeometryField))
    _bstr_t GeometryField;
    __declspec(property(get=GetSpatialRel,put=PutSpatialRel))
    enum gviSpatialRel SpatialRel;

    //
    // Wrapper methods for error-handling
    //

    IGeometryPtr GetGeometry ( );
    void PutGeometry (
        struct IGeometry * pVal );
    _bstr_t GetGeometryField ( );
    void PutGeometryField (
        _bstr_t pVal );
    enum gviSpatialRel GetSpatialRel ( );
    void PutSpatialRel (
        enum gviSpatialRel pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ struct IGeometry * * pVal ) = 0;
      virtual HRESULT __stdcall put_Geometry (
        /*[in]*/ struct IGeometry * pVal ) = 0;
      virtual HRESULT __stdcall get_GeometryField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GeometryField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SpatialRel (
        /*[out,retval]*/ enum gviSpatialRel * pVal ) = 0;
      virtual HRESULT __stdcall put_SpatialRel (
        /*[in]*/ enum gviSpatialRel pVal ) = 0;
};

struct __declspec(uuid("39953d1e-587e-4209-9095-342df1770fd8"))
ITemporalFilter : ISpatialFilter
{
    //
    // Property data
    //

    __declspec(property(get=GetStartDatetime,put=PutStartDatetime))
    DATE StartDatetime;
    __declspec(property(get=GetEndDatetime,put=PutEndDatetime))
    DATE EndDatetime;

    //
    // Wrapper methods for error-handling
    //

    DATE GetStartDatetime ( );
    void PutStartDatetime (
        DATE pVal );
    DATE GetEndDatetime ( );
    void PutEndDatetime (
        DATE pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartDatetime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_StartDatetime (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_EndDatetime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_EndDatetime (
        /*[in]*/ DATE pVal ) = 0;
};

struct __declspec(uuid("7fc59b78-557b-40e2-b629-510c459b3601"))
ITemporalInstance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartDatetime))
    DATE StartDatetime;
    __declspec(property(get=GetEndDatetime))
    DATE EndDatetime;

    //
    // Wrapper methods for error-handling
    //

    IRowBufferPtr GetRowBuffer ( );
    DATE GetStartDatetime ( );
    DATE GetEndDatetime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetRowBuffer (
        /*[out,retval]*/ struct IRowBuffer * * pVal ) = 0;
      virtual HRESULT __stdcall get_StartDatetime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_EndDatetime (
        /*[out,retval]*/ DATE * pVal ) = 0;
};

struct __declspec(uuid("1e10cf64-db1f-4c9a-a5e0-6fad478c0a9c"))
ITemporalInstanceCursor : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    ITemporalInstancePtr NextInstance ( );
    HRESULT Delete ( );
    HRESULT Update (
        struct IRowBuffer * Row );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NextInstance (
        /*[out,retval]*/ struct ITemporalInstance * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Update (
        struct IRowBuffer * Row ) = 0;
};

struct __declspec(uuid("bbbda9ff-4724-41ef-a095-a7a5e9539e32"))
ITemporalCursor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentId))
    long CurrentId;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL MoveNext ( );
    long GetCurrentId ( );
    HRESULT Insert (
        DATE StartDatetime,
        struct IRowBuffer * Row );
    HRESULT Dead (
        DATE DeathDatetime );
    HRESULT ResetBirthDatetime (
        DATE NewBirthDatetime );
    ITemporalInstanceCursorPtr GetTemporalInstances (
        VARIANT_BOOL ReuseTemporalInstance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MoveNext (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        DATE StartDatetime,
        struct IRowBuffer * Row ) = 0;
      virtual HRESULT __stdcall raw_Dead (
        DATE DeathDatetime ) = 0;
      virtual HRESULT __stdcall raw_ResetBirthDatetime (
        DATE NewBirthDatetime ) = 0;
      virtual HRESULT __stdcall raw_GetTemporalInstances (
        VARIANT_BOOL ReuseTemporalInstance,
        /*[out,retval]*/ struct ITemporalInstanceCursor * * pVal ) = 0;
};

struct __declspec(uuid("a348bd14-bcb8-4463-851f-0b4d1be378c6"))
ITemporalManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInfinityDatetime))
    DATE InfinityDatetime;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetKeyDatetimes ( );
    long Insert (
        DATE BirthDate,
        struct IRowBuffer * Row );
    ITemporalCursorPtr Search (
        struct ITemporalFilter * Filter );
    DATE GetInfinityDatetime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetKeyDatetimes (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        DATE BirthDate,
        struct IRowBuffer * Row,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Search (
        struct ITemporalFilter * Filter,
        /*[out,retval]*/ struct ITemporalCursor * * pVal ) = 0;
      virtual HRESULT __stdcall get_InfinityDatetime (
        /*[out,retval]*/ DATE * pVal ) = 0;
};

struct __declspec(uuid("5ef45c7d-1ff9-4d3f-be1d-3eeba543400a"))
IIndexInfoCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IIndexInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IIndexInfoPtr GetItem (
        long n );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long n,
        /*[out,retval]*/ struct IIndexInfo * * pVal ) = 0;
};

struct __declspec(uuid("ebeacdc2-89c2-4200-8a44-c7b0a0713125"))
IRenderIndexInfo : IIndexInfo
{
    //
    // Property data
    //

    __declspec(property(get=GetGeoColumnName,put=PutGeoColumnName))
    _bstr_t GeoColumnName;
    __declspec(property(get=GetL1,put=PutL1))
    double L1;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetGeoColumnName ( );
    void PutGeoColumnName (
        _bstr_t pVal );
    double GetL1 ( );
    void PutL1 (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GeoColumnName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GeoColumnName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_L1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L1 (
        /*[in]*/ double pVal ) = 0;
};

enum gviRenderIndexRebuildType
{
    gviRenderIndexRebuildFlagOnly = 1,
    gviRenderIndexRebuildWithData = 2
};

struct __declspec(uuid("36b1c881-da4c-4826-a1ff-2a1b81b48ee7"))
IGridIndexInfo : IIndexInfo
{
    //
    // Property data
    //

    __declspec(property(get=GetGeoColumnName,put=PutGeoColumnName))
    _bstr_t GeoColumnName;
    __declspec(property(get=GetL1,put=PutL1))
    double L1;
    __declspec(property(get=GetL2,put=PutL2))
    double L2;
    __declspec(property(get=GetL3,put=PutL3))
    double L3;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetGeoColumnName ( );
    void PutGeoColumnName (
        _bstr_t pVal );
    double GetL1 ( );
    void PutL1 (
        double pVal );
    double GetL2 ( );
    void PutL2 (
        double pVal );
    double GetL3 ( );
    void PutL3 (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GeoColumnName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GeoColumnName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_L1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_L2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_L3 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L3 (
        /*[in]*/ double pVal ) = 0;
};

enum gviNetworkAttributeUsageType
{
    gviUseAsCost = 0,
    gviUseAsDescriptor = 1,
    gviUseAsRestriction = 2,
    gviUseAsHierarchy = 3
};

enum gviNetworkElementType
{
    gviJunction = 1,
    gviEdge = 2
};

enum gviEvaluatorType
{
    gviConstantEvaluator = 0,
    gviFieldEvaluator = 1,
    gviScriptEvaluator = 2
};

struct __declspec(uuid("e2f7439b-d3af-4dc6-afe5-649c7ae59700"))
INetworkEvaluator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum gviEvaluatorType Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    enum gviEvaluatorType GetType ( );
    INetworkEvaluatorPtr Clone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviEvaluatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct INetworkEvaluator * * pVal ) = 0;
};

struct __declspec(uuid("48903576-4333-48dc-b658-bd152ac7f2f8"))
INetworkSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetGeoColumnName,put=PutGeoColumnName))
    _bstr_t GeoColumnName;
    __declspec(property(get=GetIsUseSubtypes,put=PutIsUseSubtypes))
    VARIANT_BOOL IsUseSubtypes;
    __declspec(property(get=GetType))
    enum gviNetworkElementType Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t pVal );
    _bstr_t GetGeoColumnName ( );
    void PutGeoColumnName (
        _bstr_t pVal );
    VARIANT_BOOL GetIsUseSubtypes ( );
    void PutIsUseSubtypes (
        VARIANT_BOOL pVal );
    enum gviNetworkElementType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GeoColumnName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GeoColumnName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsUseSubtypes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsUseSubtypes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviNetworkElementType * pVal ) = 0;
};

enum gviEdgeDirection
{
    gviNone = 0,
    gviAlongDigitized = 1,
    gviAgainstDigitized = 2
};

struct __declspec(uuid("5e284da1-dcd2-497b-8072-c57161c78f57"))
INetworkAttribute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldType,put=PutFieldType))
    enum gviFieldType FieldType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUsageType,put=PutUsageType))
    enum gviNetworkAttributeUsageType UsageType;
    __declspec(property(get=GetIsUseByDefault,put=PutIsUseByDefault))
    VARIANT_BOOL IsUseByDefault;

    //
    // Wrapper methods for error-handling
    //

    enum gviFieldType GetFieldType ( );
    void PutFieldType (
        enum gviFieldType pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    enum gviNetworkAttributeUsageType GetUsageType ( );
    void PutUsageType (
        enum gviNetworkAttributeUsageType pVal );
    VARIANT_BOOL GetIsUseByDefault ( );
    void PutIsUseByDefault (
        VARIANT_BOOL pVal );
    INetworkEvaluatorPtr GetDefaultEvaluator (
        enum gviNetworkElementType ElementType );
    HRESULT SetDefaultEvaluator (
        enum gviNetworkElementType ElementType,
        struct INetworkEvaluator * Evaluator );
    INetworkEvaluatorPtr GetEvaluator (
        struct INetworkSource * NetworkSource,
        enum gviEdgeDirection EdgeDirection );
    HRESULT SetEvaluator (
        struct INetworkSource * NetworkSource,
        enum gviEdgeDirection EdgeDirection,
        struct INetworkEvaluator * NetworkEvaluator );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldType (
        /*[out,retval]*/ enum gviFieldType * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldType (
        /*[in]*/ enum gviFieldType pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UsageType (
        /*[out,retval]*/ enum gviNetworkAttributeUsageType * pVal ) = 0;
      virtual HRESULT __stdcall put_UsageType (
        /*[in]*/ enum gviNetworkAttributeUsageType pVal ) = 0;
      virtual HRESULT __stdcall get_IsUseByDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsUseByDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDefaultEvaluator (
        enum gviNetworkElementType ElementType,
        /*[out,retval]*/ struct INetworkEvaluator * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultEvaluator (
        enum gviNetworkElementType ElementType,
        struct INetworkEvaluator * Evaluator ) = 0;
      virtual HRESULT __stdcall raw_GetEvaluator (
        struct INetworkSource * NetworkSource,
        enum gviEdgeDirection EdgeDirection,
        /*[out,retval]*/ struct INetworkEvaluator * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEvaluator (
        struct INetworkSource * NetworkSource,
        enum gviEdgeDirection EdgeDirection,
        struct INetworkEvaluator * NetworkEvaluator ) = 0;
};

enum gviNetworkType
{
    gviDirectedNetwork = 0,
    gviUnDirectedNetwork = 1
};

enum gviNetworkElevationModel
{
    gviElevationNone = 0,
    gviElevationFields = 1,
    gviZCoordinates = 2
};

struct __declspec(uuid("ed90c380-26f2-489b-b069-ed17723958de"))
INetworkLoader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDefaultXYTolerance))
    double DefaultXYTolerance;
    __declspec(property(put=PutXYTolerance))
    double XYTolerance;
    __declspec(property(put=PutType))
    enum gviNetworkType Type;
    __declspec(property(put=PutEdgeDirection))
    enum gviEdgeDirection EdgeDirection;
    __declspec(property(put=PutElevationModel))
    enum gviNetworkElevationModel ElevationModel;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t _arg1 );
    double GetDefaultXYTolerance ( );
    void PutXYTolerance (
        double _arg1 );
    VARIANT_BOOL CanUseFeatureClass (
        _bstr_t FeatureClassName );
    HRESULT LoadNetwork ( );
    HRESULT AddNetworkAttribute (
        struct INetworkAttribute * NetworkAttribute );
    HRESULT AddSource (
        struct INetworkSource * NetworkSource );
    void PutType (
        enum gviNetworkType _arg1 );
    void PutEdgeDirection (
        enum gviEdgeDirection _arg1 );
    void PutElevationModel (
        enum gviNetworkElevationModel _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_DefaultXYTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XYTolerance (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall raw_CanUseFeatureClass (
        BSTR FeatureClassName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadNetwork ( ) = 0;
      virtual HRESULT __stdcall raw_AddNetworkAttribute (
        struct INetworkAttribute * NetworkAttribute ) = 0;
      virtual HRESULT __stdcall raw_AddSource (
        struct INetworkSource * NetworkSource ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum gviNetworkType _arg1 ) = 0;
      virtual HRESULT __stdcall put_EdgeDirection (
        /*[in]*/ enum gviEdgeDirection _arg1 ) = 0;
      virtual HRESULT __stdcall put_ElevationModel (
        /*[in]*/ enum gviNetworkElevationModel _arg1 ) = 0;
};

enum gviNetworkBarrierType
{
    gviJunctionBarrier = 1,
    gviEdgeBarrier = 2
};

enum gviConstraintBarrierType
{
    gviRestriction = 0,
    gviAddedCost = 1
};

struct __declspec(uuid("fdba4ed2-f2dd-474a-8540-26cf1c739008"))
INetworkBarrier : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum gviNetworkBarrierType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetShape,put=PutShape))
    IGeometryPtr Shape;
    __declspec(property(get=GetConstraintBarrierType,put=PutConstraintBarrierType))
    enum gviConstraintBarrierType ConstraintBarrierType;

    //
    // Wrapper methods for error-handling
    //

    enum gviNetworkBarrierType GetType ( );
    INetworkBarrierPtr Clone ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IGeometryPtr GetShape ( );
    void PutShape (
        struct IGeometry * pVal );
    enum gviConstraintBarrierType GetConstraintBarrierType ( );
    void PutConstraintBarrierType (
        enum gviConstraintBarrierType pVal );
    HRESULT SetCost (
        _bstr_t Impedance,
        const _variant_t & newVal );
    _variant_t GetCost (
        _bstr_t Impedance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviNetworkBarrierType * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct INetworkBarrier * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct IGeometry * * pVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ struct IGeometry * pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintBarrierType (
        /*[out,retval]*/ enum gviConstraintBarrierType * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintBarrierType (
        /*[in]*/ enum gviConstraintBarrierType pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCost (
        BSTR Impedance,
        VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_GetCost (
        BSTR Impedance,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

enum gviNetworkLocationType
{
    gviLocation = 1,
    gviEventLocation = 2
};

struct __declspec(uuid("3659ede0-51e6-41b8-a88b-72e25fa6d021"))
INetworkLocation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum gviNetworkLocationType Type;
    __declspec(property(get=GetPosition,put=PutPosition))
    IPointPtr Position;
    __declspec(property(get=GetNetworkPosition))
    IPointPtr NetworkPosition;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    enum gviNetworkLocationType GetType ( );
    INetworkLocationPtr Clone ( );
    IPointPtr GetPosition ( );
    void PutPosition (
        struct IPoint * pVal );
    HRESULT SetCost (
        _bstr_t Impedance,
        const _variant_t & newVal );
    _variant_t GetCost (
        _bstr_t Impedance );
    HRESULT SetEarlistArriveCost (
        _bstr_t Impedance,
        const _variant_t & newVal );
    _variant_t GetEarlistArriveCost (
        _bstr_t Impedance );
    HRESULT SetLatestArriveCost (
        _bstr_t Impedance,
        const _variant_t & newVal );
    _variant_t GetLatestArriveCost (
        _bstr_t Impedance );
    IPointPtr GetNetworkPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviNetworkLocationType * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct INetworkLocation * * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ struct IPoint * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCost (
        BSTR Impedance,
        VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_GetCost (
        BSTR Impedance,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEarlistArriveCost (
        BSTR Impedance,
        VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_GetEarlistArriveCost (
        BSTR Impedance,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLatestArriveCost (
        BSTR Impedance,
        VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_GetLatestArriveCost (
        BSTR Impedance,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_NetworkPosition (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
};

struct __declspec(uuid("0b88c079-0f3f-40da-8c33-3dfa472bba66"))
INetworkSolver : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocationSearchTolerance,put=PutLocationSearchTolerance))
    double LocationSearchTolerance;
    __declspec(property(get=GetHierarchyAttributeName,put=PutHierarchyAttributeName))
    _bstr_t HierarchyAttributeName;
    __declspec(property(get=GetImpedanceAttributeName,put=PutImpedanceAttributeName))
    _bstr_t ImpedanceAttributeName;
    __declspec(property(get=GetIsUseHierarchy,put=PutIsUseHierarchy))
    VARIANT_BOOL IsUseHierarchy;
    __declspec(property(get=GetIsBuildRouteLine,put=PutIsBuildRouteLine))
    VARIANT_BOOL IsBuildRouteLine;
    __declspec(property(get=GetBarrierCount))
    long BarrierCount;
    __declspec(property(get=GetLocationCount))
    long LocationCount;

    //
    // Wrapper methods for error-handling
    //

    double GetLocationSearchTolerance ( );
    void PutLocationSearchTolerance (
        double pVal );
    _bstr_t GetHierarchyAttributeName ( );
    void PutHierarchyAttributeName (
        _bstr_t pVal );
    _bstr_t GetImpedanceAttributeName ( );
    void PutImpedanceAttributeName (
        _bstr_t pVal );
    VARIANT_BOOL GetIsUseHierarchy ( );
    void PutIsUseHierarchy (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsBuildRouteLine ( );
    void PutIsBuildRouteLine (
        VARIANT_BOOL pVal );
    HRESULT LoadNetworkData ( );
    VARIANT_BOOL Solve ( );
    SAFEARRAY * GetRestrictionAttributeNames ( );
    HRESULT SetRestrictionAttributeName (
        _bstr_t AttributeName );
    HRESULT AddBarrier (
        struct INetworkBarrier * NetworkBarrier );
    long GetBarrierCount ( );
    INetworkBarrierPtr GetBarrier (
        long Index );
    HRESULT ClearBarriers ( );
    HRESULT AddLocation (
        struct INetworkLocation * NetworkLocation );
    long GetLocationCount ( );
    INetworkLocationPtr GetLocation (
        long Index );
    HRESULT ClearLocations ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocationSearchTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LocationSearchTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HierarchyAttributeName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HierarchyAttributeName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ImpedanceAttributeName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ImpedanceAttributeName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsUseHierarchy (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsUseHierarchy (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsBuildRouteLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsBuildRouteLine (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadNetworkData ( ) = 0;
      virtual HRESULT __stdcall raw_Solve (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRestrictionAttributeNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRestrictionAttributeName (
        BSTR AttributeName ) = 0;
      virtual HRESULT __stdcall raw_AddBarrier (
        struct INetworkBarrier * NetworkBarrier ) = 0;
      virtual HRESULT __stdcall get_BarrierCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetBarrier (
        long Index,
        /*[out,retval]*/ struct INetworkBarrier * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearBarriers ( ) = 0;
      virtual HRESULT __stdcall raw_AddLocation (
        struct INetworkLocation * NetworkLocation ) = 0;
      virtual HRESULT __stdcall get_LocationCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLocation (
        long Index,
        /*[out,retval]*/ struct INetworkLocation * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearLocations ( ) = 0;
};

enum gviNetworkLocationOrderPolicy
{
    gviSequence = 1,
    gviFixStart = 2,
    gviFixStartAndReturn = 3,
    gviFixStartEnd = 4,
    gviFree = 5
};

struct __declspec(uuid("2981a822-9053-497d-a282-01498e0f7fa4"))
INetworkElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum gviNetworkElementType Type;
    __declspec(property(get=GetFeatureClassId))
    long FeatureClassId;
    __declspec(property(get=GetFeatureId))
    long FeatureId;
    __declspec(property(get=GetElementId))
    long ElementId;

    //
    // Wrapper methods for error-handling
    //

    enum gviNetworkElementType GetType ( );
    long GetFeatureClassId ( );
    long GetFeatureId ( );
    long GetElementId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviNetworkElementType * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureClassId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ElementId (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("0a807521-53db-4e75-88df-a28cfdfb471f"))
INetworkElementCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    INetworkElementPtr Get (
        long Index );
    HRESULT Set (
        long Index,
        struct INetworkElement * Value );
    HRESULT Clear ( );
    VARIANT_BOOL GetIsEmpty ( );
    HRESULT Add (
        struct INetworkElement * Value );
    long GetCount ( );
    HRESULT TrimToSize ( );
    HRESULT RemoveAt (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Get (
        long Index,
        /*[out,retval]*/ struct INetworkElement * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Set (
        long Index,
        struct INetworkElement * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        struct INetworkElement * Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_TrimToSize ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        long Index ) = 0;
};

struct __declspec(uuid("3929575f-abd1-4e07-8699-ea265ec641c5"))
INetworkRouteSegment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartLocation))
    INetworkLocationPtr StartLocation;
    __declspec(property(get=GetEndLocation))
    INetworkLocationPtr EndLocation;

    //
    // Wrapper methods for error-handling
    //

    INetworkLocationPtr GetStartLocation ( );
    INetworkLocationPtr GetEndLocation ( );
    INetworkElementCollectionPtr GetNetworkElements ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartLocation (
        /*[out,retval]*/ struct INetworkLocation * * pVal ) = 0;
      virtual HRESULT __stdcall get_EndLocation (
        /*[out,retval]*/ struct INetworkLocation * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkElements (
        /*[out,retval]*/ struct INetworkElementCollection * * pVal ) = 0;
};

struct __declspec(uuid("6e683203-3d2c-4d9c-8932-f0965a871447"))
INetworkRoute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocationCount))
    long LocationCount;
    __declspec(property(get=GetTotalCost))
    _variant_t TotalCost;
    __declspec(property(get=GetSegmentCount))
    long SegmentCount;

    //
    // Wrapper methods for error-handling
    //

    long GetLocationCount ( );
    INetworkLocationPtr GetLocation (
        long Index );
    _variant_t GetTotalCost ( );
    IGeometryPtr GetRouteGeometry ( );
    long GetSegmentCount ( );
    INetworkRouteSegmentPtr GetSegment (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocationCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLocation (
        long Index,
        /*[out,retval]*/ struct INetworkLocation * * pVal ) = 0;
      virtual HRESULT __stdcall get_TotalCost (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRouteGeometry (
        /*[out,retval]*/ struct IGeometry * * pVal ) = 0;
      virtual HRESULT __stdcall get_SegmentCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegment (
        long Index,
        /*[out,retval]*/ struct INetworkRouteSegment * * pVal ) = 0;
};

struct __declspec(uuid("bc47ecd5-069b-46ca-8824-740850bb447d"))
INetworkRouteSolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetLocationOrderPolicy,put=PutLocationOrderPolicy))
    enum gviNetworkLocationOrderPolicy LocationOrderPolicy;

    //
    // Wrapper methods for error-handling
    //

    enum gviNetworkLocationOrderPolicy GetLocationOrderPolicy ( );
    void PutLocationOrderPolicy (
        enum gviNetworkLocationOrderPolicy pVal );
    INetworkRoutePtr GetRoute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocationOrderPolicy (
        /*[out,retval]*/ enum gviNetworkLocationOrderPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_LocationOrderPolicy (
        /*[in]*/ enum gviNetworkLocationOrderPolicy pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRoute (
        /*[out,retval]*/ struct INetworkRoute * * pVal ) = 0;
};

struct __declspec(uuid("6ff796f1-4aef-4fcf-a32a-55597fbbc9f9"))
INetworkEventLocation : INetworkLocation
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFacilityCount,put=PutTargetFacilityCount))
    long TargetFacilityCount;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetCutoff (
        _bstr_t Impedance,
        const _variant_t & newVal );
    _variant_t GetCutoff (
        _bstr_t Impedance );
    long GetTargetFacilityCount ( );
    void PutTargetFacilityCount (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCutoff (
        BSTR Impedance,
        VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_GetCutoff (
        BSTR Impedance,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_TargetFacilityCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetFacilityCount (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("1eb2fd11-ce86-46cb-936d-ea990459fce8"))
INetworkTraceResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTotalCost))
    _variant_t TotalCost;
    __declspec(property(get=GetNetworkElementCount))
    long NetworkElementCount;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTotalCost ( );
    long GetNetworkElementCount ( );
    INetworkElementPtr GetNetworkElement (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TotalCost (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_NetworkElementCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkElement (
        long Index,
        /*[out,retval]*/ struct INetworkElement * * pVal ) = 0;
};

struct __declspec(uuid("2e5c4e48-4a26-4b7b-a8fb-ced74585e695"))
INetworkFindConnectedSolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetNetworkTraceResultCount))
    long NetworkTraceResultCount;

    //
    // Wrapper methods for error-handling
    //

    long GetNetworkTraceResultCount ( );
    INetworkTraceResultPtr GetNetworkTraceResult (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NetworkTraceResultCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkTraceResult (
        long Index,
        /*[out,retval]*/ struct INetworkTraceResult * * pVal ) = 0;
};

struct __declspec(uuid("0a3a2fa4-d83f-4027-b1fa-6e364b26462f"))
INetworkFindDisconnectedSolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetNetworkTraceResultCount))
    long NetworkTraceResultCount;

    //
    // Wrapper methods for error-handling
    //

    long GetNetworkTraceResultCount ( );
    INetworkTraceResultPtr GetNetworkTraceResult (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NetworkTraceResultCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkTraceResult (
        long Index,
        /*[out,retval]*/ struct INetworkTraceResult * * pVal ) = 0;
};

struct __declspec(uuid("f7d54412-ae03-4a75-8f15-8f33ffe6ba17"))
INetworkFindAncestorsSolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetNetworkTraceResultCount))
    long NetworkTraceResultCount;

    //
    // Wrapper methods for error-handling
    //

    long GetNetworkTraceResultCount ( );
    INetworkTraceResultPtr GetNetworkTraceResult (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NetworkTraceResultCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkTraceResult (
        long Index,
        /*[out,retval]*/ struct INetworkTraceResult * * pVal ) = 0;
};

struct __declspec(uuid("fdc2cdad-8ec0-4d6b-ac04-01208646bf9c"))
INetworkFindLoopsSolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetNetworkTraceResultCount))
    long NetworkTraceResultCount;

    //
    // Wrapper methods for error-handling
    //

    long GetNetworkTraceResultCount ( );
    INetworkTraceResultPtr GetNetworkTraceResult (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NetworkTraceResultCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkTraceResult (
        long Index,
        /*[out,retval]*/ struct INetworkTraceResult * * pVal ) = 0;
};

struct __declspec(uuid("5321d037-d8e0-4006-8ab8-99b004ce0ca7"))
INetworkTraceUpstreamSolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetNetworkTraceResultCount))
    long NetworkTraceResultCount;

    //
    // Wrapper methods for error-handling
    //

    long GetNetworkTraceResultCount ( );
    INetworkTraceResultPtr GetNetworkTraceResult (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NetworkTraceResultCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkTraceResult (
        long Index,
        /*[out,retval]*/ struct INetworkTraceResult * * pVal ) = 0;
};

struct __declspec(uuid("e629b2c3-9f3b-49c3-96ef-84ba481549ad"))
INetworkTraceDownstreamSolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetNetworkTraceResultCount))
    long NetworkTraceResultCount;

    //
    // Wrapper methods for error-handling
    //

    long GetNetworkTraceResultCount ( );
    INetworkTraceResultPtr GetNetworkTraceResult (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NetworkTraceResultCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkTraceResult (
        long Index,
        /*[out,retval]*/ struct INetworkTraceResult * * pVal ) = 0;
};

enum gviFdbCapability
{
    gviFdbCapReplicationCheckOutMaster = 1,
    gviFdbCapQueryResultIndexRange = 2,
    gviFdbCapModifyField = 3,
    gviFdbCapAddField = 4,
    gviFdbCapDeleteField = 5,
    gviFdbCapModifyData = 20
};

enum gviResultStoreLocation
{
    gviResultStoreLocationServer = 0,
    gviResultStoreLocationClient = 1
};

struct __declspec(uuid("bdcc8142-7a33-437c-823d-b5f058fd2fa6"))
IQueryDef : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSubFields,put=PutSubFields))
    SAFEARRAY * SubFields;
    __declspec(property(get=GetTables,put=PutTables))
    SAFEARRAY * Tables;
    __declspec(property(get=GetWhereClause,put=PutWhereClause))
    _bstr_t WhereClause;
    __declspec(property(get=GetPostfixClause,put=PutPostfixClause))
    _bstr_t PostfixClause;
    __declspec(property(get=GetStoreLocation,put=PutStoreLocation))
    enum gviResultStoreLocation StoreLocation;
    __declspec(property(get=GetPrefixClause,put=PutPrefixClause))
    _bstr_t PrefixClause;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetSubFields ( );
    void PutSubFields (
        SAFEARRAY * pVal );
    HRESULT AddSubField (
        _bstr_t FieldName );
    SAFEARRAY * GetTables ( );
    void PutTables (
        SAFEARRAY * pVal );
    _bstr_t GetWhereClause ( );
    void PutWhereClause (
        _bstr_t pVal );
    _bstr_t GetPostfixClause ( );
    void PutPostfixClause (
        _bstr_t pVal );
    IFdeCursorPtr Execute (
        VARIANT_BOOL ReuseRow );
    enum gviResultStoreLocation GetStoreLocation ( );
    void PutStoreLocation (
        enum gviResultStoreLocation pVal );
    IFdeCursorPtr ExecuteQuery (
        _bstr_t SQL,
        SAFEARRAY * Params,
        long BulkSize,
        enum gviResultStoreLocation Location,
        VARIANT_BOOL ReuseRow );
    _bstr_t GetPrefixClause ( );
    void PutPrefixClause (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SubFields (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall put_SubFields (
        /*[in]*/ SAFEARRAY * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddSubField (
        BSTR FieldName ) = 0;
      virtual HRESULT __stdcall get_Tables (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall put_Tables (
        /*[in]*/ SAFEARRAY * pVal ) = 0;
      virtual HRESULT __stdcall get_WhereClause (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_WhereClause (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PostfixClause (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PostfixClause (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        VARIANT_BOOL ReuseRow,
        /*[out,retval]*/ struct IFdeCursor * * pVal ) = 0;
      virtual HRESULT __stdcall get_StoreLocation (
        /*[out,retval]*/ enum gviResultStoreLocation * pVal ) = 0;
      virtual HRESULT __stdcall put_StoreLocation (
        /*[in]*/ enum gviResultStoreLocation pVal ) = 0;
      virtual HRESULT __stdcall raw_ExecuteQuery (
        BSTR SQL,
        SAFEARRAY * Params,
        long BulkSize,
        enum gviResultStoreLocation Location,
        VARIANT_BOOL ReuseRow,
        /*[out,retval]*/ struct IFdeCursor * * pVal ) = 0;
      virtual HRESULT __stdcall get_PrefixClause (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrefixClause (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ec46e0b7-7b37-4c5c-a5eb-810256341cf6"))
ISQLCheck : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t CheckSelectList (
        _bstr_t SelectList );
    _bstr_t CheckWhereClause (
        _bstr_t WhereClause );
    _bstr_t CheckSQLStatement (
        _bstr_t SQL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CheckSelectList (
        BSTR SelectList,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_CheckWhereClause (
        BSTR WhereClause,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_CheckSQLStatement (
        BSTR SQL,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum gviNameType
{
    gviNameDataSource = 0,
    gviNameFeatureDataSet = 1,
    gviNameTable = 2,
    gviNameObjectClass = 3,
    gviNameFeatureClass = 4,
    gviNameFieldInfo = 5,
    gviNameResource = 6,
    gviNameIndex = 7
};

struct __declspec(uuid("25faa6e0-e390-47a8-8ff0-2daafbdc5fc0"))
IConflict : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasConflicts))
    VARIANT_BOOL HasConflicts;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHasConflicts ( );
    SAFEARRAY * GetConflictsIds (
        _bstr_t ClassName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HasConflicts (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetConflictsIds (
        BSTR ClassName,
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

enum gviReplicateOperation
{
    gviReplicateInitialize = 0,
    gviReplicateFinished = 1,
    gviReplicateExtractSchema = 2,
    gviReplicateExtractData = 3,
    gviReplicateCreateSchema = 4,
    gviReplicateReplicateData = 5,
    gviReplicateCreateSpatialIndex = 6,
    gviReplicateCreateRenderIndex = 7,
    gviReplicateCommitTransaction = 8,
    gviReplicateTruncateDelta = 9,
    gviReplicateReleaseLock = 10,
    gviCloseFile = 11,
    gviWriteFile = 12,
    gviOpenFile = 13,
    gviWriteImage = 14,
    gviWriteModel = 15
};

struct __declspec(uuid("4eac5e54-613d-4d3c-b3a2-3f7292604975"))
IFeatureProgress : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetCurrentOperation))
    enum gviReplicateOperation CurrentOperation;
    __declspec(property(get=GetOperationCount))
    long OperationCount;
    __declspec(property(get=GetFeatureOwner))
    _bstr_t FeatureOwner;
    __declspec(property(get=GetCurrentFeatureCount))
    long CurrentFeatureCount;
    __declspec(property(get=GetTotalFeatureCount))
    long TotalFeatureCount;
    __declspec(property(get=GetOperations))
    SAFEARRAY * Operations;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    enum gviReplicateOperation GetCurrentOperation ( );
    long GetOperationCount ( );
    _bstr_t GetFeatureOwner ( );
    long GetCurrentFeatureCount ( );
    long GetTotalFeatureCount ( );
    SAFEARRAY * GetOperations ( );
    HRESULT Cancel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentOperation (
        /*[out,retval]*/ enum gviReplicateOperation * pVal ) = 0;
      virtual HRESULT __stdcall get_OperationCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureOwner (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentFeatureCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_TotalFeatureCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Operations (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
};

struct __declspec(uuid("cd3e23c3-3abc-4a9d-bae0-ee3f090efb55"))
IEnumResName : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrent))
    _bstr_t Current;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL MoveNext ( );
    _bstr_t GetCurrent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MoveNext (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum gviNetworkJunctionConnectivityPolicy
{
    gviHonor = 1,
    gviOverride = 2
};

struct __declspec(uuid("4a24b3e4-9c37-4fc6-8994-97b9239d7768"))
IJunctionNetworkSource : INetworkSource
{
    //
    // Property data
    //

    __declspec(property(get=GetConnectivityPolicy,put=PutConnectivityPolicy))
    enum gviNetworkJunctionConnectivityPolicy ConnectivityPolicy;
    __declspec(property(get=GetElevationFieldName,put=PutElevationFieldName))
    _bstr_t ElevationFieldName;
    __declspec(property(get=GetSourceSinkField,put=PutSourceSinkField))
    _bstr_t SourceSinkField;
    __declspec(property(get=GetDefaultSourceSinkField))
    _bstr_t DefaultSourceSinkField;

    //
    // Wrapper methods for error-handling
    //

    enum gviNetworkJunctionConnectivityPolicy GetConnectivityPolicy ( );
    void PutConnectivityPolicy (
        enum gviNetworkJunctionConnectivityPolicy pVal );
    _bstr_t GetElevationFieldName ( );
    void PutElevationFieldName (
        _bstr_t pVal );
    SAFEARRAY * GetClassConnectivityGroups ( );
    HRESULT SetClassConnectivityGroup (
        long GroupId );
    IPropertySetPtr GetSubTypeConnectivityGroups ( );
    HRESULT SetSubTypeConnectivityGroups (
        long SubTypeCode,
        long GroupId );
    _bstr_t GetSourceSinkField ( );
    void PutSourceSinkField (
        _bstr_t pVal );
    _bstr_t GetDefaultSourceSinkField ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConnectivityPolicy (
        /*[out,retval]*/ enum gviNetworkJunctionConnectivityPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectivityPolicy (
        /*[in]*/ enum gviNetworkJunctionConnectivityPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_ElevationFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ElevationFieldName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetClassConnectivityGroups (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClassConnectivityGroup (
        long GroupId ) = 0;
      virtual HRESULT __stdcall raw_GetSubTypeConnectivityGroups (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSubTypeConnectivityGroups (
        long SubTypeCode,
        long GroupId ) = 0;
      virtual HRESULT __stdcall get_SourceSinkField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SourceSinkField (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultSourceSinkField (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum gviNetworkEdgeConnectivityPolicy
{
    gviAnyVertex = 1,
    gviEndVertex = 2
};

struct __declspec(uuid("51f3dd52-b3a4-4b31-ad72-9f267a150afa"))
IEdgeNetworkSource : INetworkSource
{
    //
    // Property data
    //

    __declspec(property(get=GetConnectivityPolicy,put=PutConnectivityPolicy))
    enum gviNetworkEdgeConnectivityPolicy ConnectivityPolicy;
    __declspec(property(get=GetFromElevationFieldName,put=PutFromElevationFieldName))
    _bstr_t FromElevationFieldName;
    __declspec(property(get=GetToElevationFieldName,put=PutToElevationFieldName))
    _bstr_t ToElevationFieldName;
    __declspec(property(get=GetClassConnectivityGroup,put=PutClassConnectivityGroup))
    long ClassConnectivityGroup;
    __declspec(property(get=GetDirectionFieldName,put=PutDirectionFieldName))
    _bstr_t DirectionFieldName;

    //
    // Wrapper methods for error-handling
    //

    enum gviNetworkEdgeConnectivityPolicy GetConnectivityPolicy ( );
    void PutConnectivityPolicy (
        enum gviNetworkEdgeConnectivityPolicy pVal );
    _bstr_t GetFromElevationFieldName ( );
    void PutFromElevationFieldName (
        _bstr_t pVal );
    _bstr_t GetToElevationFieldName ( );
    void PutToElevationFieldName (
        _bstr_t pVal );
    long GetClassConnectivityGroup ( );
    void PutClassConnectivityGroup (
        long pVal );
    IPropertySetPtr GetSubTypeConnectivityGroups ( );
    HRESULT SetSubTypeConnectivityGroups (
        long SubTypeCode,
        long GroupId );
    _bstr_t GetDirectionFieldName ( );
    void PutDirectionFieldName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConnectivityPolicy (
        /*[out,retval]*/ enum gviNetworkEdgeConnectivityPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectivityPolicy (
        /*[in]*/ enum gviNetworkEdgeConnectivityPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_FromElevationFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FromElevationFieldName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ToElevationFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ToElevationFieldName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassConnectivityGroup (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ClassConnectivityGroup (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSubTypeConnectivityGroups (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSubTypeConnectivityGroups (
        long SubTypeCode,
        long GroupId ) = 0;
      virtual HRESULT __stdcall get_DirectionFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DirectionFieldName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("660b46e3-a093-4559-b010-d1365a8c446b"))
INetworkFieldEvaluator : INetworkEvaluator
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldName,put=PutFieldName))
    _bstr_t FieldName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFieldName ( );
    void PutFieldName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("4c998110-9812-4018-a14e-0f48d99571f3"))
INetworkConstantEvaluator : INetworkEvaluator
{
    //
    // Property data
    //

    __declspec(property(get=GetConstantValue,put=PutConstantValue))
    _variant_t ConstantValue;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetConstantValue ( );
    void PutConstantValue (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstantValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstantValue (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("5e63edc4-21f4-4891-87d4-8274fa5ea027"))
INetworkScriptEvaluator : INetworkEvaluator
{
    //
    // Property data
    //

    __declspec(property(get=GetFunctionScript,put=PutFunctionScript))
    _bstr_t FunctionScript;
    __declspec(property(get=GetExpressionScript,put=PutExpressionScript))
    _bstr_t ExpressionScript;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFunctionScript ( );
    void PutFunctionScript (
        _bstr_t pVal );
    _bstr_t GetExpressionScript ( );
    void PutExpressionScript (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FunctionScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FunctionScript (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExpressionScript (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExpressionScript (
        /*[in]*/ BSTR pVal ) = 0;
};
    const int _FDE_FAILED = -2147131503;
    const int _FDE_NOT_IMPLEMENTED = -2147131502;
    const int _FDE_INVALID_PARAMETER = -2147131501;
    const int _FDE_INVALID_POINTER = -2147131500;
    const int _FDE_VALUE_LENGTH_ZERO = -2147131499;
    const int _FDE_NOT_EXIST = -2147131498;
    const int _FDE_NOT_ENOUGH_MEMORY = -2147131497;
    const int _FDE_NOT_SUPPORT = -2147220504;
    const int _FDE_OBJECT_NOT_FOUND = -2147220503;
    const int _FDE_INDEX_OVER_RANGE = -2147220502;
    const int _FDE_NAME_NOT_IN_COLLECTION = -2147220501;
    const int _FDE_FORMATSTRING_OVER_RANGE = -2147220500;
    const int _FDE_INVALID_LACAL_PATH = -2147220499;
    const int _FDE_INVALID_FIELDTYPE = -2147220498;
    const int _FDE_INVALID_PLUGIN = -2147220497;
    const int _FDE_NO_SUITED_PLUGIN = -2147220496;
    const int _FDE_STRING_DECODE_ERROR = -2147220495;
    const int _FDE_STRING_ENCODE_ERROR = -2147220494;
    const int _FDE_DOM_NOTINIT = -2147220004;
    const int _FDE_FEATURECLASS_NO_GEOMETRY_FIELD = -2147220003;
    const int _FDE_FEATURECLASS_NO_RELATIONAL_OPERATOR = -2147220002;
    const int _FDE_CONNECTION_DBERROR = -2147219504;
    const int _FDE_CONNECTION_OPEN_FAILED_UNKNOWN = -2147219503;
    const int _FDE_CONNECTION_OPEN_FAILED_PASSWORD = -2147219502;
    const int _FDE_CONNECTION_OPEN_FAILED_TIMEOUT = -2147219501;
    const int _FDE_CONNECTION_OPEN_FAILED_DATABASE = -2147219500;
    const int _FDE_CONNECTION_INVAILED_PROVIDER = -2147219499;
    const int _FDE_CONNECTION_CLOSE_FAILED = -2147219498;
    const int _FDE_CONNECTION_GETTIME_FAILED = -2147219497;
    const int _FDE_CONNECTION_CREATESTATEMENT_FAILED = -2147219496;
    const int _FDE_CONNECTION_CREATEPSTATEMENT_FAILED = -2147219495;
    const int _FDE_CONNECTION_SET_TRANSLEVEL_FAILED = -2147219494;
    const int _FDE_CONNECTION_GET_TRANSLEVEL_FAILED = -2147219493;
    const int _FDE_CONNECTION_BEGIN_TRANS_FAILED = -2147219492;
    const int _FDE_CONNECTION_ROLEBACK_TRANS_FAILED = -2147219491;
    const int _FDE_CONNECTION_COMMIT_TRANS_FAILED = -2147219490;
    const int _FDE_CONNECTION_CLOSE_ALEREADY = -2147219489;
    const int _FDE_CONNECTION_EXCUTESQL_FAILED = -2147219488;
    const int _FDE_CONNECTION_NOT_OPEN = -2147219487;
    const int _FDE_CONNECTION_STATEMENT_EXCUTE_SQL_FAILED = -2147219486;
    const int _FDE_CONNECTION_HAS_OPENED = -2147219485;
    const int _FDE_CONNECTION_IN_USE = -2147219484;
    const int _FDE_CONNECTION_TRANS_IN_USE = -2147219483;
    const int _FDE_CONNECTION_DBMS_DOES_NOT_SUPPORT = -2147219482;
    const int _FDE_CONNECTION_NOT_IN_USER_TRANS = -2147219481;
    const int _FDE_CONNECTION_TYPE_NOT_MATCH = -2147219480;
    const int _FDE_CONNECTION_TYPE_UNKNOWN = -2147219479;
    const int _FDE_CONNECTION_PREPARESTATEMENT_FAILED = -2147219478;
    const int _FDE_CONNECTION_GET_FDBSCHEMA_FAILED = -2147219477;
    const int _FDE_CONNECTION_GET_FDBVERSION_FAILED = -2147219476;
    const int _FDE_CONNECTION_UPDATE_AFFECTED_ROWS_ZERO = -2147219475;
    const int _FDE_CONNECTION_UNIQUE_KEY_VIOLATION = -2147219474;
    const int _FDE_CONNECTION_PARAMETER_NOT_MATCH = -2147219473;
    const int _FDE_CONNECTION_FDBFILE_OPENED = -2147219472;
    const int _FDE_EXIST_ON_SERVER = -2147219404;
    const int _FDE_UNSUPPORT_VERSION = -2147219403;
    const int _FDE_META_RESPONSE_INVALID = -2147219402;
    const int _FDE_NOT_EXIST_ON_SERVER = -2147219401;
    const int _FDE_SYSTEMTABLE_CANNOT_DELETE = -2147219400;
    const int _FDE_SYSTEMTABLE_CANNOT_OPEN = -2147219399;
    const int _FDE_PHYSICAL_TABLE_EXIST = -2147219395;
    const int _FDE_TABLE_NAME_INVALID = -2147219394;
    const int _FDE_OBJECT_NAME_INVALID = -2147219393;
    const int _FDE_OBJECT_LOCKED_BYOTHER = -2147219392;
    const int _FDE_OBJECT_LOCKED_FAILED = -2147219391;
    const int _FDE_OBJECT_UNLOCK_FAILED = -2147219390;
    const int _FDE_OBJECT_LOCKED_TABLEID = -2147219389;
    const int _FDE_OBJECT_NEED_EXCLUSIVE_SCHEMA_LOCK = -2147219388;
    const int _FDE_OBJECT_NEED_SHARED_SCHEMA_LOCK = -2147219387;
    const int _FDE_OBJECTCLASS_EXIST = -2147219386;
    const int _FDE_FDT_INVALID_NAME = -2147219304;
    const int _FDE_FDT_ALIAS_INVALID_NAME = -2147219303;
    const int _FDE_FDT_OPTION_INVALID = -2147219302;
    const int _FDE_FDT_HAS_CHECKOUTED = -2147219301;
    const int _FDE_FDT_CREATEFC_NOGEO = -2147219294;
    const int _FDE_FDT_HAS_TABLES = -2147219293;
    const int _FDE_FDT_SAVE_SR_FAILED = -2147219292;
    const int _FDE_FDT_SAVE_TR_FAILED = -2147219291;
    const int _FDE_FDT_DATASET_EXIST = -2147219290;
    const int _FDE_MODELCLASS_NOT_EXIST = -2147219289;
    const int _FDE_IMAGECLASS_NOT_EXIST = -2147219288;
    const int _FDE_MODELCLASS_RENAME_NOT_ALLOWED = -2147219287;
    const int _FDE_TEXTURECLASS_RENAME_NOT_ALLOWED = -2147219286;
    const int _FDE_FDE_SR_NOT_EXISTS = -2147219285;
    const int _FDE_FDE_SR_NOT_MATCH = -2147219284;
    const int _FDE_FDE_TR_NOT_EXISTS = -2147219274;
    const int _FDE_BINDATA_SIZE_TOO_LONG = -2147219273;
    const int _FDE_FDT_VERSION_NOT_MATCHED = -2147219271;
    const int _FDE_MODELCLASS_IMAGECLASS_CAN_NOT_DELETE = -2147219270;
    const int _FDE_FDT_DATASET_NOT_EXIST = -2147219269;
    const int _FDE_FC_RC_FIELD_REGISTED = -2147219204;
    const int _FDE_FC_RC_FIELD_UNREGISTED = -2147219203;
    const int _FDE_OBJECTCLASS_IS_READONLY = -2147219202;
    const int _FDE_OBJECTCLASS_NOT_EXIST = -2147219201;
    const int _FDE_FEATURECLASS_NOT_EXIST = -2147219200;
    const int _FDE_RESOURCE_MODEL_ENCRYPTED = -2147219199;
    const int _FDE_RESOURCE_IMAGE_ENCRYPTED = -2147219199;
    const int _FDE_FIELDINFO_NO_FIELDINFO = -2147219104;
    const int _FDE_FIELDINFO_IS_EXISTED = -2147219103;
    const int _FDE_FIELDVALUE_IS_NULL = -2147219102;
    const int _FDE_FIELDVALUE_TYPE_NOT_MATCH = -2147219101;
    const int _FDE_FIELDVALUE_NOT_DEFAULT = -2147219100;
    const int _FDE_FIELDVALUE_NO_EDITABLE = -2147219099;
    const int _FDE_FIELDINFO_GEOCOLUMN_NEED_KEEPED = -2147219098;
    const int _FDE_FIELDINFO_GEOCOLUMN_MORETHAN_ONE = -2147219093;
    const int _FDE_FIELDINFO_SYSTEMCOLUMN_MODIFY_FAILED = -2147219097;
    const int _FDE_FIELDINFO_REQUIREDCOLUMN_DELETE_FAILED = -2147219096;
    const int _FDE_FIELDINFO_TYPE_NOT_SUPPORT = -2147219095;
    const int _FDE_FIELDVALUE_NOT_MEMBER_OF_DOMAIN = -2147219094;
    const int _FDE_DATASOURCE_NOT_SUPPORT_DOMAIN_TYPE = -2147219004;
    const int _FDE_DATASOURCE_DOMAIN_IS_REFRENCE = -2147219003;
    const int _FDE_DATA_CONFILICT = -2147219002;
    const int _FDE_CURSOR_INSERT_NOT_SUPPORT_FETCH = -2147218904;
    const int _FDE_CURSOR_FETCH_FAILED = -2147218903;
    const int _FDE_CURSOR_NOT_UPDATE_NOT_SUPPORT_DELETE = -2147218902;
    const int _FDE_CURSOR_SELECT_NOT_SUPPORT_UPDATE = -2147218901;
    const int _FDE_CURSOR_UPDATE_FAILED = -2147218900;
    const int _FDE_CURSOR_UPDATE_NOT_READY = -2147218899;
    const int _FDE_CURSOR_NOT_FETCHED = -2147218898;
    const int _FDE_CURSOR_DELETE_NO_PRIMARYKEY = -2147218897;
    const int _FDE_CURSOR_UPDATE_NO_PRIMARYKEY = -2147218896;
    const int _FDE_CURSOR_PRIMARYKEY_CANNOT_SETVALUE = -2147218895;
    const int _FDE_CURSOR_READONLY = -2147218894;
    const int _FDE_CURSOR_TYPE_NOT_SUPPORT = -2147218893;
    const int _FDE_CURSOR_FETCH_NO_DATA = -2147218892;
    const int _FDE_CURSOR_ADDNEW_NOT_READY = -2147218891;
    const int _FDE_CURSOR_ADDNEW_FAILED = -2147218890;
    const int _FDE_CURSOR_SETVALUE_FAILED = -2147218889;
    const int _FDE_CURSOR_TYPE_NOT_MATCH = -2147218887;
    const int _FDE_SPATIALINDEX_COLUMN_ALREADY_USED = -2147218804;
    const int _FDE_SPATIALINDEX_NAME_ALREADY_USED = -2147218803;
    const int _FDE_SPATIALINDEX_UPDATE_FALIED = -2147218802;
    const int _FDE_SPATIALINDEX_COLUMN_NOT_USED = -2147218801;
    const int _FDE_CHECKOUT_MASTER_CANNOT_AS_SLAVE = -2147218704;
    const int _FDE_CHECKOUT_SLAVE_CANNOT_AS_MASTER = -2147218703;
    const int _FDE_CHECKOUT_STATE_NOT_SAME = -2147218702;
    const int _FDE_CHECKOUT_NAME_NOT_MATCHED = -2147218701;
    const int _FDE_FEATUREDATASET_HAS_CHECKOUTED = -2147218700;
    const int _FDE_FEATUREDATASET_MASTER_NOT_CHECKOUT_YET = -2147218698;
    const int _FDE_RESULTSET_INIT_FAILED = -2147218604;
    const int _FDE_RESULTSET_INIT_RESOURCE_ERROR = -2147218603;
    const int _FDE_RESULTSET_RESOURCE_KEY_CONFLIC = -2147218602;
    const int _FDE_RENDERINDEX_EXIST = -2147214503;
    const int _FDE_RENDERINDEX_COLUMN_NOT_USED = -2147214502;
    const int _FDE_RENDERINDEX_COLUMN_ALREADY_USED = -2147214501;
    const int _FDE_RENDERINDEX_NAME_ALREADY_USED = -2147214500;
    const int _SC_INTERNAL_SERVER_ERROR = -2147191503;
    const int _SC_SERVICE_UNAVALIABALE = -2147191502;

enum gviConflictDetectedType
{
    gviConflictDetectedMaster = 1,
    gviConflictDetectedSlave = 2,
    gviConflictDetectedManual = 3
};

enum gviReplicationType
{
    gviReplicationCheckOut = 0,
    gviReplicationCheckIn = 1
};

enum gviModelLODType
{
    gviSimpleModel = 0,
    gviFineModel = 1
};

enum gviNetworkSide
{
    gviSideNone = 0,
    gviSideAlongDigitized = 1,
    gviSideAgainstDigitized = 2
};

struct __declspec(uuid("c8906e80-db1e-42d0-b2c9-a28a7ea06dc6"))
IResourceManager : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsModelEncrypted))
    VARIANT_BOOL IsModelEncrypted;
    __declspec(property(get=GetIsImageEncrypted))
    VARIANT_BOOL IsImageEncrypted;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddModel (
        _bstr_t Name,
        struct IModel * Model,
        struct IModel * SimplifiedModel );
    VARIANT_BOOL DeleteModel (
        _bstr_t Name );
    VARIANT_BOOL UpdateModel (
        _bstr_t Name,
        struct IModel * Model );
    VARIANT_BOOL UpdateSimplifiedModel (
        _bstr_t Name,
        struct IModel * Model );
    VARIANT_BOOL ModelExist (
        _bstr_t Name );
    long GetModelCount ( );
    IModelPtr GetModel (
        _bstr_t Name );
    IModelPtr GetSimplifiedModel (
        _bstr_t Name );
    IEnumResNamePtr GetModelNames ( );
    VARIANT_BOOL AddImage (
        _bstr_t Name,
        struct IImage * Image );
    VARIANT_BOOL DeleteImage (
        _bstr_t Name );
    VARIANT_BOOL UpdateImage (
        _bstr_t Name,
        struct IImage * Image );
    VARIANT_BOOL ImageExist (
        _bstr_t Name );
    IImagePtr GetImage (
        _bstr_t Name );
    long GetImageCount ( );
    IEnumResNamePtr GetImageNames ( );
    VARIANT_BOOL WriteModelAndImageToFile (
        _bstr_t ModelName,
        _bstr_t FileName );
    VARIANT_BOOL RebuildSimplifiedModel (
        _bstr_t ModelName );
    VARIANT_BOOL CheckResourceName (
        _bstr_t ResourceName );
    DATE GetModelLastUpdateTime (
        _bstr_t Name );
    DATE GetImageLastUpdateTime (
        _bstr_t Name );
    VARIANT_BOOL EncryptModel (
        _bstr_t Password,
        IDispatch * ProcessingCallback );
    VARIANT_BOOL GetIsModelEncrypted ( );
    VARIANT_BOOL EncryptImage (
        _bstr_t Password,
        IDispatch * ProcessingCallback );
    VARIANT_BOOL GetIsImageEncrypted ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddModel (
        BSTR Name,
        struct IModel * Model,
        struct IModel * SimplifiedModel,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteModel (
        BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateModel (
        BSTR Name,
        struct IModel * Model,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateSimplifiedModel (
        BSTR Name,
        struct IModel * Model,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ModelExist (
        BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetModelCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetModel (
        BSTR Name,
        /*[out,retval]*/ struct IModel * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSimplifiedModel (
        BSTR Name,
        /*[out,retval]*/ struct IModel * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetModelNames (
        /*[out,retval]*/ struct IEnumResName * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddImage (
        BSTR Name,
        struct IImage * Image,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteImage (
        BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateImage (
        BSTR Name,
        struct IImage * Image,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ImageExist (
        BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetImage (
        BSTR Name,
        /*[out,retval]*/ struct IImage * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetImageCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetImageNames (
        /*[out,retval]*/ struct IEnumResName * * pVal ) = 0;
      virtual HRESULT __stdcall raw_WriteModelAndImageToFile (
        BSTR ModelName,
        BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RebuildSimplifiedModel (
        BSTR ModelName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CheckResourceName (
        BSTR ResourceName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetModelLastUpdateTime (
        BSTR Name,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetImageLastUpdateTime (
        BSTR Name,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_EncryptModel (
        BSTR Password,
        IDispatch * ProcessingCallback,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsModelEncrypted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_EncryptImage (
        BSTR Password,
        IDispatch * ProcessingCallback,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsImageEncrypted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("d8dac21f-479b-449a-a645-c994b9533cff"))
ICodedValueDomain : IDomain
{
    //
    // Property data
    //

    __declspec(property(get=GetCodeCount))
    long CodeCount;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddCode (
        const _variant_t & Value,
        _bstr_t Name );
    long GetCodeCount ( );
    HRESULT DeleteCode (
        const _variant_t & Value );
    _variant_t GetCodeValue (
        long Position );
    _bstr_t GetCodeName (
        long Position );
    _bstr_t GetCodeNameByValue (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddCode (
        VARIANT Value,
        BSTR Name ) = 0;
      virtual HRESULT __stdcall get_CodeCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteCode (
        VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_GetCodeValue (
        long Position,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCodeName (
        long Position,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCodeNameByValue (
        VARIANT Value,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("88e27f7a-6deb-4eca-aa3c-3c00029d9e53"))
IRangeDomain : IDomain
{
    //
    // Property data
    //

    __declspec(property(get=GetMinValue,put=PutMinValue))
    _variant_t MinValue;
    __declspec(property(get=GetMaxValue,put=PutMaxValue))
    _variant_t MaxValue;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinValue ( );
    void PutMinValue (
        const _variant_t & pVal );
    _variant_t GetMaxValue ( );
    void PutMaxValue (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxValue (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("32bcbd6c-94be-4320-b1e4-6778f8995db4"))
IRowBufferFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IRowBufferPtr CreateRowBuffer (
        struct IFieldInfoCollection * Fields );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateRowBuffer (
        struct IFieldInfoCollection * Fields,
        /*[out,retval]*/ struct IRowBuffer * * pVal ) = 0;
};

struct __declspec(uuid("6da243af-1ff2-481a-87f5-e1a526472da3"))
IDomainFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    ICodedValueDomainPtr CreateCodedValueDomain (
        _bstr_t DomainName,
        enum gviFieldType FieldType );
    IRangeDomainPtr CreateRangeDomain (
        _bstr_t DomainName,
        enum gviFieldType FieldType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateCodedValueDomain (
        BSTR DomainName,
        enum gviFieldType FieldType,
        /*[out,retval]*/ struct ICodedValueDomain * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRangeDomain (
        BSTR DomainName,
        enum gviFieldType FieldType,
        /*[out,retval]*/ struct IRangeDomain * * pVal ) = 0;
};

struct __declspec(uuid("085d6e5a-ec09-4366-95e3-74f133dcb9c6"))
IDataSourcePluginManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    GUID Register (
        _bstr_t PluginPath );
    HRESULT Unregister (
        GUID PluginGuid );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Register (
        BSTR PluginPath,
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall raw_Unregister (
        GUID PluginGuid ) = 0;
};

struct __declspec(uuid("b5e5963b-d058-4969-a776-2d535eac0c2f"))
IEdgeBarrier : INetworkBarrier
{
    //
    // Property data
    //

    __declspec(property(get=GetBarrierSide,put=PutBarrierSide))
    enum gviNetworkSide BarrierSide;

    //
    // Wrapper methods for error-handling
    //

    enum gviNetworkSide GetBarrierSide ( );
    void PutBarrierSide (
        enum gviNetworkSide pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BarrierSide (
        /*[out,retval]*/ enum gviNetworkSide * pVal ) = 0;
      virtual HRESULT __stdcall put_BarrierSide (
        /*[in]*/ enum gviNetworkSide pVal ) = 0;
};

struct __declspec(uuid("87acb484-cb31-426e-9cd4-d36228407ef0"))
IJunctionBarrier : INetworkBarrier
{};

struct __declspec(uuid("364ed8ef-2475-4b4a-9dfa-b785b0418cbb"))
ConnectionInfo;
    // [ default ] interface IDispatch
    // interface IConnectionInfo

struct __declspec(uuid("dc6f0efa-8b18-4a97-83d6-46a1a87c9cc5"))
DataSourceFactory;
    // [ default ] interface IDispatch
    // interface IDataSourceFactory

struct __declspec(uuid("469f7f3e-fe2e-46c8-8169-0b7896eff3d7"))
FieldInfo;
    // [ default ] interface IDispatch
    // interface IFieldInfo

struct __declspec(uuid("634c1476-2eeb-4a09-a631-891428c9d091"))
GeometryDef;
    // [ default ] interface IDispatch
    // interface IGeometryDef

struct __declspec(uuid("e504b735-a3af-4d21-af4c-38c0a6f9b82d"))
FieldInfoCollection;
    // [ default ] interface IDispatch
    // interface IFieldInfoCollection

struct __declspec(uuid("35c74e1d-dedf-4940-89b3-9e873d149dc2"))
DbIndexInfo;
    // [ default ] interface IDispatch
    // interface IDbIndexInfo

struct __declspec(uuid("d3fea79c-c7b8-4bbf-9d5d-83137d28ef42"))
GridIndexInfo;
    // [ default ] interface IDispatch
    // interface IGridIndexInfo

struct __declspec(uuid("532f5083-1c7c-40df-8b78-d9e8a221cf75"))
QueryFilter;
    // [ default ] interface IDispatch
    // interface IQueryFilter

struct __declspec(uuid("859d01c3-620f-4a3b-b928-095642b6bf20"))
Conflict;
    // [ default ] interface IDispatch
    // interface IConflict

struct __declspec(uuid("b040dab1-3033-45b2-a880-2ac44f8786ff"))
CodedValueDomain;
    // [ default ] interface IDispatch
    // interface ICodedValueDomain

struct __declspec(uuid("9cb4b869-f16b-44f5-bd6a-d225bb7c8855"))
ReplicationFactory;
    // [ default ] interface IDispatch
    // interface IReplicationFactory

struct __declspec(uuid("3c8a4581-1555-4691-98bc-9c1f7eeb8bc9"))
RowBufferCollection;
    // [ default ] interface IDispatch
    // interface IRowBufferCollection

struct __declspec(uuid("9b6b80a9-53cd-43d7-bf43-deadd57bb200"))
SpatialFilter;
    // [ default ] interface IDispatch
    // interface ISpatialFilter

struct __declspec(uuid("13b79e11-8cf4-49b7-b439-d9b4b24a229b"))
RangeDomain;
    // [ default ] interface IDispatch
    // interface IRangeDomain

struct __declspec(uuid("ade59e51-444b-4135-a695-6654d29832cf"))
RowBufferFactory;
    // [ default ] interface IDispatch
    // interface IRowBufferFactory

struct __declspec(uuid("3e65b15d-d61e-452b-bc81-5e0cdb6f8c79"))
DomainFactory;
    // [ default ] interface IDispatch
    // interface IDomainFactory

struct __declspec(uuid("ea4a5691-3433-4bf5-b4c7-7cbcd5361ca0"))
RenderIndexInfo;
    // [ default ] interface IDispatch
    // interface IRenderIndexInfo

struct __declspec(uuid("be9f2283-f145-4f43-86b2-a1a817c4483d"))
FeatureClass;
    // [ default ] interface IDispatch
    // interface IFeatureClass

struct __declspec(uuid("a6c858c0-5f65-446d-b481-d282a476298f"))
Replication;
    // [ default ] interface IReplication

struct __declspec(uuid("305f0d4f-b25b-4b68-814e-3d64c4427372"))
CheckOut;
    // [ default ] interface ICheckOut

struct __declspec(uuid("8dd5ece0-faf7-4aab-a518-c7580dbc2d41"))
CheckIn;
    // [ default ] interface ICheckIn

struct __declspec(uuid("252ecfe2-b225-4bcb-aa71-1582c751c056"))
FeatureProgress;
    // [ default ] interface IDispatch
    // interface IFeatureProgress

struct __declspec(uuid("174ef611-fb9d-47d7-8a93-3728e4b0407f"))
FdeCursor;
    // [ default ] interface IDispatch
    // interface IFdeCursor

struct __declspec(uuid("2d5b2967-bc25-4bd8-a26a-5bcb66b132e8"))
SubTypeInfo;
    // [ default ] interface ISubTypeInfo

struct __declspec(uuid("5cbbc5dd-0381-47c0-bd57-d5d38c8f9132"))
FieldDomainInfo;
    // [ default ] interface IFieldDomainInfo

struct __declspec(uuid("895bdd41-f5b7-482f-81bc-d1713877be3d"))
IndexInfoCollection;
    // [ default ] interface IIndexInfoCollection

struct __declspec(uuid("bd2bcbae-2fc4-4bbd-aea3-1521f9303865"))
EnumResName;
    // [ default ] interface IEnumResName

struct __declspec(uuid("0ed1b360-d94e-447c-96fe-431275de847c"))
Attachment;
    // [ default ] interface IDispatch
    // interface IAttachment

struct __declspec(uuid("30b1eb04-55c2-46bb-b5f6-9789ebd591de"))
AttachmentCollection;
    // [ default ] interface IAttachmentCollection

struct __declspec(uuid("e1867cfc-52ce-4798-b08c-5c8d46c91d3c"))
TemporalFilter;
    // [ default ] interface ITemporalFilter

struct __declspec(uuid("753e16b5-4009-4012-8422-23321c7ef471"))
TemporalInstance;
    // [ default ] interface ITemporalInstance

struct __declspec(uuid("645e5a5b-693d-464f-8910-05ef453b795b"))
DataSourcePluginManager;
    // [ default ] interface IDataSourcePluginManager

struct __declspec(uuid("af105142-534d-4d0f-9c39-d10febaf2a00"))
NetworkAttribute;
    // [ default ] interface IDispatch
    // interface INetworkAttribute

struct __declspec(uuid("8c33fa55-fd61-4654-8ad8-cdcdbc7d45c4"))
JunctionNetworkSource;
    // [ default ] interface IDispatch
    // interface IJunctionNetworkSource

struct __declspec(uuid("59447144-9e64-4ca1-bf05-0c37fd1d8e0f"))
EdgeNetworkSource;
    // [ default ] interface IDispatch
    // interface IEdgeNetworkSource

struct __declspec(uuid("dbe38837-ec6d-43e7-baef-4ce397f66a8f"))
NetworkFieldEvaluator;
    // [ default ] interface IDispatch
    // interface INetworkFieldEvaluator

struct __declspec(uuid("2a8efded-d5a2-415e-8d5a-536f1c29940e"))
NetworkConstantEvaluator;
    // [ default ] interface IDispatch
    // interface INetworkConstantEvaluator

struct __declspec(uuid("eb50e00c-1826-41da-a31c-70a1b2f131e5"))
NetworkLocation;
    // [ default ] interface IDispatch
    // interface INetworkLocation

struct __declspec(uuid("ea2e0bca-65ed-4695-93cb-4009a00611c4"))
NetworkEventLocation;
    // [ default ] interface IDispatch
    // interface INetworkEventLocation

struct __declspec(uuid("c3c66780-fd70-4359-bc75-ba5d302d2797"))
NetworkScriptEvaluator;
    // [ default ] interface IDispatch
    // interface INetworkScriptEvaluator

struct __declspec(uuid("1637acbc-4840-447f-9ea5-c5f70c00e738"))
NetworkEdge;
    // [ default ] interface IDispatch
    // interface INetworkEdge

struct __declspec(uuid("d4a339e5-d97e-463f-8053-12be66133e63"))
NetworkJunction;
    // [ default ] interface IDispatch
    // interface INetworkJunction

struct __declspec(uuid("9cf4d038-c074-404e-ad88-e8c26a8a1372"))
NetworkElementCollection;
    // [ default ] interface INetworkElementCollection

struct __declspec(uuid("2663fca1-5d7c-4d7e-b6a3-282c2e61387b"))
NetworkEdgeCollection;
    // [ default ] interface INetworkEdgeCollection

struct __declspec(uuid("47fb4728-9599-4be6-a5c8-80754d8148a3"))
LogicalNetwork;
    // [ default ] interface ILogicalNetwork

struct __declspec(uuid("4d771219-87a8-42ca-90b1-5272156af1b5"))
EdgeBarrier;
    // [ default ] interface IEdgeBarrier

struct __declspec(uuid("c3156659-383f-4e38-8fcc-ff503dca56e5"))
JunctionBarrier;
    // [ default ] interface IJunctionBarrier

struct __declspec(uuid("8648f1d5-f5c5-4c0f-9d12-c39d73d8669e"))
Tools;
    // [ default ] interface ITools

struct __declspec(uuid("6113a8c3-daf7-48bc-87f5-d8a0d3b39ad0"))
ITable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetTableName))
    _bstr_t TableName;
    __declspec(property(get=GetType))
    enum gviDataSetType Type;
    __declspec(property(get=GetDataSource))
    IDataSourcePtr DataSource;
    __declspec(property(get=GetPrimaryKeys))
    SAFEARRAY * PrimaryKeys;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    HRESULT AddField (
        struct IFieldInfo * Field );
    HRESULT ModifyField (
        struct IFieldInfo * Field );
    HRESULT DeleteField (
        _bstr_t FieldName );
    IFieldInfoCollectionPtr GetFields ( );
    HRESULT AddDbIndex (
        struct IDbIndexInfo * Index );
    HRESULT DeleteDbIndex (
        _bstr_t IndexName );
    HRESULT RebuildDbIndex (
        _bstr_t IndexName );
    IDbIndexInfoCollectionPtr GetDbIndexInfos ( );
    _bstr_t GetTableName ( );
    enum gviDataSetType GetType ( );
    IRowBufferPtr CreateRowBuffer ( );
    IRowBufferPtr GetRow (
        long Id );
    HRESULT DeleteRow (
        long Id );
    HRESULT Store (
        struct IRowBuffer * Row );
    IFdeCursorPtr Update (
        struct IQueryFilter * Filter );
    IFdeCursorPtr Insert ( );
    long Delete (
        struct IQueryFilter * Filter );
    IFdeCursorPtr Search (
        struct IQueryFilter * Filter,
        VARIANT_BOOL ReuseRow );
    long GetCount (
        struct IQueryFilter * Filter );
    IFdeCursorPtr GetRows (
        SAFEARRAY * Ids,
        VARIANT_BOOL ReuseRow );
    HRESULT UpdateRows (
        struct IRowBufferCollection * Rows,
        VARIANT_BOOL UpdateNotChangeValue );
    HRESULT Truncate ( );
    IDataSourcePtr GetDataSource ( );
    SAFEARRAY * GetPrimaryKeys ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall raw_AddField (
        struct IFieldInfo * Field ) = 0;
      virtual HRESULT __stdcall raw_ModifyField (
        struct IFieldInfo * Field ) = 0;
      virtual HRESULT __stdcall raw_DeleteField (
        BSTR FieldName ) = 0;
      virtual HRESULT __stdcall raw_GetFields (
        /*[out,retval]*/ struct IFieldInfoCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddDbIndex (
        struct IDbIndexInfo * Index ) = 0;
      virtual HRESULT __stdcall raw_DeleteDbIndex (
        BSTR IndexName ) = 0;
      virtual HRESULT __stdcall raw_RebuildDbIndex (
        BSTR IndexName ) = 0;
      virtual HRESULT __stdcall raw_GetDbIndexInfos (
        /*[out,retval]*/ struct IDbIndexInfoCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_TableName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviDataSetType * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRowBuffer (
        /*[out,retval]*/ struct IRowBuffer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRow (
        long Id,
        /*[out,retval]*/ struct IRowBuffer * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteRow (
        long Id ) = 0;
      virtual HRESULT __stdcall raw_Store (
        struct IRowBuffer * Row ) = 0;
      virtual HRESULT __stdcall raw_Update (
        struct IQueryFilter * Filter,
        /*[out,retval]*/ struct IFdeCursor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[out,retval]*/ struct IFdeCursor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        struct IQueryFilter * Filter,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Search (
        struct IQueryFilter * Filter,
        VARIANT_BOOL ReuseRow,
        /*[out,retval]*/ struct IFdeCursor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCount (
        struct IQueryFilter * Filter,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRows (
        SAFEARRAY * Ids,
        VARIANT_BOOL ReuseRow,
        /*[out,retval]*/ struct IFdeCursor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateRows (
        struct IRowBufferCollection * Rows,
        VARIANT_BOOL UpdateNotChangeValue ) = 0;
      virtual HRESULT __stdcall raw_Truncate ( ) = 0;
      virtual HRESULT __stdcall get_DataSource (
        /*[out,retval]*/ struct IDataSource * * pVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryKeys (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

struct __declspec(uuid("d746bee4-69f7-4787-97df-46c71971ccb5"))
IDataSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetIsEditing))
    VARIANT_BOOL IsEditing;
    __declspec(property(get=GetConnectionInfo))
    IConnectionInfoPtr ConnectionInfo;
    __declspec(property(get=GetFdeSchemaPrefix))
    _bstr_t FdeSchemaPrefix;
    __declspec(property(get=GetDatabaseTime))
    DATE DatabaseTime;
    __declspec(property(get=GetSQLCheck))
    ISQLCheckPtr SQLCheck;
    __declspec(property(get=GetCustomData,put=PutCustomData))
    IPropertySetPtr CustomData;
    __declspec(property(get=GetCreateTime))
    DATE CreateTime;
    __declspec(property(get=GetGuid))
    GUID Guid;
    __declspec(property(get=GetGuidString))
    _bstr_t GuidString;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    HRESULT StartEditing ( );
    HRESULT StopEditing (
        VARIANT_BOOL Save );
    VARIANT_BOOL GetIsEditing ( );
    IConnectionInfoPtr GetConnectionInfo ( );
    _bstr_t GetFdeSchemaPrefix ( );
    DATE GetDatabaseTime ( );
    IFeatureDataSetPtr OpenFeatureDataset (
        _bstr_t FeatureDataSetName );
    HRESULT DeleteFeatureDataset (
        _bstr_t FeatureDataSetName );
    IDomainPtr GetDomainByName (
        _bstr_t Domain );
    HRESULT AddDomain (
        struct IDomain * Domain );
    HRESULT ModifyDomain (
        struct IDomain * Domain );
    HRESULT DeleteDomain (
        _bstr_t Domain );
    IFeatureDataSetPtr CreateFeatureDataset (
        _bstr_t Name,
        struct ISpatialCRS * SpatialCRS );
    SAFEARRAY * GetFeatureDatasetNames ( );
    VARIANT_BOOL HasCapability (
        enum gviFdbCapability Capability );
    SAFEARRAY * GetDomainNames ( );
    ITablePtr CreateTable (
        _bstr_t TableName,
        _bstr_t PrimaryKey,
        struct IFieldInfoCollection * Fields );
    ITablePtr OpenTable (
        _bstr_t TableName );
    HRESULT DeleteTableByName (
        _bstr_t TableName );
    IQueryDefPtr CreateQueryDef ( );
    HRESULT ReOpen ( );
    VARIANT_BOOL Ping ( );
    HRESULT ChangePassword (
        _bstr_t NewPassword );
    GUID GetGuid ( );
    _bstr_t GetGuidString ( );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t EscapeObjectName (
        _bstr_t ObjectName );
    _bstr_t GetLocks (
        long ClassId );
    SAFEARRAY * QueryDomainRefFields (
        long DomainId );
    ISQLCheckPtr GetSQLCheck ( );
    HRESULT ExecuteUpdate (
        _bstr_t SQL );
    SAFEARRAY * GetTableNames (
        VARIANT_BOOL IncludeFdbTable );
    DATE GetCreateTime ( );
    HRESULT Close ( );
    HRESULT GetFDBVersion (
        long * Major,
        long * Minor,
        long * Bugfix );
    VARIANT_BOOL ValidateName (
        enum gviNameType NameType,
        _bstr_t ObjectName,
        BSTR * FixedName );
    IPropertySetPtr GetCustomData ( );
    void PutCustomData (
        struct IPropertySet * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall raw_StartEditing ( ) = 0;
      virtual HRESULT __stdcall raw_StopEditing (
        VARIANT_BOOL Save ) = 0;
      virtual HRESULT __stdcall get_IsEditing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionInfo (
        /*[out,retval]*/ struct IConnectionInfo * * pVal ) = 0;
      virtual HRESULT __stdcall get_FdeSchemaPrefix (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DatabaseTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenFeatureDataset (
        BSTR FeatureDataSetName,
        /*[out,retval]*/ struct IFeatureDataSet * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteFeatureDataset (
        BSTR FeatureDataSetName ) = 0;
      virtual HRESULT __stdcall raw_GetDomainByName (
        BSTR Domain,
        /*[out,retval]*/ struct IDomain * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddDomain (
        struct IDomain * Domain ) = 0;
      virtual HRESULT __stdcall raw_ModifyDomain (
        struct IDomain * Domain ) = 0;
      virtual HRESULT __stdcall raw_DeleteDomain (
        BSTR Domain ) = 0;
      virtual HRESULT __stdcall raw_CreateFeatureDataset (
        BSTR Name,
        struct ISpatialCRS * SpatialCRS,
        /*[out,retval]*/ struct IFeatureDataSet * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFeatureDatasetNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasCapability (
        enum gviFdbCapability Capability,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDomainNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTable (
        BSTR TableName,
        BSTR PrimaryKey,
        struct IFieldInfoCollection * Fields,
        /*[out,retval]*/ struct ITable * * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenTable (
        BSTR TableName,
        /*[out,retval]*/ struct ITable * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteTableByName (
        BSTR TableName ) = 0;
      virtual HRESULT __stdcall raw_CreateQueryDef (
        /*[out,retval]*/ struct IQueryDef * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ReOpen ( ) = 0;
      virtual HRESULT __stdcall raw_Ping (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ChangePassword (
        BSTR NewPassword ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall get_GuidString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_EscapeObjectName (
        BSTR ObjectName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLocks (
        long ClassId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_QueryDomainRefFields (
        long DomainId,
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_SQLCheck (
        /*[out,retval]*/ struct ISQLCheck * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExecuteUpdate (
        BSTR SQL ) = 0;
      virtual HRESULT __stdcall raw_GetTableNames (
        VARIANT_BOOL IncludeFdbTable,
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_CreateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_GetFDBVersion (
        /*[out]*/ long * Major,
        /*[out]*/ long * Minor,
        /*[out]*/ long * Bugfix ) = 0;
      virtual HRESULT __stdcall raw_ValidateName (
        enum gviNameType NameType,
        BSTR ObjectName,
        /*[out]*/ BSTR * FixedName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomData (
        /*[in]*/ struct IPropertySet * pVal ) = 0;
};

struct __declspec(uuid("16bcd644-c298-4614-980e-f7b51cad0c59"))
IDataSourceFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IDataSourcePtr CreateDataSource (
        struct IConnectionInfo * ConnectionInfo,
        _bstr_t Repository );
    IDataSourcePtr OpenDataSource (
        struct IConnectionInfo * ConnectionInfo );
    IDataSourcePtr OpenDataSourceByString (
        _bstr_t ConnectionString );
    VARIANT_BOOL HasDataSource (
        struct IConnectionInfo * ConnectionInfo );
    VARIANT_BOOL HasDataSourceByString (
        _bstr_t ConnectionString );
    SAFEARRAY * GetDataBaseNames (
        struct IConnectionInfo * ConnectionInfo,
        VARIANT_BOOL OnlyFdb );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateDataSource (
        struct IConnectionInfo * ConnectionInfo,
        BSTR Repository,
        /*[out,retval]*/ struct IDataSource * * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenDataSource (
        struct IConnectionInfo * ConnectionInfo,
        /*[out,retval]*/ struct IDataSource * * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenDataSourceByString (
        BSTR ConnectionString,
        /*[out,retval]*/ struct IDataSource * * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasDataSource (
        struct IConnectionInfo * ConnectionInfo,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasDataSourceByString (
        BSTR ConnectionString,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataBaseNames (
        struct IConnectionInfo * ConnectionInfo,
        VARIANT_BOOL OnlyFdb,
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

struct __declspec(uuid("09b2d417-a4c1-4a56-ae56-49e450c7d1c4"))
IFeatureDataSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalObject,put=PutInternalObject))
    __int64 InternalObject;
    __declspec(property(get=GetDataSource))
    IDataSourcePtr DataSource;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAlias,put=PutAlias))
    _bstr_t Alias;
    __declspec(property(get=GetSpatialReference,put=PutSpatialReference))
    ISpatialCRSPtr SpatialReference;
    __declspec(property(get=GetCreateTime))
    DATE CreateTime;
    __declspec(property(get=GetLastUpdateTime))
    DATE LastUpdateTime;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetGuid))
    GUID Guid;
    __declspec(property(get=GetGuidString))
    _bstr_t GuidString;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetCustomData,put=PutCustomData))
    IPropertySetPtr CustomData;
    __declspec(property(get=GetIsCheckOut))
    VARIANT_BOOL IsCheckOut;
    __declspec(property(get=GetIsCheckOutAsMaster))
    VARIANT_BOOL IsCheckOutAsMaster;

    //
    // Wrapper methods for error-handling
    //

    __int64 GetInternalObject ( );
    void PutInternalObject (
        __int64 pVal );
    IDataSourcePtr GetDataSource ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetAlias ( );
    void PutAlias (
        _bstr_t pVal );
    IFeatureClassPtr CreateFeatureClass (
        _bstr_t Name,
        struct IFieldInfoCollection * Fields );
    IObjectClassPtr CreateObjectClass (
        _bstr_t Name,
        struct IFieldInfoCollection * Fields );
    IFeatureClassPtr OpenFeatureClass (
        _bstr_t Name );
    IObjectClassPtr OpenObjectClass (
        _bstr_t Name );
    VARIANT_BOOL DeleteByName (
        _bstr_t Name );
    SAFEARRAY * GetNamesByType (
        enum gviDataSetType DataSetType );
    ISpatialCRSPtr GetSpatialReference ( );
    void PutSpatialReference (
        struct ISpatialCRS * pVal );
    DATE GetCreateTime ( );
    DATE GetLastUpdateTime ( );
    long GetId ( );
    GUID GetGuid ( );
    _bstr_t GetGuidString ( );
    VARIANT_BOOL GetIsCheckOut ( );
    VARIANT_BOOL GetIsCheckOutAsMaster ( );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    IPropertySetPtr GetCustomData ( );
    void PutCustomData (
        struct IPropertySet * pVal );
    INetworkManagerPtr GetNetworkManager ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InternalObject (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalObject (
        /*[in]*/ __int64 pVal ) = 0;
      virtual HRESULT __stdcall get_DataSource (
        /*[out,retval]*/ struct IDataSource * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Alias (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Alias (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFeatureClass (
        BSTR Name,
        struct IFieldInfoCollection * Fields,
        /*[out,retval]*/ struct IFeatureClass * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateObjectClass (
        BSTR Name,
        struct IFieldInfoCollection * Fields,
        /*[out,retval]*/ struct IObjectClass * * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenFeatureClass (
        BSTR Name,
        /*[out,retval]*/ struct IFeatureClass * * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenObjectClass (
        BSTR Name,
        /*[out,retval]*/ struct IObjectClass * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteByName (
        BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNamesByType (
        enum gviDataSetType DataSetType,
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_SpatialReference (
        /*[out,retval]*/ struct ISpatialCRS * * pVal ) = 0;
      virtual HRESULT __stdcall put_SpatialReference (
        /*[in]*/ struct ISpatialCRS * pVal ) = 0;
      virtual HRESULT __stdcall get_CreateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_LastUpdateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall get_GuidString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCheckOut (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCheckOutAsMaster (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomData (
        /*[in]*/ struct IPropertySet * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkManager (
        /*[out,retval]*/ struct INetworkManager * * pVal ) = 0;
};

struct __declspec(uuid("81389969-3aef-45a2-97d8-3cd6f6a7ca42"))
IObjectClass : ITable
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetGuid))
    GUID Guid;
    __declspec(property(get=GetGuidString))
    _bstr_t GuidString;
    __declspec(property(get=GetFeatureDataSet))
    IFeatureDataSetPtr FeatureDataSet;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetTemporalManager))
    ITemporalManagerPtr TemporalManager;
    __declspec(property(get=GetAliasName,put=PutAliasName))
    _bstr_t AliasName;
    __declspec(property(get=GetTemporalColumnName))
    _bstr_t TemporalColumnName;
    __declspec(property(get=GetFidFieldName))
    _bstr_t FidFieldName;
    __declspec(property(get=GetCreateTime))
    DATE CreateTime;
    __declspec(property(get=GetLastUpdateTime))
    DATE LastUpdateTime;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetLockType,put=PutLockType))
    enum gviLockType LockType;
    __declspec(property(get=GetCustomData,put=PutCustomData))
    IPropertySetPtr CustomData;
    __declspec(property(get=GetSubTypeFieldIndex))
    long SubTypeFieldIndex;
    __declspec(property(get=GetSubTypeFieldName,put=PutSubTypeFieldName))
    _bstr_t SubTypeFieldName;
    __declspec(property(get=GetHasSubTypes))
    VARIANT_BOOL HasSubTypes;
    __declspec(property(get=GetSubTypeCount))
    long SubTypeCount;
    __declspec(property(get=GetDefaultSubTypeCode,put=PutDefaultSubTypeCode))
    long DefaultSubTypeCode;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    long GetId ( );
    GUID GetGuid ( );
    _bstr_t GetGuidString ( );
    IFeatureDataSetPtr GetFeatureDataSet ( );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetAliasName ( );
    void PutAliasName (
        _bstr_t pVal );
    _bstr_t GetFidFieldName ( );
    DATE GetCreateTime ( );
    DATE GetLastUpdateTime ( );
    VARIANT_BOOL GetReadOnly ( );
    enum gviLockType GetLockType ( );
    void PutLockType (
        enum gviLockType pVal );
    _bstr_t GetLocks ( );
    HRESULT AddSubType (
        struct ISubTypeInfo * SubType );
    HRESULT ModifySubType (
        struct ISubTypeInfo * SubType );
    HRESULT DeleteSubType (
        long SubTypeCode );
    ISubTypeInfoPtr GetSubType (
        long Index );
    long GetSubTypeFieldIndex ( );
    _bstr_t GetSubTypeFieldName ( );
    void PutSubTypeFieldName (
        _bstr_t pVal );
    VARIANT_BOOL GetHasSubTypes ( );
    long GetSubTypeCount ( );
    long GetDefaultSubTypeCode ( );
    void PutDefaultSubTypeCode (
        long pVal );
    HRESULT Close ( );
    HRESULT EnableAttachment ( );
    HRESULT DisableAttachment ( );
    VARIANT_BOOL HasAttachments ( );
    IAttachmentManagerPtr GetAttachmentManager ( );
    VARIANT_BOOL HasTemporal ( );
    HRESULT EnableTemporal (
        DATE DefaultBirthDatetime,
        _bstr_t BirthDateColumn,
        _bstr_t DeathDateColumn );
    HRESULT DisableTemporal ( );
    ITemporalManagerPtr GetTemporalManager ( );
    _bstr_t GetTemporalColumnName ( );
    IPropertySetPtr GetCustomData ( );
    void PutCustomData (
        struct IPropertySet * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ GUID * pVal ) = 0;
      virtual HRESULT __stdcall get_GuidString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureDataSet (
        /*[out,retval]*/ struct IFeatureDataSet * * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AliasName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AliasName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FidFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CreateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_LastUpdateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LockType (
        /*[out,retval]*/ enum gviLockType * pVal ) = 0;
      virtual HRESULT __stdcall put_LockType (
        /*[in]*/ enum gviLockType pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLocks (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddSubType (
        struct ISubTypeInfo * SubType ) = 0;
      virtual HRESULT __stdcall raw_ModifySubType (
        struct ISubTypeInfo * SubType ) = 0;
      virtual HRESULT __stdcall raw_DeleteSubType (
        long SubTypeCode ) = 0;
      virtual HRESULT __stdcall raw_GetSubType (
        long Index,
        /*[out,retval]*/ struct ISubTypeInfo * * pVal ) = 0;
      virtual HRESULT __stdcall get_SubTypeFieldIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SubTypeFieldName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SubTypeFieldName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasSubTypes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SubTypeCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultSubTypeCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultSubTypeCode (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_EnableAttachment ( ) = 0;
      virtual HRESULT __stdcall raw_DisableAttachment ( ) = 0;
      virtual HRESULT __stdcall raw_HasAttachments (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttachmentManager (
        /*[out,retval]*/ struct IAttachmentManager * * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasTemporal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_EnableTemporal (
        DATE DefaultBirthDatetime,
        BSTR BirthDateColumn,
        BSTR DeathDateColumn ) = 0;
      virtual HRESULT __stdcall raw_DisableTemporal ( ) = 0;
      virtual HRESULT __stdcall get_TemporalManager (
        /*[out,retval]*/ struct ITemporalManager * * pVal ) = 0;
      virtual HRESULT __stdcall get_TemporalColumnName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ struct IPropertySet * * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomData (
        /*[in]*/ struct IPropertySet * pVal ) = 0;
};

struct __declspec(uuid("32684cb2-cedb-4956-afb4-240029990799"))
IFeatureClass : IObjectClass
{
    //
    // Wrapper methods for error-handling
    //

    IIndexInfoCollectionPtr GetSpatialIndexInfos ( );
    HRESULT AddSpatialIndex (
        struct IIndexInfo * IndexInfo );
    HRESULT DeleteSpatialIndex (
        _bstr_t GeoField );
    HRESULT RebuildSpatialIndex (
        _bstr_t GeoFieldName );
    IIndexInfoCollectionPtr GetRenderIndexInfos ( );
    HRESULT AddRenderIndex (
        struct IRenderIndexInfo * IndexInfo );
    HRESULT DeleteRenderIndex (
        _bstr_t GeoField );
    HRESULT RebuildRenderIndex (
        _bstr_t GeoField,
        enum gviRenderIndexRebuildType RebuildType );
    IEnvelopePtr GetFeaturesEnvelope (
        SAFEARRAY * FidArray,
        _bstr_t GeoField );
    HRESULT UpdateExtent (
        _bstr_t GeoField );
    HRESULT SetRenderIndexEnabled (
        _bstr_t GeoField,
        VARIANT_BOOL Enabled );
    IGridIndexInfoPtr CalculateDefaultGridIndex (
        _bstr_t GeoFieldName );
    IRenderIndexInfoPtr CalculateDefaultRenderIndex (
        _bstr_t GeoFieldName );
    IEnvelopePtr CalculateExtent (
        _bstr_t GeoFieldName );
    HRESULT PurgeGeometry (
        _bstr_t GeoFieldName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetSpatialIndexInfos (
        /*[out,retval]*/ struct IIndexInfoCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddSpatialIndex (
        struct IIndexInfo * IndexInfo ) = 0;
      virtual HRESULT __stdcall raw_DeleteSpatialIndex (
        BSTR GeoField ) = 0;
      virtual HRESULT __stdcall raw_RebuildSpatialIndex (
        BSTR GeoFieldName ) = 0;
      virtual HRESULT __stdcall raw_GetRenderIndexInfos (
        /*[out,retval]*/ struct IIndexInfoCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddRenderIndex (
        struct IRenderIndexInfo * IndexInfo ) = 0;
      virtual HRESULT __stdcall raw_DeleteRenderIndex (
        BSTR GeoField ) = 0;
      virtual HRESULT __stdcall raw_RebuildRenderIndex (
        BSTR GeoField,
        enum gviRenderIndexRebuildType RebuildType ) = 0;
      virtual HRESULT __stdcall raw_GetFeaturesEnvelope (
        SAFEARRAY * FidArray,
        BSTR GeoField,
        /*[out,retval]*/ struct IEnvelope * * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateExtent (
        BSTR GeoField ) = 0;
      virtual HRESULT __stdcall raw_SetRenderIndexEnabled (
        BSTR GeoField,
        VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall raw_CalculateDefaultGridIndex (
        BSTR GeoFieldName,
        /*[out,retval]*/ struct IGridIndexInfo * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateDefaultRenderIndex (
        BSTR GeoFieldName,
        /*[out,retval]*/ struct IRenderIndexInfo * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateExtent (
        BSTR GeoFieldName,
        /*[out,retval]*/ struct IEnvelope * * pVal ) = 0;
      virtual HRESULT __stdcall raw_PurgeGeometry (
        BSTR GeoFieldName ) = 0;
};

struct __declspec(uuid("09b9f378-c108-4f2f-971e-c3e2cfb2915b"))
INetworkClosestFacilitySolver : INetworkSolver
{
    //
    // Property data
    //

    __declspec(property(get=GetEventLocationCount))
    long EventLocationCount;
    __declspec(property(get=GetFacilityLocationCount))
    long FacilityLocationCount;
    __declspec(property(get=GetRouteCount))
    long RouteCount;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddEventLocation (
        struct INetworkEventLocation * NetworkEventLocation );
    long GetEventLocationCount ( );
    INetworkEventLocationPtr GetEventLocation (
        long Index );
    HRESULT ClearEventLocations ( );
    HRESULT AddFacilityLocation (
        struct INetworkLocation * NetworkLocation );
    long GetFacilityLocationCount ( );
    INetworkLocationPtr GetFacilityLocation (
        long Index );
    HRESULT ClearFacilityLocations ( );
    HRESULT LoadFacilityLocationFromFeatureClass (
        struct IFeatureClass * FeatureClass,
        struct IQueryFilter * QueryFilter,
        _bstr_t GeoColumnName,
        _bstr_t FacilityNameColumn );
    long GetRouteCount ( );
    INetworkRoutePtr GetRoute (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddEventLocation (
        struct INetworkEventLocation * NetworkEventLocation ) = 0;
      virtual HRESULT __stdcall get_EventLocationCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetEventLocation (
        long Index,
        /*[out,retval]*/ struct INetworkEventLocation * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearEventLocations ( ) = 0;
      virtual HRESULT __stdcall raw_AddFacilityLocation (
        struct INetworkLocation * NetworkLocation ) = 0;
      virtual HRESULT __stdcall get_FacilityLocationCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFacilityLocation (
        long Index,
        /*[out,retval]*/ struct INetworkLocation * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearFacilityLocations ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFacilityLocationFromFeatureClass (
        struct IFeatureClass * FeatureClass,
        struct IQueryFilter * QueryFilter,
        BSTR GeoColumnName,
        BSTR FacilityNameColumn ) = 0;
      virtual HRESULT __stdcall get_RouteCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRoute (
        long Index,
        /*[out,retval]*/ struct INetworkRoute * * pVal ) = 0;
};

struct __declspec(uuid("01dd46f1-ba42-408d-a608-9de78bb1ef62"))
IReplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConflict))
    IConflictPtr Conflict;
    __declspec(property(put=PutOnReplicationStatusChanged))
    IDispatchPtr OnReplicationStatusChanged;

    //
    // Wrapper methods for error-handling
    //

    IConflictPtr GetConflict ( );
    HRESULT MergeFrom (
        struct IFeatureDataSet * Source,
        VARIANT_BOOL Truncate );
    HRESULT MergeTo (
        struct IFeatureDataSet * Destination,
        VARIANT_BOOL Truncate );
    HRESULT SetStepValue (
        long newVal );
    void PutOnReplicationStatusChanged (
        IDispatch * _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Conflict (
        /*[out,retval]*/ struct IConflict * * pVal ) = 0;
      virtual HRESULT __stdcall raw_MergeFrom (
        struct IFeatureDataSet * Source,
        VARIANT_BOOL Truncate ) = 0;
      virtual HRESULT __stdcall raw_MergeTo (
        struct IFeatureDataSet * Destination,
        VARIANT_BOOL Truncate ) = 0;
      virtual HRESULT __stdcall raw_SetStepValue (
        long newVal ) = 0;
      virtual HRESULT __stdcall put_OnReplicationStatusChanged (
        /*[in]*/ IDispatch * _arg1 ) = 0;
};

struct __declspec(uuid("b26aa204-533b-4f65-a74b-0ac23224ba0d"))
ICheckOut : IReplication
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Validate ( );
    HRESULT CheckOut ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Validate ( ) = 0;
      virtual HRESULT __stdcall raw_CheckOut ( ) = 0;
};

struct __declspec(uuid("770404f1-ffb0-40c7-9581-0bf4dcb54c00"))
ICheckIn : IReplication
{
    //
    // Property data
    //

    __declspec(property(get=GetMasterConnectionInfo))
    IConnectionInfoPtr MasterConnectionInfo;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Validate ( );
    HRESULT CheckIn ( );
    HRESULT UndoCheckOut ( );
    IConnectionInfoPtr GetMasterConnectionInfo ( );
    HRESULT Commit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Validate ( ) = 0;
      virtual HRESULT __stdcall raw_CheckIn ( ) = 0;
      virtual HRESULT __stdcall raw_UndoCheckOut ( ) = 0;
      virtual HRESULT __stdcall get_MasterConnectionInfo (
        /*[out,retval]*/ struct IConnectionInfo * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Commit ( ) = 0;
};

struct __declspec(uuid("0d333027-da10-4e9a-8543-1e5f55e09ea6"))
IReplicationFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    ICheckOutPtr CreateCheckOut (
        struct IDataSource * DestinationDataSource,
        struct IDataSource * SourceDataSource,
        _bstr_t FeatureDataSetName,
        enum gviConflictDetectedType ConflictDetectedType );
    ICheckInPtr CreateCheckIn (
        struct IDataSource * SourceDataSource,
        _bstr_t FeatureDataSetName,
        enum gviConflictDetectedType ConflictDetectedType );
    IReplicationPtr CreateReplicationClass (
        struct IConnectionInfo * Connection,
        _bstr_t FeatureDataSetName );
    HRESULT UndoCheckOut (
        struct IDataSource * SrcDS,
        _bstr_t FeatureDataSetName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateCheckOut (
        struct IDataSource * DestinationDataSource,
        struct IDataSource * SourceDataSource,
        BSTR FeatureDataSetName,
        enum gviConflictDetectedType ConflictDetectedType,
        /*[out,retval]*/ struct ICheckOut * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCheckIn (
        struct IDataSource * SourceDataSource,
        BSTR FeatureDataSetName,
        enum gviConflictDetectedType ConflictDetectedType,
        /*[out,retval]*/ struct ICheckIn * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateReplicationClass (
        struct IConnectionInfo * Connection,
        BSTR FeatureDataSetName,
        /*[out,retval]*/ struct IReplication * * pVal ) = 0;
      virtual HRESULT __stdcall raw_UndoCheckOut (
        struct IDataSource * SrcDS,
        BSTR FeatureDataSetName ) = 0;
};

struct __declspec(uuid("c18b6255-8c4d-4b50-a104-8493ac3275d3"))
ITools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IModelPtr EstimateLandslideVolumeTool (
        struct IFeatureClass * FeatureClass,
        _bstr_t GeoField,
        struct IModel * ModelSlope,
        double Resolution,
        double * Volume );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_EstimateLandslideVolumeTool (
        struct IFeatureClass * FeatureClass,
        BSTR GeoField,
        struct IModel * ModelSlope,
        double Resolution,
        double * Volume,
        /*[out,retval]*/ struct IModel * * pModelIntersect ) = 0;
};

struct __declspec(uuid("64dc91ae-bc1e-4061-9ad3-bc9ea0d37823"))
INetworkManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    INetworkLoaderPtr CreateNetworkLoader ( );
    SAFEARRAY * GetNetworkNames ( );
    INetworkPtr GetNetwork (
        _bstr_t NetworkName );
    HRESULT DeleteNetwork (
        _bstr_t NetworkName );
    HRESULT ModifyNetwork (
        struct INetwork * Network );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateNetworkLoader (
        /*[out,retval]*/ struct INetworkLoader * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetwork (
        BSTR NetworkName,
        /*[out,retval]*/ struct INetwork * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteNetwork (
        BSTR NetworkName ) = 0;
      virtual HRESULT __stdcall raw_ModifyNetwork (
        struct INetwork * Network ) = 0;
};

struct __declspec(uuid("d889e13b-7b83-4a1b-96fe-0b41ffcf9458"))
INetwork : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDefaultXYTolerance))
    double DefaultXYTolerance;
    __declspec(property(get=GetXYTolerance,put=PutXYTolerance))
    double XYTolerance;
    __declspec(property(get=GetIsDirty))
    VARIANT_BOOL IsDirty;
    __declspec(property(get=GetType))
    enum gviNetworkType Type;
    __declspec(property(get=GetFeatureDataSet))
    IFeatureDataSetPtr FeatureDataSet;
    __declspec(property(get=GetEdgeDirection,put=PutEdgeDirection))
    enum gviEdgeDirection EdgeDirection;
    __declspec(property(get=GetElevationModel,put=PutElevationModel))
    enum gviNetworkElevationModel ElevationModel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    HRESULT AddNetworkAttribute (
        struct INetworkAttribute * NetworkAttribute );
    HRESULT DeleteNetworkAttribute (
        _bstr_t NetworkAttributeName );
    double GetDefaultXYTolerance ( );
    double GetXYTolerance ( );
    void PutXYTolerance (
        double pVal );
    VARIANT_BOOL CanUseFeatureClass (
        _bstr_t FeatureClassName );
    HRESULT BuildNetwork ( );
    VARIANT_BOOL GetIsDirty ( );
    SAFEARRAY * GetAttributeNames ( );
    INetworkAttributePtr GetAttribute (
        _bstr_t AttributeName );
    INetworkRouteSolverPtr CreateRouteSolver ( );
    INetworkClosestFacilitySolverPtr CreateClosestFacilitySolver ( );
    HRESULT GriddingPolygons (
        struct IGeometryCollection * GeoCollection,
        _bstr_t EdgeNetworkSourceName,
        _bstr_t EdgeNetworkSourceGeoColumnName,
        _bstr_t JunctionNetworkSourceName,
        _bstr_t JunctionNetworkSourceGeoColumnName,
        double GridSize );
    HRESULT AddSource (
        struct INetworkSource * NetworkSource );
    HRESULT DeleteSource (
        _bstr_t SourceName );
    INetworkSourcePtr GetNetworkSource (
        _bstr_t SourceName );
    SAFEARRAY * GetNetworkSourceNames ( );
    enum gviNetworkType GetType ( );
    HRESULT EstablishFlowDirection ( );
    INetworkFindConnectedSolverPtr CreateFindConnectedSolver ( );
    INetworkFindDisconnectedSolverPtr CreateFindDisconnectedSolver ( );
    INetworkFindAncestorsSolverPtr CreateFindAncestorsSolver ( );
    INetworkFindLoopsSolverPtr CreateFindLoopsSolver ( );
    INetworkTraceUpstreamSolverPtr CreateTraceUpstreamSolver ( );
    INetworkTraceDownstreamSolverPtr CreateTraceDownstreamSolver ( );
    ILogicalNetworkPtr GetLogicalNetwork ( );
    IFeatureDataSetPtr GetFeatureDataSet ( );
    void PutEdgeDirection (
        enum gviEdgeDirection pVal );
    enum gviEdgeDirection GetEdgeDirection ( );
    void PutElevationModel (
        enum gviNetworkElevationModel pVal );
    enum gviNetworkElevationModel GetElevationModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_AddNetworkAttribute (
        struct INetworkAttribute * NetworkAttribute ) = 0;
      virtual HRESULT __stdcall raw_DeleteNetworkAttribute (
        BSTR NetworkAttributeName ) = 0;
      virtual HRESULT __stdcall get_DefaultXYTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_XYTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XYTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_CanUseFeatureClass (
        BSTR FeatureClassName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_BuildNetwork ( ) = 0;
      virtual HRESULT __stdcall get_IsDirty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttributeNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttribute (
        BSTR AttributeName,
        /*[out,retval]*/ struct INetworkAttribute * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRouteSolver (
        /*[out,retval]*/ struct INetworkRouteSolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateClosestFacilitySolver (
        /*[out,retval]*/ struct INetworkClosestFacilitySolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GriddingPolygons (
        struct IGeometryCollection * GeoCollection,
        BSTR EdgeNetworkSourceName,
        BSTR EdgeNetworkSourceGeoColumnName,
        BSTR JunctionNetworkSourceName,
        BSTR JunctionNetworkSourceGeoColumnName,
        double GridSize ) = 0;
      virtual HRESULT __stdcall raw_AddSource (
        struct INetworkSource * NetworkSource ) = 0;
      virtual HRESULT __stdcall raw_DeleteSource (
        BSTR SourceName ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkSource (
        BSTR SourceName,
        /*[out,retval]*/ struct INetworkSource * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNetworkSourceNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum gviNetworkType * pVal ) = 0;
      virtual HRESULT __stdcall raw_EstablishFlowDirection ( ) = 0;
      virtual HRESULT __stdcall raw_CreateFindConnectedSolver (
        /*[out,retval]*/ struct INetworkFindConnectedSolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFindDisconnectedSolver (
        /*[out,retval]*/ struct INetworkFindDisconnectedSolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFindAncestorsSolver (
        /*[out,retval]*/ struct INetworkFindAncestorsSolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFindLoopsSolver (
        /*[out,retval]*/ struct INetworkFindLoopsSolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTraceUpstreamSolver (
        /*[out,retval]*/ struct INetworkTraceUpstreamSolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTraceDownstreamSolver (
        /*[out,retval]*/ struct INetworkTraceDownstreamSolver * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLogicalNetwork (
        /*[out,retval]*/ struct ILogicalNetwork * * pVal ) = 0;
      virtual HRESULT __stdcall get_FeatureDataSet (
        /*[out,retval]*/ struct IFeatureDataSet * * pVal ) = 0;
      virtual HRESULT __stdcall put_EdgeDirection (
        /*[in]*/ enum gviEdgeDirection pVal ) = 0;
      virtual HRESULT __stdcall get_EdgeDirection (
        /*[out,retval]*/ enum gviEdgeDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_ElevationModel (
        /*[in]*/ enum gviNetworkElevationModel pVal ) = 0;
      virtual HRESULT __stdcall get_ElevationModel (
        /*[out,retval]*/ enum gviNetworkElevationModel * pVal ) = 0;
};

struct __declspec(uuid("998a0d4d-aaa3-454b-b04c-f4fb3eebe639"))
ILogicalNetwork : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    INetworkEdgePtr GetEdgeElement (
        long FeatureClassId,
        long FeatureId,
        long SubID );
    INetworkEdgeCollectionPtr GetEdgeElements (
        long FeatureClassId,
        long FeatureId );
    INetworkJunctionPtr GetJunctionElement (
        long FeatureClassId,
        long FeatureId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEdgeElement (
        long FeatureClassId,
        long FeatureId,
        long SubID,
        /*[out,retval]*/ struct INetworkEdge * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetEdgeElements (
        long FeatureClassId,
        long FeatureId,
        /*[out,retval]*/ struct INetworkEdgeCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetJunctionElement (
        long FeatureClassId,
        long FeatureId,
        /*[out,retval]*/ struct INetworkJunction * * pVal ) = 0;
};

struct __declspec(uuid("ec1645c6-0f46-4efa-9e40-54e30e841e34"))
INetworkEdge : INetworkElement
{
    //
    // Property data
    //

    __declspec(property(get=GetSubID))
    long SubID;
    __declspec(property(get=GetHead))
    INetworkJunctionPtr Head;
    __declspec(property(get=GetTail))
    INetworkJunctionPtr Tail;
    __declspec(property(get=GetDirection))
    enum gviEdgeDirection Direction;

    //
    // Wrapper methods for error-handling
    //

    long GetSubID ( );
    INetworkJunctionPtr GetHead ( );
    INetworkJunctionPtr GetTail ( );
    enum gviEdgeDirection GetDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SubID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Head (
        /*[out,retval]*/ struct INetworkJunction * * pVal ) = 0;
      virtual HRESULT __stdcall get_Tail (
        /*[out,retval]*/ struct INetworkJunction * * pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum gviEdgeDirection * pVal ) = 0;
};

struct __declspec(uuid("aa1d1154-7472-40e8-becd-4904113c16fc"))
INetworkEdgeCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    INetworkEdgePtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    INetworkEdgePtr GetItem (
        long n );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long n,
        /*[out,retval]*/ struct INetworkEdge * * pVal ) = 0;
};

struct __declspec(uuid("b3f9441b-e33a-448a-9dd7-b1769a942b42"))
INetworkJunction : INetworkElement
{
    //
    // Property data
    //

    __declspec(property(get=GetOutgoningEdges))
    INetworkEdgeCollectionPtr OutgoningEdges;
    __declspec(property(get=GetIncomingEdges))
    INetworkEdgeCollectionPtr IncomingEdges;

    //
    // Wrapper methods for error-handling
    //

    INetworkEdgeCollectionPtr GetOutgoningEdges ( );
    INetworkEdgeCollectionPtr GetIncomingEdges ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OutgoningEdges (
        /*[out,retval]*/ struct INetworkEdgeCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_IncomingEdges (
        /*[out,retval]*/ struct INetworkEdgeCollection * * pVal ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_GcmFdeCore =
    {0x52b162ae,0x72e4,0x47ec,{0x9e,0x4b,0xe2,0x56,0x71,0xb7,0x0b,0x9b}};
extern "C" const GUID __declspec(selectany) IID_IDomain =
    {0xcebc7d62,0x06f0,0x4642,{0x89,0x27,0x8e,0x7d,0x6a,0x49,0xe4,0xca}};
extern "C" const GUID __declspec(selectany) IID_IGeometryDef =
    {0x88c4cb4f,0xa365,0x4f49,{0xbc,0x32,0xa8,0x68,0xfb,0x94,0x3b,0xdc}};
extern "C" const GUID __declspec(selectany) IID_IFieldInfo =
    {0xb7da87f9,0x8932,0x445c,{0xb7,0xc9,0xde,0xbe,0x20,0x9a,0x07,0x41}};
extern "C" const GUID __declspec(selectany) IID_IFieldInfoCollection =
    {0x6c8db5b9,0x1444,0x4c2a,{0xb4,0x58,0xe2,0xdd,0x17,0x69,0x7a,0x82}};
extern "C" const GUID __declspec(selectany) IID_IIndexInfo =
    {0x246934d8,0xcfb1,0x43d9,{0xab,0xc1,0xa8,0xb5,0x12,0xef,0x54,0x21}};
extern "C" const GUID __declspec(selectany) IID_IDbIndexInfo =
    {0xbfea4b1f,0x4494,0x4d29,{0x8b,0x65,0x2d,0xcf,0x98,0xdf,0x34,0xd4}};
extern "C" const GUID __declspec(selectany) IID_IDbIndexInfoCollection =
    {0x834046c1,0xe133,0x49c0,{0xb8,0x04,0xf8,0xac,0x28,0x9d,0x4e,0xf2}};
extern "C" const GUID __declspec(selectany) IID_IRowBuffer =
    {0x63b3a500,0x737b,0x4f70,{0x83,0xa6,0x71,0x50,0x7d,0x04,0x6d,0x37}};
extern "C" const GUID __declspec(selectany) IID_IQueryFilter =
    {0x73dbbd1a,0x7ea6,0x48f9,{0x86,0x4c,0xd2,0x36,0x69,0x2c,0xc5,0xcc}};
extern "C" const GUID __declspec(selectany) IID_IFdeCursor =
    {0xd74fbd58,0x8347,0x45f3,{0xa6,0xf7,0x31,0xf2,0xe5,0xe3,0x58,0xfb}};
extern "C" const GUID __declspec(selectany) IID_IRowBufferCollection =
    {0x73649ebb,0xa817,0x4916,{0xb3,0xa7,0x4e,0xa6,0xa7,0x9b,0xa7,0x1e}};
extern "C" const GUID __declspec(selectany) IID_IConnectionInfo =
    {0x9c008b24,0xf1e3,0x4f35,{0xbe,0x0d,0x3b,0x2b,0x47,0xd3,0x74,0xb3}};
extern "C" const GUID __declspec(selectany) IID_IFieldDomainInfo =
    {0xe18180b5,0xbf6c,0x4d80,{0x9f,0xfb,0x2a,0x4c,0x83,0x78,0xf8,0x2d}};
extern "C" const GUID __declspec(selectany) IID_ISubTypeInfo =
    {0x73368600,0xf42d,0x4a62,{0x8f,0xb2,0xdd,0x55,0x59,0x08,0x05,0xcc}};
extern "C" const GUID __declspec(selectany) IID_IAttachment =
    {0x3009b1ee,0x55f1,0x4b2b,{0xa0,0xe4,0x10,0xb6,0xbf,0x8e,0xb1,0x32}};
extern "C" const GUID __declspec(selectany) IID_IAttachmentCollection =
    {0x4d9063d9,0x0384,0x4e2b,{0xb1,0xdc,0x4c,0xff,0x98,0xfd,0x41,0xdf}};
extern "C" const GUID __declspec(selectany) IID_IAttachmentManager =
    {0x32c0c9b0,0x01c3,0x496d,{0x94,0xd4,0xea,0x08,0x9e,0x48,0xf0,0x30}};
extern "C" const GUID __declspec(selectany) IID_ISpatialFilter =
    {0x72bdd153,0xcfc3,0x45fd,{0x84,0x69,0x72,0x84,0xa2,0x28,0x4e,0x92}};
extern "C" const GUID __declspec(selectany) IID_ITemporalFilter =
    {0x39953d1e,0x587e,0x4209,{0x90,0x95,0x34,0x2d,0xf1,0x77,0x0f,0xd8}};
extern "C" const GUID __declspec(selectany) IID_ITemporalInstance =
    {0x7fc59b78,0x557b,0x40e2,{0xb6,0x29,0x51,0x0c,0x45,0x9b,0x36,0x01}};
extern "C" const GUID __declspec(selectany) IID_ITemporalInstanceCursor =
    {0x1e10cf64,0xdb1f,0x4c9a,{0xa5,0xe0,0x6f,0xad,0x47,0x8c,0x0a,0x9c}};
extern "C" const GUID __declspec(selectany) IID_ITemporalCursor =
    {0xbbbda9ff,0x4724,0x41ef,{0xa0,0x95,0xa7,0xa5,0xe9,0x53,0x9e,0x32}};
extern "C" const GUID __declspec(selectany) IID_ITemporalManager =
    {0xa348bd14,0xbcb8,0x4463,{0x85,0x1f,0x0b,0x4d,0x1b,0xe3,0x78,0xc6}};
extern "C" const GUID __declspec(selectany) IID_IIndexInfoCollection =
    {0x5ef45c7d,0x1ff9,0x4d3f,{0xbe,0x1d,0x3e,0xeb,0xa5,0x43,0x40,0x0a}};
extern "C" const GUID __declspec(selectany) IID_IRenderIndexInfo =
    {0xebeacdc2,0x89c2,0x4200,{0x8a,0x44,0xc7,0xb0,0xa0,0x71,0x31,0x25}};
extern "C" const GUID __declspec(selectany) IID_IGridIndexInfo =
    {0x36b1c881,0xda4c,0x4826,{0xa1,0xff,0x2a,0x1b,0x81,0xb4,0x8e,0xe7}};
extern "C" const GUID __declspec(selectany) IID_INetworkEvaluator =
    {0xe2f7439b,0xd3af,0x4dc6,{0xaf,0xe5,0x64,0x9c,0x7a,0xe5,0x97,0x00}};
extern "C" const GUID __declspec(selectany) IID_INetworkSource =
    {0x48903576,0x4333,0x48dc,{0xb6,0x58,0xbd,0x15,0x2a,0xc7,0xf2,0xf8}};
extern "C" const GUID __declspec(selectany) IID_INetworkAttribute =
    {0x5e284da1,0xdcd2,0x497b,{0x80,0x72,0xc5,0x71,0x61,0xc7,0x8f,0x57}};
extern "C" const GUID __declspec(selectany) IID_INetworkLoader =
    {0xed90c380,0x26f2,0x489b,{0xb0,0x69,0xed,0x17,0x72,0x39,0x58,0xde}};
extern "C" const GUID __declspec(selectany) IID_INetworkBarrier =
    {0xfdba4ed2,0xf2dd,0x474a,{0x85,0x40,0x26,0xcf,0x1c,0x73,0x90,0x08}};
extern "C" const GUID __declspec(selectany) IID_INetworkLocation =
    {0x3659ede0,0x51e6,0x41b8,{0xa8,0x8b,0x72,0xe2,0x5f,0xa6,0xd0,0x21}};
extern "C" const GUID __declspec(selectany) IID_INetworkSolver =
    {0x0b88c079,0x0f3f,0x40da,{0x8c,0x33,0x3d,0xfa,0x47,0x2b,0xba,0x66}};
extern "C" const GUID __declspec(selectany) IID_INetworkElement =
    {0x2981a822,0x9053,0x497d,{0xa2,0x82,0x01,0x49,0x8e,0x0f,0x7f,0xa4}};
extern "C" const GUID __declspec(selectany) IID_INetworkElementCollection =
    {0x0a807521,0x53db,0x4e75,{0x88,0xdf,0xa2,0x8c,0xfd,0xfb,0x47,0x1f}};
extern "C" const GUID __declspec(selectany) IID_INetworkRouteSegment =
    {0x3929575f,0xabd1,0x4e07,{0x86,0x99,0xea,0x26,0x5e,0xc6,0x41,0xc5}};
extern "C" const GUID __declspec(selectany) IID_INetworkRoute =
    {0x6e683203,0x3d2c,0x4d9c,{0x89,0x32,0xf0,0x96,0x5a,0x87,0x14,0x47}};
extern "C" const GUID __declspec(selectany) IID_INetworkRouteSolver =
    {0xbc47ecd5,0x069b,0x46ca,{0x88,0x24,0x74,0x08,0x50,0xbb,0x44,0x7d}};
extern "C" const GUID __declspec(selectany) IID_INetworkEventLocation =
    {0x6ff796f1,0x4aef,0x4fcf,{0xa3,0x2a,0x55,0x59,0x7f,0xbb,0xc9,0xf9}};
extern "C" const GUID __declspec(selectany) IID_INetworkTraceResult =
    {0x1eb2fd11,0xce86,0x46cb,{0x93,0x6d,0xea,0x99,0x04,0x59,0xfc,0xe8}};
extern "C" const GUID __declspec(selectany) IID_INetworkFindConnectedSolver =
    {0x2e5c4e48,0x4a26,0x4b7b,{0xa8,0xfb,0xce,0xd7,0x45,0x85,0xe6,0x95}};
extern "C" const GUID __declspec(selectany) IID_INetworkFindDisconnectedSolver =
    {0x0a3a2fa4,0xd83f,0x4027,{0xb1,0xfa,0x6e,0x36,0x4b,0x26,0x46,0x2f}};
extern "C" const GUID __declspec(selectany) IID_INetworkFindAncestorsSolver =
    {0xf7d54412,0xae03,0x4a75,{0x8f,0x15,0x8f,0x33,0xff,0xe6,0xba,0x17}};
extern "C" const GUID __declspec(selectany) IID_INetworkFindLoopsSolver =
    {0xfdc2cdad,0x8ec0,0x4d6b,{0xac,0x04,0x01,0x20,0x86,0x46,0xbf,0x9c}};
extern "C" const GUID __declspec(selectany) IID_INetworkTraceUpstreamSolver =
    {0x5321d037,0xd8e0,0x4006,{0x8a,0xb8,0x99,0xb0,0x04,0xce,0x0c,0xa7}};
extern "C" const GUID __declspec(selectany) IID_INetworkTraceDownstreamSolver =
    {0xe629b2c3,0x9f3b,0x49c3,{0x96,0xef,0x84,0xba,0x48,0x15,0x49,0xad}};
extern "C" const GUID __declspec(selectany) IID_IQueryDef =
    {0xbdcc8142,0x7a33,0x437c,{0x82,0x3d,0xb5,0xf0,0x58,0xfd,0x2f,0xa6}};
extern "C" const GUID __declspec(selectany) IID_ISQLCheck =
    {0xec46e0b7,0x7b37,0x4c5c,{0xa5,0xeb,0x81,0x02,0x56,0x34,0x1c,0xf6}};
extern "C" const GUID __declspec(selectany) IID_IConflict =
    {0x25faa6e0,0xe390,0x47a8,{0x8f,0xf0,0x2d,0xaa,0xfb,0xdc,0x5f,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IFeatureProgress =
    {0x4eac5e54,0x613d,0x4d3c,{0xb3,0xa2,0x3f,0x72,0x92,0x60,0x49,0x75}};
extern "C" const GUID __declspec(selectany) IID_IEnumResName =
    {0xcd3e23c3,0x3abc,0x4a9d,{0xba,0xe0,0xee,0x3f,0x09,0x0e,0xfb,0x55}};
extern "C" const GUID __declspec(selectany) IID_IJunctionNetworkSource =
    {0x4a24b3e4,0x9c37,0x4fc6,{0x89,0x94,0x97,0xb9,0x23,0x9d,0x77,0x68}};
extern "C" const GUID __declspec(selectany) IID_IEdgeNetworkSource =
    {0x51f3dd52,0xb3a4,0x4b31,{0xad,0x72,0x9f,0x26,0x7a,0x15,0x0a,0xfa}};
extern "C" const GUID __declspec(selectany) IID_INetworkFieldEvaluator =
    {0x660b46e3,0xa093,0x4559,{0xb0,0x10,0xd1,0x36,0x5a,0x8c,0x44,0x6b}};
extern "C" const GUID __declspec(selectany) IID_INetworkConstantEvaluator =
    {0x4c998110,0x9812,0x4018,{0xa1,0x4e,0x0f,0x48,0xd9,0x95,0x71,0xf3}};
extern "C" const GUID __declspec(selectany) IID_INetworkScriptEvaluator =
    {0x5e63edc4,0x21f4,0x4891,{0x87,0xd4,0x82,0x74,0xfa,0x5e,0xa0,0x27}};
extern "C" const GUID __declspec(selectany) IID_IResourceManager =
    {0xc8906e80,0xdb1e,0x42d0,{0xb2,0xc9,0xa2,0x8a,0x7e,0xa0,0x6d,0xc6}};
extern "C" const GUID __declspec(selectany) IID_ICodedValueDomain =
    {0xd8dac21f,0x479b,0x449a,{0xa6,0x45,0xc9,0x94,0xb9,0x53,0x3c,0xff}};
extern "C" const GUID __declspec(selectany) IID_IRangeDomain =
    {0x88e27f7a,0x6deb,0x4eca,{0xaa,0x3c,0x3c,0x00,0x02,0x9d,0x9e,0x53}};
extern "C" const GUID __declspec(selectany) IID_IRowBufferFactory =
    {0x32bcbd6c,0x94be,0x4320,{0xb1,0xe4,0x67,0x78,0xf8,0x99,0x5d,0xb4}};
extern "C" const GUID __declspec(selectany) IID_IDomainFactory =
    {0x6da243af,0x1ff2,0x481a,{0x87,0xf5,0xe1,0xa5,0x26,0x47,0x2d,0xa3}};
extern "C" const GUID __declspec(selectany) IID_IDataSourcePluginManager =
    {0x085d6e5a,0xec09,0x4366,{0x95,0xe3,0x74,0xf1,0x33,0xdc,0xb9,0xc6}};
extern "C" const GUID __declspec(selectany) IID_IEdgeBarrier =
    {0xb5e5963b,0xd058,0x4969,{0xa7,0x76,0x2d,0x53,0x5e,0xac,0x0c,0x2f}};
extern "C" const GUID __declspec(selectany) IID_IJunctionBarrier =
    {0x87acb484,0xcb31,0x426e,{0x9c,0xd4,0xd3,0x62,0x28,0x40,0x7e,0xf0}};
extern "C" const GUID __declspec(selectany) CLSID_ConnectionInfo =
    {0x364ed8ef,0x2475,0x4b4a,{0x9d,0xfa,0xb7,0x85,0xb0,0x41,0x8c,0xbb}};
extern "C" const GUID __declspec(selectany) CLSID_DataSourceFactory =
    {0xdc6f0efa,0x8b18,0x4a97,{0x83,0xd6,0x46,0xa1,0xa8,0x7c,0x9c,0xc5}};
extern "C" const GUID __declspec(selectany) CLSID_FieldInfo =
    {0x469f7f3e,0xfe2e,0x46c8,{0x81,0x69,0x0b,0x78,0x96,0xef,0xf3,0xd7}};
extern "C" const GUID __declspec(selectany) CLSID_GeometryDef =
    {0x634c1476,0x2eeb,0x4a09,{0xa6,0x31,0x89,0x14,0x28,0xc9,0xd0,0x91}};
extern "C" const GUID __declspec(selectany) CLSID_FieldInfoCollection =
    {0xe504b735,0xa3af,0x4d21,{0xaf,0x4c,0x38,0xc0,0xa6,0xf9,0xb8,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID_DbIndexInfo =
    {0x35c74e1d,0xdedf,0x4940,{0x89,0xb3,0x9e,0x87,0x3d,0x14,0x9d,0xc2}};
extern "C" const GUID __declspec(selectany) CLSID_GridIndexInfo =
    {0xd3fea79c,0xc7b8,0x4bbf,{0x9d,0x5d,0x83,0x13,0x7d,0x28,0xef,0x42}};
extern "C" const GUID __declspec(selectany) CLSID_QueryFilter =
    {0x532f5083,0x1c7c,0x40df,{0x8b,0x78,0xd9,0xe8,0xa2,0x21,0xcf,0x75}};
extern "C" const GUID __declspec(selectany) CLSID_Conflict =
    {0x859d01c3,0x620f,0x4a3b,{0xb9,0x28,0x09,0x56,0x42,0xb6,0xbf,0x20}};
extern "C" const GUID __declspec(selectany) CLSID_CodedValueDomain =
    {0xb040dab1,0x3033,0x45b2,{0xa8,0x80,0x2a,0xc4,0x4f,0x87,0x86,0xff}};
extern "C" const GUID __declspec(selectany) CLSID_ReplicationFactory =
    {0x9cb4b869,0xf16b,0x44f5,{0xbd,0x6a,0xd2,0x25,0xbb,0x7c,0x88,0x55}};
extern "C" const GUID __declspec(selectany) CLSID_RowBufferCollection =
    {0x3c8a4581,0x1555,0x4691,{0x98,0xbc,0x9c,0x1f,0x7e,0xeb,0x8b,0xc9}};
extern "C" const GUID __declspec(selectany) CLSID_SpatialFilter =
    {0x9b6b80a9,0x53cd,0x43d7,{0xbf,0x43,0xde,0xad,0xd5,0x7b,0xb2,0x00}};
extern "C" const GUID __declspec(selectany) CLSID_RangeDomain =
    {0x13b79e11,0x8cf4,0x49b7,{0xb4,0x39,0xd9,0xb4,0xb2,0x4a,0x22,0x9b}};
extern "C" const GUID __declspec(selectany) CLSID_RowBufferFactory =
    {0xade59e51,0x444b,0x4135,{0xa6,0x95,0x66,0x54,0xd2,0x98,0x32,0xcf}};
extern "C" const GUID __declspec(selectany) CLSID_DomainFactory =
    {0x3e65b15d,0xd61e,0x452b,{0xbc,0x81,0x5e,0x0c,0xdb,0x6f,0x8c,0x79}};
extern "C" const GUID __declspec(selectany) CLSID_RenderIndexInfo =
    {0xea4a5691,0x3433,0x4bf5,{0xb4,0xc7,0x7c,0xbc,0xd5,0x36,0x1c,0xa0}};
extern "C" const GUID __declspec(selectany) CLSID_FeatureClass =
    {0xbe9f2283,0xf145,0x4f43,{0x86,0xb2,0xa1,0xa8,0x17,0xc4,0x48,0x3d}};
extern "C" const GUID __declspec(selectany) CLSID_Replication =
    {0xa6c858c0,0x5f65,0x446d,{0xb4,0x81,0xd2,0x82,0xa4,0x76,0x29,0x8f}};
extern "C" const GUID __declspec(selectany) CLSID_CheckOut =
    {0x305f0d4f,0xb25b,0x4b68,{0x81,0x4e,0x3d,0x64,0xc4,0x42,0x73,0x72}};
extern "C" const GUID __declspec(selectany) CLSID_CheckIn =
    {0x8dd5ece0,0xfaf7,0x4aab,{0xa5,0x18,0xc7,0x58,0x0d,0xbc,0x2d,0x41}};
extern "C" const GUID __declspec(selectany) CLSID_FeatureProgress =
    {0x252ecfe2,0xb225,0x4bcb,{0xaa,0x71,0x15,0x82,0xc7,0x51,0xc0,0x56}};
extern "C" const GUID __declspec(selectany) CLSID_FdeCursor =
    {0x174ef611,0xfb9d,0x47d7,{0x8a,0x93,0x37,0x28,0xe4,0xb0,0x40,0x7f}};
extern "C" const GUID __declspec(selectany) CLSID_SubTypeInfo =
    {0x2d5b2967,0xbc25,0x4bd8,{0xa2,0x6a,0x5b,0xcb,0x66,0xb1,0x32,0xe8}};
extern "C" const GUID __declspec(selectany) CLSID_FieldDomainInfo =
    {0x5cbbc5dd,0x0381,0x47c0,{0xbd,0x57,0xd5,0xd3,0x8c,0x8f,0x91,0x32}};
extern "C" const GUID __declspec(selectany) CLSID_IndexInfoCollection =
    {0x895bdd41,0xf5b7,0x482f,{0x81,0xbc,0xd1,0x71,0x38,0x77,0xbe,0x3d}};
extern "C" const GUID __declspec(selectany) CLSID_EnumResName =
    {0xbd2bcbae,0x2fc4,0x4bbd,{0xae,0xa3,0x15,0x21,0xf9,0x30,0x38,0x65}};
extern "C" const GUID __declspec(selectany) CLSID_Attachment =
    {0x0ed1b360,0xd94e,0x447c,{0x96,0xfe,0x43,0x12,0x75,0xde,0x84,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_AttachmentCollection =
    {0x30b1eb04,0x55c2,0x46bb,{0xb5,0xf6,0x97,0x89,0xeb,0xd5,0x91,0xde}};
extern "C" const GUID __declspec(selectany) CLSID_TemporalFilter =
    {0xe1867cfc,0x52ce,0x4798,{0xb0,0x8c,0x5c,0x8d,0x46,0xc9,0x1d,0x3c}};
extern "C" const GUID __declspec(selectany) CLSID_TemporalInstance =
    {0x753e16b5,0x4009,0x4012,{0x84,0x22,0x23,0x32,0x1c,0x7e,0xf4,0x71}};
extern "C" const GUID __declspec(selectany) CLSID_DataSourcePluginManager =
    {0x645e5a5b,0x693d,0x464f,{0x89,0x10,0x05,0xef,0x45,0x3b,0x79,0x5b}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkAttribute =
    {0xaf105142,0x534d,0x4d0f,{0x9c,0x39,0xd1,0x0f,0xeb,0xaf,0x2a,0x00}};
extern "C" const GUID __declspec(selectany) CLSID_JunctionNetworkSource =
    {0x8c33fa55,0xfd61,0x4654,{0x8a,0xd8,0xcd,0xcd,0xbc,0x7d,0x45,0xc4}};
extern "C" const GUID __declspec(selectany) CLSID_EdgeNetworkSource =
    {0x59447144,0x9e64,0x4ca1,{0xbf,0x05,0x0c,0x37,0xfd,0x1d,0x8e,0x0f}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkFieldEvaluator =
    {0xdbe38837,0xec6d,0x43e7,{0xba,0xef,0x4c,0xe3,0x97,0xf6,0x6a,0x8f}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkConstantEvaluator =
    {0x2a8efded,0xd5a2,0x415e,{0x8d,0x5a,0x53,0x6f,0x1c,0x29,0x94,0x0e}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkLocation =
    {0xeb50e00c,0x1826,0x41da,{0xa3,0x1c,0x70,0xa1,0xb2,0xf1,0x31,0xe5}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkEventLocation =
    {0xea2e0bca,0x65ed,0x4695,{0x93,0xcb,0x40,0x09,0xa0,0x06,0x11,0xc4}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkScriptEvaluator =
    {0xc3c66780,0xfd70,0x4359,{0xbc,0x75,0xba,0x5d,0x30,0x2d,0x27,0x97}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkEdge =
    {0x1637acbc,0x4840,0x447f,{0x9e,0xa5,0xc5,0xf7,0x0c,0x00,0xe7,0x38}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkJunction =
    {0xd4a339e5,0xd97e,0x463f,{0x80,0x53,0x12,0xbe,0x66,0x13,0x3e,0x63}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkElementCollection =
    {0x9cf4d038,0xc074,0x404e,{0xad,0x88,0xe8,0xc2,0x6a,0x8a,0x13,0x72}};
extern "C" const GUID __declspec(selectany) CLSID_NetworkEdgeCollection =
    {0x2663fca1,0x5d7c,0x4d7e,{0xb6,0xa3,0x28,0x2c,0x2e,0x61,0x38,0x7b}};
extern "C" const GUID __declspec(selectany) CLSID_LogicalNetwork =
    {0x47fb4728,0x9599,0x4be6,{0xa5,0xc8,0x80,0x75,0x4d,0x81,0x48,0xa3}};
extern "C" const GUID __declspec(selectany) CLSID_EdgeBarrier =
    {0x4d771219,0x87a8,0x42ca,{0x90,0xb1,0x52,0x72,0x15,0x6a,0xf1,0xb5}};
extern "C" const GUID __declspec(selectany) CLSID_JunctionBarrier =
    {0xc3156659,0x383f,0x4e38,{0x8f,0xcc,0xff,0x50,0x3d,0xca,0x56,0xe5}};
extern "C" const GUID __declspec(selectany) CLSID_Tools =
    {0x8648f1d5,0xf5c5,0x4c0f,{0x9d,0x12,0xc3,0x9d,0x73,0xd8,0x66,0x9e}};
extern "C" const GUID __declspec(selectany) IID_ITable =
    {0x6113a8c3,0xdaf7,0x48bc,{0x87,0xf5,0xd8,0xa0,0xd3,0xb3,0x9a,0xd0}};
extern "C" const GUID __declspec(selectany) IID_IDataSource =
    {0xd746bee4,0x69f7,0x4787,{0x97,0xdf,0x46,0xc7,0x19,0x71,0xcc,0xb5}};
extern "C" const GUID __declspec(selectany) IID_IDataSourceFactory =
    {0x16bcd644,0xc298,0x4614,{0x98,0x0e,0xf7,0xb5,0x1c,0xad,0x0c,0x59}};
extern "C" const GUID __declspec(selectany) IID_IFeatureDataSet =
    {0x09b2d417,0xa4c1,0x4a56,{0xae,0x56,0x49,0xe4,0x50,0xc7,0xd1,0xc4}};
extern "C" const GUID __declspec(selectany) IID_IObjectClass =
    {0x81389969,0x3aef,0x45a2,{0x97,0xd8,0x3c,0xd6,0xf6,0xa7,0xca,0x42}};
extern "C" const GUID __declspec(selectany) IID_IFeatureClass =
    {0x32684cb2,0xcedb,0x4956,{0xaf,0xb4,0x24,0x00,0x29,0x99,0x07,0x99}};
extern "C" const GUID __declspec(selectany) IID_INetworkClosestFacilitySolver =
    {0x09b9f378,0xc108,0x4f2f,{0x97,0x1e,0xc3,0xe2,0xcf,0xb2,0x91,0x5b}};
extern "C" const GUID __declspec(selectany) IID_IReplication =
    {0x01dd46f1,0xba42,0x408d,{0xa6,0x08,0x9d,0xe7,0x8b,0xb1,0xef,0x62}};
extern "C" const GUID __declspec(selectany) IID_ICheckOut =
    {0xb26aa204,0x533b,0x4f65,{0xa7,0x4b,0x0a,0xc2,0x32,0x24,0xba,0x0d}};
extern "C" const GUID __declspec(selectany) IID_ICheckIn =
    {0x770404f1,0xffb0,0x40c7,{0x95,0x81,0x0b,0xf4,0xdc,0xb5,0x4c,0x00}};
extern "C" const GUID __declspec(selectany) IID_IReplicationFactory =
    {0x0d333027,0xda10,0x4e9a,{0x85,0x43,0x1e,0x5f,0x55,0xe0,0x9e,0xa6}};
extern "C" const GUID __declspec(selectany) IID_ITools =
    {0xc18b6255,0x8c4d,0x4b50,{0xa1,0x04,0x84,0x93,0xac,0x32,0x75,0xd3}};
extern "C" const GUID __declspec(selectany) IID_INetworkManager =
    {0x64dc91ae,0xbc1e,0x4061,{0x9a,0xd3,0xbc,0x9e,0xa0,0xd3,0x78,0x23}};
extern "C" const GUID __declspec(selectany) IID_INetwork =
    {0xd889e13b,0x7b83,0x4a1b,{0x96,0xfe,0x0b,0x41,0xff,0xcf,0x94,0x58}};
extern "C" const GUID __declspec(selectany) IID_ILogicalNetwork =
    {0x998a0d4d,0xaaa3,0x454b,{0xb0,0x4c,0xf4,0xfb,0x3e,0xeb,0xe6,0x39}};
extern "C" const GUID __declspec(selectany) IID_INetworkEdge =
    {0xec1645c6,0x0f46,0x4efa,{0x9e,0x40,0x54,0xe3,0x0e,0x84,0x1e,0x34}};
extern "C" const GUID __declspec(selectany) IID_INetworkEdgeCollection =
    {0xaa1d1154,0x7472,0x40e8,{0xbe,0xcd,0x49,0x04,0x11,0x3c,0x16,0xfc}};
extern "C" const GUID __declspec(selectany) IID_INetworkJunction =
    {0xb3f9441b,0xe33a,0x448a,{0x9d,0xd7,0xb1,0x76,0x9a,0x94,0x2b,0x42}};

//
// Wrapper method implementations
//

#include "d:\program files (x86)\citymaker 7\citymaker sdk\samples\csharp\beginner\helloworldcplus\debug\GcmFdeCore.tli"

#pragma pack(pop)
